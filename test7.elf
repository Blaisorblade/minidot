% echo "set unsafe true 
% loadFile test7.elf" |/Volumes/Twelf\ for\ OS\ X\ \(Intel\)/Twelf/bin/twelf-server

% STLC: big step preservation
% - add store
% + add subtyping
% + add env to subtyping
% + add type members
% + add value members
% - add type bounds
% - add paths
% - add self types

%{ ------- arithmetic ----- }%

nat: type.
z: nat.
s: nat -> nat.

add : nat -> nat -> nat -> type.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.

%mode add +N1 +N2 -N3.

lte : nat -> nat -> type.
lte/z : lte z N.
lte/s : lte (s N1) (s N2) 
   <- lte N1 N2.

%mode lte +N1 +N2.


eq : nat -> nat -> type.
eq/z : eq z z.
eq/s : eq (s N1) (s N2) 
   <- eq N1 N2.

% %mode eq +N1 +N2.


ne : nat -> nat -> type.
ne/z : ne z (s N).
ne/z : ne (s N) z.
ne/s : ne (s N1) (s N2) 
   <- ne N1 N2.

%mode ne +N1 +N2.


%query 0 * lte (s (s z)) (s z).
%query 1 * lte (s (s z)) (s (s z)).

eq-refl: {N:nat} eq N N -> type.
%mode eq-refl +N -E1.

- : eq-refl z eq/z.
- : eq-refl (s N) (eq/s E) <- eq-refl N E.

%worlds () (eq-refl _ _).
%total {A} (eq-refl A _).


sub-eq: eq A1 A2 -> eq C1 C2 -> add A1 B1 C1 -> add A2 B2 C2 -> eq B1 B2 -> type.
%mode sub-eq +E1 +E2 +A1 +A2 -E3.

- : sub-eq eq/z E add/z add/z E.
- : sub-eq (eq/s E1) (eq/s E2) (add/s A1) (add/s A2) E3
  <- sub-eq E1 E2 A1 A2 E3.

%worlds () (sub-eq _ _ _ _ _).
%total {A} (sub-eq A _ _ _ _).

add-inc: add A B C -> add A (s B) (s C) -> type.
%mode add-inc +E1 -E2.

- : add-inc add/z add/z.
- : add-inc (add/s A1) (add/s A2)
  <- add-inc A1 A2.

%worlds () (add-inc _ _).
%total {A} (add-inc A _).





%{ ------- language ----- }%

% sorts
cst: type.
op: type.

exp: type.

tpe: type.
val: type.

venv: type.
tenv: type.


% constants
ncst: nat -> cst.
fcst: cst.
tcst: cst.

% operators
plus  : op.
equal : op.

% expressions
cste: cst -> exp.
var: nat -> exp.
prm: op -> exp -> exp -> exp.
fun: exp -> exp -> tpe -> exp.
app: exp -> exp -> exp.
sel: exp -> exp.


% types
int  : tpe.
bool : tpe.
top  : tpe.
bot  : tpe.
arrow: tpe -> tpe -> tpe.  % { A => B }
rect : tpe -> tpe.         % { type A }
recv : tpe -> tpe.         % { val get: A }
tsel : exp -> tpe.         % x.A
% tand : tpe -> tpe -> tpe.  % A && B

% values
cstv: cst -> val.
clos: exp -> val -> venv -> val.

% environments
vnil  : venv.
vcons : val -> venv -> venv.
tnil  : tenv.
tcons : tpe -> tenv -> tenv.






%{ ------- eval-op / primitives ----- }%

% typeof

typeof     : cst -> tpe -> type.
-/n        : typeof (ncst N) int.
-/t        : typeof (tcst) bool.
-/f        : typeof (fcst) bool.

%mode typeof *A *B.

% eval-op

eval-cst-op : op -> cst -> cst -> cst -> type.
e/plus     : eval-cst-op plus (ncst N1) (ncst N2) (ncst N3) <- add N1 N2 N3.
e/eqt      : eval-cst-op equal (ncst N1) (ncst N2) (tcst) <- lte N1 N2 <- lte N2 N1.
e/eqf      : eval-cst-op equal (ncst N1) (ncst N2) (fcst) <- ne N1 N2.

eval-op    : op -> val -> val -> val -> type.
ev/v       : eval-op O (cstv C1) (cstv C2) (cstv C3) <- eval-cst-op O C1 C2 C3.

%mode eval-cst-op +O +V1 +V2 -V3.
%mode eval-op +O +V1 +V2 -V3.


% type-op

type-op    : op -> tpe -> tpe -> tpe -> type.
t/plus     : type-op plus int int int.
t/eq       : type-op equal int int bool.


% eval-cst-op/safe

eval-cst-op-safe : type-op OP T1 T2 T3 -> eval-cst-op OP C1 C2 C3 -> typeof C3 T3 -> type.
%mode eval-cst-op-safe +LTE1 +LTE2 -LTE3.

-plus   : eval-cst-op-safe t/plus (e/plus _) -/n.
-eqt    : eval-cst-op-safe t/eq (e/eqt _ _) -/t.
-eqf    : eval-cst-op-safe t/eq (e/eqf _) -/f.

%worlds () (eval-cst-op-safe _ _ _).
%total LTE1 (eval-cst-op-safe LTE1 _ _). % induction on first arg (not used here)



%{ ------- environments ----- }%

vlookup-zero : venv -> exp -> val -> type.
vl/hit  : vlookup-zero (vcons V G) (var z) V.
vl/miss : vlookup-zero (vcons _ G) (var (s N)) V <- vlookup-zero G (var N) V.

vbind : venv -> val -> exp -> venv -> type.
vl/n  : vbind vnil V (var z) (vcons V vnil).
vl/c  : vbind (vcons V G1) V2 (var (s N)) (vcons V2 (vcons V G1)) <- vbind G1 V (var N) _.

vsize : venv -> exp -> type.
vf/n   : vsize vnil (var z).
vf/c   : vsize (vcons _ G) (var (s N)) <- vsize G (var N).

vlookup: venv -> exp -> val -> type.
vl  : vlookup G (var N) V
  <- vsize G (var S)
  <- add N M S
  <- vlookup-zero G (var M) V.


tlookup-zero: tenv -> exp -> tpe -> type.
tl/hit  : tlookup-zero (tcons V G) (var z) V.
tl/miss : tlookup-zero (tcons _ G) (var (s N)) V <- tlookup-zero G (var N) V.

tbind : tenv -> tpe -> exp -> tenv -> type.
tl/n  : tbind tnil V (var z) (tcons V tnil).
tl/c  : tbind (tcons V G1) V2 (var (s N)) (tcons V2 (tcons V G1)) <- tbind G1 V (var N) _.

tsize : tenv -> exp -> type.
tf/n   : tsize tnil (var z).
tf/c   : tsize (tcons _ G) (var (s N)) <- tsize G (var N).

tlookup: tenv -> exp -> tpe -> type.
tl  : tlookup G (var N) V
  <- tsize G (var S)
  <- add N M S
  <- tlookup-zero G (var M) V.

% tlookupa: tenv -> exp -> tpe -> type.
% tl/hita  : tlookupa (tcons V G) (var N) V <- tfresh G (var N).
% tl/missa : tlookupa (tcons _ G) (var N) V <- tlookupa G (var N) V.








%{ ------- subtyping ------ }%

path-eval: tenv -> exp -> tpe -> type.
% %mode path-eval +G +E -T.

wf-tp : tenv -> tpe -> type.

sub-tp : tenv -> tpe -> tenv -> tpe -> type.

pev  : path-eval G E T <- wf-tp G T <- tlookup G E T.

% pev/sub  : path-eval G E T2 <- path-eval G E T1 <- sub-tp G T1 G T2.


sub-tp/int  : sub-tp G1 int G2 int.
sub-tp/bool : sub-tp G1 bool G2 bool.
sub-tp/top  : sub-tp G1 T G2 top <- wf-tp G1 T.
sub-tp/bot  : sub-tp G1 bot G2 T <- wf-tp G2 T.

sub-tp/fun  : sub-tp G1 (arrow T1 T2) G2 (arrow T3 T4)
              <- sub-tp G2 T3 G1 T1
              <- sub-tp G1 T2 G2 T4.

sub-tp/rect : sub-tp G1 (rect T1) G2 (rect T2)
              <- sub-tp G1 T1 G2 T2.

sub-tp/recv : sub-tp G1 (recv T1) G2 (recv T2)
              <- sub-tp G1 T1 G2 T2.

sub-tp/tsel1 : sub-tp G1 (tsel E1) G2 T2
              <- path-eval G1 E1 (rect T1)
              <- sub-tp G1 T1 G2 T2.

sub-tp/tsel2 : sub-tp G1 T1 G2 (tsel E2)
              <- path-eval G2 E2 (rect T2)
              <- sub-tp G1 T1 G2 T2.

              % <- sub-tp G1 P1 T1 G2 E2T2.



wf-tp/int  : wf-tp G1 int.
wf-tp/bool : wf-tp G1 bool.
wf-tp/top  : wf-tp G1 top.
wf-tp/bot  : wf-tp G1 bot.

wf-tp/fun  : wf-tp G1 (arrow T1 T2)
              <- wf-tp G1 T1
              <- wf-tp G1 T2.

wf-tp/rect : wf-tp G1 (rect T1)
              <- wf-tp G1 T1.

wf-tp/recv : wf-tp G1 (recv T1)
              <- wf-tp G1 T1.

wf-tp/tsel : wf-tp G1 (tsel E1)
              <- path-eval G1 E1 (rect T1).



% Extending environments preserves lookup (TODO: change index sign)

extend-wf-lkp: tlookup G E T -> {Z: tpe} tlookup (tcons Z G) E T -> type.
%mode extend-wf-lkp +A +B -C.
%worlds () (extend-wf-lkp _ _ _).
%trustme
%total A (extend-wf-lkp A _ _).



% Extending environments preserves subtyping

extend-wf-tp: wf-tp G1 T1 -> {Z: tpe} wf-tp (tcons Z G1) T1 -> type.
%mode extend-wf-tp +A +B -C.

- : extend-wf-tp wf-tp/int T wf-tp/int.
- : extend-wf-tp wf-tp/bool T wf-tp/bool.
- : extend-wf-tp wf-tp/top T wf-tp/top.
- : extend-wf-tp wf-tp/bot T wf-tp/bot.
- : extend-wf-tp (wf-tp/fun W1 W2) T (wf-tp/fun W1' W2') 
      <- extend-wf-tp W1 _ W1'
      <- extend-wf-tp W2 _ W2'.
- : extend-wf-tp (wf-tp/rect W1) T (wf-tp/rect W1') 
      <- extend-wf-tp W1 _ W1'.
- : extend-wf-tp (wf-tp/recv W1) T (wf-tp/recv W1') 
      <- extend-wf-tp W1 _ W1'.
- : extend-wf-tp (wf-tp/tsel (pev L W)) T (wf-tp/tsel (pev L' W'))
      <- extend-wf-lkp L _ L'
      <- extend-wf-tp W _ W'.

%worlds () (extend-wf-tp _ _ _).
%total A (extend-wf-tp A _ _).


extend-sub-tp: sub-tp G1 T1 G2 T2 -> {Z: tpe} 
  sub-tp (tcons Z G1) T1 (tcons Z G2) T2 -> 
  sub-tp (tcons Z G1) T1 G2 T2 -> 
  sub-tp G1 T1 (tcons Z G2) T2 -> 
  type.
%mode extend-sub-tp +A +B -C -D -E.

- : extend-sub-tp sub-tp/int T sub-tp/int sub-tp/int sub-tp/int.
- : extend-sub-tp sub-tp/bool T sub-tp/bool sub-tp/bool sub-tp/bool.
- : extend-sub-tp (sub-tp/top ST) T (sub-tp/top ST') (sub-tp/top ST') (sub-tp/top ST) 
      <- extend-wf-tp ST _ ST'.
- : extend-sub-tp (sub-tp/bot ST) T (sub-tp/bot ST') (sub-tp/bot ST) (sub-tp/bot ST') 
      <- extend-wf-tp ST _ ST'.
- : extend-sub-tp (sub-tp/fun ST1 ST2) T (sub-tp/fun ST1' ST2') (sub-tp/fun ST1A ST2B) (sub-tp/fun ST1B ST2A)
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B
      <- extend-sub-tp ST2 _ ST2' ST2A ST2B.
- : extend-sub-tp (sub-tp/rect ST1) T (sub-tp/rect ST1') (sub-tp/rect ST1A) (sub-tp/rect ST1B) 
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B.
- : extend-sub-tp (sub-tp/recv ST1) T (sub-tp/recv ST1') (sub-tp/recv ST1A) (sub-tp/recv ST1B) 
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B.
- : extend-sub-tp (sub-tp/tsel1 ST (pev L W)) T 
    (sub-tp/tsel1 ST' (pev L' W')) (sub-tp/tsel1 STA (pev L' W')) (sub-tp/tsel1 STB (pev L W))
      <- extend-wf-lkp L _ L'
      <- extend-wf-tp W _ W'
      <- extend-sub-tp ST _ ST' STA STB.
- : extend-sub-tp (sub-tp/tsel2 ST (pev L W)) T 
    (sub-tp/tsel2 ST' (pev L' W')) (sub-tp/tsel2 STA (pev L W)) (sub-tp/tsel2 STB (pev L' W'))
      <- extend-wf-lkp L _ L'
      <- extend-wf-tp W _ W'
      <- extend-sub-tp ST _ ST' STA STB.

%worlds () (extend-sub-tp _ _ _ _ _).
%total A (extend-sub-tp A _ _ _ _).


extend-sub-tp12: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp (tcons Z G1) T1 (tcons Z G2) T2 -> type.
%mode extend-sub-tp12 +A +B -C.
- : extend-sub-tp12 ST Z ST' <- extend-sub-tp ST Z ST' _ _.
%worlds () (extend-sub-tp12 _ _ _).
%total A (extend-sub-tp12 A _ _).

extend-sub-tp1: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp (tcons Z G1) T1 G2 T2 -> type.
%mode extend-sub-tp1 +A +B -C.
- : extend-sub-tp1 ST Z ST' <- extend-sub-tp ST Z _ ST' _.
%worlds () (extend-sub-tp1 _ _ _).
%total A (extend-sub-tp1 A _ _).

extend-sub-tp2: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp G1 T1 (tcons Z G2) T2 -> type.
%mode extend-sub-tp2 +A +B -C.
- : extend-sub-tp2 ST Z ST' <- extend-sub-tp ST Z _ _ ST'.
%worlds () (extend-sub-tp2 _ _ _).
%total A (extend-sub-tp2 A _ _).





%% Subtyping is reflexive

sub-tp-refl : 
  %% Input
  wf-tp G T ->
  %% Output
  sub-tp G T G T ->
  type.
%mode sub-tp-refl +WT -SBT.

-/int : sub-tp-refl wf-tp/int sub-tp/int.
-/bool: sub-tp-refl wf-tp/bool sub-tp/bool.
-/bot : sub-tp-refl wf-tp/bot (sub-tp/bot wf-tp/bot).
-/top : sub-tp-refl wf-tp/top (sub-tp/top wf-tp/top).
-/fun : sub-tp-refl (wf-tp/fun T1 T2) (sub-tp/fun SBT1 SBT2)
   <- sub-tp-refl T1 SBT1
   <- sub-tp-refl T2 SBT2.

-/rect: sub-tp-refl (wf-tp/rect T1) (sub-tp/rect SBT1)
   <- sub-tp-refl T1 SBT1.
-/recv: sub-tp-refl (wf-tp/recv T1) (sub-tp/recv SBT1)
   <- sub-tp-refl T1 SBT1.

-/tsel: sub-tp-refl 
  (wf-tp/tsel (pev L (wf-tp/rect WT1)))
    (sub-tp/tsel1 (sub-tp/tsel2 SBT1 (pev L (wf-tp/rect WT1))) (pev L (wf-tp/rect WT1)))
     <- sub-tp-refl WT1 SBT1.

%worlds () (sub-tp-refl _ _).
%total T (sub-tp-refl T _).



extract-wf : sub-tp G1 T1 G2 T2 -> wf-tp G1 T1 -> wf-tp G2 T2 -> type.
%mode extract-wf +SBT1 -SBT2 -SBT3.
- : extract-wf sub-tp/int wf-tp/int wf-tp/int.
- : extract-wf sub-tp/bool wf-tp/bool wf-tp/bool.
- : extract-wf (sub-tp/top W) W wf-tp/top.
- : extract-wf (sub-tp/bot W) wf-tp/bot W.
- : extract-wf (sub-tp/fun (ST1:sub-tp G1 T2 G2 T4) (ST2:sub-tp G2 T3 G1 T1)) 
        (wf-tp/fun W2 W1) (wf-tp/fun W4 W3)
      <- extract-wf ST1 W2 W4
      <- extract-wf ST2 W3 W1.
- : extract-wf (sub-tp/rect ST) (wf-tp/rect W1) (wf-tp/rect W2)
      <- extract-wf ST W1 W2.
- : extract-wf (sub-tp/recv ST) (wf-tp/recv W1) (wf-tp/recv W2)
      <- extract-wf ST W1 W2.

- : extract-wf (sub-tp/tsel1 ST (pev L (wf-tp/rect _))) 
      (wf-tp/tsel (pev L (wf-tp/rect W1))) W2
      <- extract-wf ST W1 W2.

- : extract-wf (sub-tp/tsel2 ST (pev L (wf-tp/rect _))) 
      W1 (wf-tp/tsel (pev L (wf-tp/rect W2)))
      <- extract-wf ST W1 W2.


%worlds () (extract-wf _ _ _).
%total T2 (extract-wf T2 _ _).



%% Subtyping is transitive

sub-tp-trans-aux :
  %% Inputs
%  {G2:tenv}
%  {T2:tpe}
  wf-tp G2 T2 ->
  sub-tp G1 T1 G2 T2 ->
  sub-tp G2 T2 G3 T3 ->
  %% Output
  sub-tp G1 T1 G3 T3 ->
  type.
%mode sub-tp-trans-aux +T2 +SBT1 +SBT2 -SBT3.

-/int    : sub-tp-trans-aux wf-tp/int sub-tp/int sub-tp/int sub-tp/int.
-/bool   : sub-tp-trans-aux wf-tp/bool sub-tp/bool sub-tp/bool sub-tp/bool.

-/top    : sub-tp-trans-aux _ S1 (sub-tp/top _) (sub-tp/top W) <- extract-wf S1 W _.
-/bot    : sub-tp-trans-aux _ (sub-tp/bot _) S2 (sub-tp/bot W) <- extract-wf S2 _ W.


-/fun-fun  : sub-tp-trans-aux
      (wf-tp/fun T2 T1)
            (sub-tp/fun SBT2 SBT1)
            (sub-tp/fun SBT4 SBT3)
            (sub-tp/fun SBT6 SBT5)  
      <- sub-tp-trans-aux T1 SBT3 SBT1 SBT5
      <- sub-tp-trans-aux T2 SBT2 SBT4 SBT6.

-/rect-rect  : sub-tp-trans-aux
      (wf-tp/rect T1)
            (sub-tp/rect SBT1)
            (sub-tp/rect SBT3)
            (sub-tp/rect SBT5)  
      <- sub-tp-trans-aux T1 SBT1 SBT3 SBT5.

-/recv-recv  : sub-tp-trans-aux
      (wf-tp/recv T1)
            (sub-tp/recv SBT1)
            (sub-tp/recv SBT3)
            (sub-tp/recv SBT5)  
      <- sub-tp-trans-aux T1 SBT1 SBT3 SBT5.

-/tsel1  : sub-tp-trans-aux  % p.T1 < T2 <-- p:{T1} && T1 < T2
      W
      (sub-tp/tsel1 SBT1 P)
      SBT3
      (sub-tp/tsel1 SBT5 P)
      <- sub-tp-trans-aux W SBT1 SBT3 SBT5.

-/tsel2  : sub-tp-trans-aux  % T1 < p.T2 <-- p:{T1} && T1 < T2
      W
      SBT1
      (sub-tp/tsel2 SBT3 P)
      (sub-tp/tsel2 SBT5 P)
      <- sub-tp-trans-aux W SBT1 SBT3 SBT5.


%% case T1 < p.T2 && p.T2 < T3   -->   T1 < T3


same: tpe -> tpe -> type.
ident: same T T.

lookup-zero-same: tlookup-zero G2 E T1 -> tlookup-zero G2 E T2 -> same T1 T2 -> type.
%mode lookup-zero-same +P1 +P2 -SBT.

- : lookup-zero-same tl/hit tl/hit ident.
- : lookup-zero-same (tl/miss A) (tl/miss B) X <- lookup-zero-same A B X.

%worlds () (lookup-zero-same _ _ _).
%total {T2} (lookup-zero-same T2 _ _).



size-eq: tsize G2 (var N1) -> tsize G2 (var N2) -> eq N1 N2 -> type.
%mode size-eq +P1 +P2 -SBT.

- : size-eq tf/n tf/n eq/z.
- : size-eq (tf/c A) (tf/c B) (eq/s X) <- size-eq A B X.

%worlds () (size-eq _ _ _).
%total {T2} (size-eq T2 _ _).



lookup-zero-eq: tlookup-zero G2 (var N1) (rect T1) -> tlookup-zero G2 (var N2) (rect T2) -> eq N1 N2 -> same T1 T2 -> type.
%mode lookup-zero-eq +P1 +P2 +E -SBT.

- : lookup-zero-eq tl/hit tl/hit eq/z ident.
- : lookup-zero-eq (tl/miss A) (tl/miss B) (eq/s E) X <- lookup-zero-eq A B E X.

%worlds () (lookup-zero-eq _ _ _ _).
%total {T2} (lookup-zero-eq T2 _ _ _).


lookup-eq: tlookup G2 (var N1) (rect T1) -> tlookup G2 (var N2) (rect T2) -> eq N1 N2 -> same T1 T2 -> type.
%mode lookup-eq +P1 +P2 +E -SBT.

- : lookup-eq (tl L1 A1 F1) (tl L2 A2 F2) EN X 
        <- size-eq F1 F2 ES 
        <- sub-eq EN ES A1 A2 EM 
        <- lookup-zero-eq L1 L2 EM X.

%worlds () (lookup-eq _ _ _ _).
%total {T2} (lookup-eq T2 _ _ _).




eq-low: same T1 T1' -> sub-tp G1 T1 G2 T2 -> sub-tp G1 T1' G2 T2 -> type.
%mode eq-low +P1 +P2 -SBT.

- : eq-low ident S S.

%worlds () (eq-low _ _ _).
%total {T2} (eq-low T2 _ _).

eq-high: same T2 T2' -> sub-tp G1 T1 G2 T2 -> sub-tp G1 T1 G2 T2' -> type.
%mode eq-high +P1 +P2 -SBT.

- : eq-high ident S S.

%worlds () (eq-high _ _ _).
%total {T2} (eq-high T2 _ _).



-/tsel2-tsel1  : sub-tp-trans-aux  % T1 < p.T2 && p.T2 < T3 --> T1 < T3
      (wf-tp/tsel (pev (P0: (tlookup G2 (var N) (rect T2))) (wf-tp/rect (W: wf-tp G2 T2)) ))
      (sub-tp/tsel2 (A1: sub-tp G1 T1 G2 T2A) (pev (P1: (tlookup G2 (var N) (rect T2A))) (wf-tp/rect W1X)))
      (sub-tp/tsel1 (A2: sub-tp G2 T2B G3 T3) (pev (P2: (tlookup G2 (var N) (rect T2B))) (wf-tp/rect W2X)))
      (SBT5: sub-tp G1 T1 G3 T3)
      
      <- eq-refl N Q
      <- lookup-eq P1 P0 Q (S1: same T2A T2)
      <- lookup-eq P2 P0 Q (S2: same T2B T2)

      <- eq-high S1 A1 (A1': sub-tp G1 T1 G2 T2)
      <- eq-low  S2 A2 (A2': sub-tp G2 T2 G3 T3)

      <- sub-tp-trans-aux W A1' A2' SBT5.


%{
%% ----- approximate version / use reflexivity internally ---- %%


wfff0: tlookup G E (rect T0) -> wf-tp G1 T0 -> tlookup G E (rect T1) -> wf-tp G1 T1 -> type.
%mode wfff0 +P0 +W +P1 -W1.

- : wfff0 tl/hit W0 tl/hit W0.
- : wfff0 (tl/miss A) W0 (tl/miss B) W1 <- wfff0 A W0 B W1.

%worlds () (wfff0 _ _ _ _).
%total {T2} (wfff0 T2 _ _ _).
%reduces N3 <= N2 (wfff0 _ N2 _ N3).


foobarx: wf-tp G T1 -> tlookup G2 E (rect T1) -> tlookup G2 E (rect T2) -> sub-tp G T1 G T2 -> wf-tp G T2 -> type.
%mode foobarx +W +P1 +P2 -SBT -W2.

- : foobarx W tl/hit tl/hit X W <- sub-tp-refl W X.
- : foobarx W (tl/miss A) (tl/miss B) X Y <- foobarx W A B X Y.

%worlds () (foobarx _ _ _ _ _).
%total {T2} (foobarx _ T2 _ _ _).


-/tsel2-tsel1  : sub-tp-trans-aux  % T1 < p.T2 && p.T2 < T3 --> T1 < T3
      (wf-tp/tsel (pev (P0: (tlookup G2 E (rect T2))) (wf-tp/rect (W: wf-tp G2 T2)) ))
      (sub-tp/tsel2 (A1: sub-tp G1 T1 G2 T2A) (pev (P1: (tlookup G2 E (rect T2A))) (wf-tp/rect W1X)))
      (sub-tp/tsel1 (A2: sub-tp G2 T2B G3 T3) (pev (P2: (tlookup G2 E (rect T2B))) (wf-tp/rect W2X)))
      (SBT5: sub-tp G1 T1 G3 T3)

%      <- foobar1 P0 A1 (SBT1: sub-tp G1 T1 G2 T2)   infer T2A < T2 

      <- wfff0 P0 W P1 W1
      <- foobarx W1 P1 P0 (SBTZ0: (sub-tp G2 T2A G2 T2)) _
      <- sub-tp-trans-aux W1 A1 SBTZ0 (SBT1: sub-tp G1 T1 G2 T2)


%      <- foobar2 P0 A2 (SBT2: sub-tp G2 T2 G3 T3)   infer T2 < T2B 

      <- wfff0 P0 W P2 W2
      <- foobarx W P0 P2 (SBTZ1: (sub-tp G2 T2 G2 T2B)) _
      <- sub-tp-trans-aux W2 SBTZ1 A2 (SBT2: sub-tp G2 T2 G3 T3)

      <- sub-tp-trans-aux W SBT1 SBT2 SBT5.
}%

%worlds () (sub-tp-trans-aux _ _ _ _).
%total {T2 S1 S2} (sub-tp-trans-aux T2 S1 S2 _).




%% Corrollary to sub-tp-trans-aux that doesn't require us to provide
%% WF as an additional argument.

sub-tp-trans :
  %% Inputs
  sub-tp G1 T1 G2 T2 ->
  sub-tp G2 T2 G3 T3 ->
  %% Output
  sub-tp G1 T1 G3 T3 ->
  type.
%mode sub-tp-trans +SBT1 +SBT2 -SBT3.

-/i : sub-tp-trans SBT1 SBT2 SBT3
       <- extract-wf SBT1 T1 T2
       <- sub-tp-trans-aux T2 SBT1 SBT2 SBT3.

%worlds () (sub-tp-trans _ _ _).
%total {A} (sub-tp-trans A _ _).





%{ ------- eval-exp / type-exp ----- }%

eval-exp   : venv -> exp -> val -> type.
% e/cst      : eval-exp G (cste C) (cstv C).
% e/prim     : eval-exp G (prm OP E1 E2) V3
%             <- eval-exp G E1 V1 
%             <- eval-exp G E2 V2
%             <- eval-op OP V1 V2 V3.

e/var      : eval-exp G X V <- vlookup G X V.
e/fun      : eval-exp G (fun R R2 T) (clos R V2 G)
            <- eval-exp G R2 V2.


e/app      : eval-exp G (app E1 E2) V3
            <- eval-exp G E1 (clos R R2 G1)
            <- eval-exp G E2 V2
            <- eval-exp (vcons V2 G1) R V3.

e/sel      : eval-exp G (sel E1) V
            <- eval-exp G E1 (clos R V G1).




type-exp   : tenv -> exp -> tpe -> type.
% t/cst       : type-exp G (cste C) T <- typeof C T.
% t/prim      : type-exp G (prm OP E1 E2) T3
%             <- type-exp G E1 T1 
%             <- type-exp G E2 T1
%             <- type-op OP T1 T2 T3.

t/var      : type-exp G X T <- tlookup G X T <- wf-tp G T.

% whacky way of assigning an intersection type...
t/fun      : type-exp G (fun R R2 TX) (arrow T3 T4) 
                <- type-exp (tcons T3 G) R T4
                <- type-exp G R2 T2
                <- wf-tp G TX
                <- wf-tp G (arrow T3 T4).
t/recv     : type-exp G (fun R R2 TX) (recv T2)
                <- type-exp (tcons T3 G) R T4
                <- type-exp G R2 T2
                <- wf-tp G TX
                <- wf-tp G (arrow T3 T4).
t/rect     : type-exp G (fun R R2 TX) (rect TX) 
                <- type-exp (tcons T3 G) R T4
                <- type-exp G R2 T2
                <- wf-tp G TX
                <- wf-tp G (arrow T3 T4).


t/app       : type-exp G (app E1 E2) T2
            <- type-exp G E1 (arrow T1 T2) 
            <- type-exp G E2 T1.

t/sel       : type-exp G (sel E1) T1
            <- type-exp G E1 (recv T1). 

t/sub       : type-exp G E T2
            <- type-exp G E T1
            <- sub-tp G T1 G T2.

%{ ------- well-formedness / typing for values and environment ----- }%

wf-val   : val -> tenv -> tpe -> type.
wf-env   : venv -> tenv -> type.

% wfv/c    : wf-val (cstv C) T <- typeof C T.
wfv/f    : wf-val (clos R R2 H) G (arrow T1 T2)
            <- wf-env H GC
            <- type-exp (tcons T1 GC) R T2
            <- wf-tp G (arrow T1 T2)
            <- sub-tp GC (arrow T1 T2) G (arrow T1 T2).

wfv/r    : wf-val (clos R R2 H) G (recv T)
            <- wf-val R2 G T.

wfv/t    : wf-val (clos R R2 H) G (rect T)
            <- wf-tp G T.
            % <- wf-val R2 G T.


wfv/sub  : wf-val V G T
            <- wf-val V G1 T1
            <- sub-tp G1 T1 G T.


wfe/n    : wf-env vnil tnil. 
wfe/c    : wf-env (vcons V H) (tcons T G) <- wf-val V G T <- wf-env H G.



%{ ------- type well-formedness extractors ----- }%

extract-wf2: type-exp G E1 T1 -> wf-tp G T1 -> type.
%mode extract-wf2 +WFE1 -WFE2.

- : extract-wf2 (t/var W L) W.
- : extract-wf2 (t/fun W _ _ TS) W. % <- extract-wf2 TS W <- extract-wf-arrow W W2.  
- : extract-wf2 (t/rect _ W _ _) (wf-tp/rect W).
- : extract-wf2 (t/recv _ _ TS _) (wf-tp/recv W) <- extract-wf2 TS W.
- : extract-wf2 (t/app TS1 (TS2: type-exp _ _ (arrow _ _))) W2 <- extract-wf2 TS2 (wf-tp/fun W2 W1).
- : extract-wf2 (t/sel TS) W <- extract-wf2 TS (wf-tp/recv W).
- : extract-wf2 (t/sub S TS) W2 <- extract-wf S W1 W2.

%worlds () (extract-wf2 _ _).
%total WFE (extract-wf2 WFE _).


extract-wf3: wf-val V G T1 -> wf-tp G T1 -> type.
%mode extract-wf3 +WFE1 -WFE2.

- : extract-wf3 (wfv/r TS) (wf-tp/recv W) <- extract-wf3 TS W.
- : extract-wf3 (wfv/t W) (wf-tp/rect W).
- : extract-wf3 (wfv/f ST WF TS WE) WF. % <- extend-wf-tp WF _ WF'.
- : extract-wf3 (wfv/sub S TS) W2 <- extract-wf S W1 W2.

%worlds () (extract-wf3 _ _).
%total WFE (extract-wf3 WFE _).



%{ ------- suptyping inversion: type-exp ----- }%


invert-var :
  %% Input
  type-exp G (var N) T ->
  %% Output
  tlookup G (var N) T1 ->
  sub-tp G T1 G T ->
  type.
%mode invert-var +WFE1 -WFE2 -SBT1.

-     : invert-var (t/var W L) L SB 
            % <- extract-wf2 (t/var L) W
            <- sub-tp-refl W SB.
-     : invert-var (t/sub SB1 TS) L SB2 
            <- invert-var TS L SB 
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-var _ _ _).
%total WFE (invert-var WFE _ _). 


invert-app : 
  %% Input
  type-exp G (app E1 E2) T ->
  %% Output
  type-exp G E1 (arrow T1 T2) ->
  type-exp G E2 T1 ->
  sub-tp G T2 G T -> 
  type.
%mode invert-app +WFE1 -WFE2 -WFE3 -SBT.

-     : invert-app (t/app TS1 TS) TS TS1 SB 
            <- extract-wf2 (t/app TS1 TS) W 
            <- sub-tp-refl W SB.
-     : invert-app (t/sub SB1 TS) L L2 SB2 
            <- invert-app TS L L2 SB 
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-app _ _ _ _).
%total WFE (invert-app WFE _ _ _).


invert-sel : 
  %% Input
  type-exp G (sel E1) T ->
  %% Output
  type-exp G E1 (recv T1) ->
  sub-tp G T1 G T -> 
  type.
%mode invert-sel +WFE1 -WFE3 -SBT.

-     : invert-sel (t/sel TS) TS SB 
            <- extract-wf2 (t/sel TS) W 
            <- sub-tp-refl W SB.
-     : invert-sel (t/sub SB1 TS) L2 SB2 
            <- invert-sel TS L2 SB 
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-sel _ _ _).
%total WFE (invert-sel WFE _ _).



% no intersection/union types yet, encode

sub-tp-cases: tenv -> tpe -> tenv -> tpe  ->  
        tenv -> tpe -> tenv -> tpe  ->  
        tenv -> tpe -> tenv -> tpe  ->  type.
case-f : sub-tp G1 T1 G2 T2 -> sub-tp-cases G1 T1 G2 T2 _ _ _ _ _ _ _ _.
case-r : sub-tp G1 T1 G2 T2 -> sub-tp-cases _ _ _ _ G1 T1 G2 T2 _ _ _ _.
case-t : sub-tp G1 T1 G2 T2 -> sub-tp-cases _ _ _ _ _ _ _ _ G1 T1 G2 T2.

cases-wfv: sub-tp-cases 
    G1A T0 G2 T 
    G1B T1 G2 T
    G1C T2 G2 T
    -> wf-val V G1A T0 
    -> wf-val V G1B T1
    -> wf-val V G1C T2
    -> wf-val V G2 T
    -> type.
%mode cases-wfv +C +W1 +W2 +W3 -W.

- : cases-wfv (case-f ST) WF WR WT (wfv/sub ST WF).
- : cases-wfv (case-r ST) WF WR WT (wfv/sub ST WR).
- : cases-wfv (case-t ST) WF WR WT (wfv/sub ST WT).

%worlds () (cases-wfv _ _ _ _ _).
%total WFE (cases-wfv WFE _ _ _ _). 

cases-sub-trans: sub-tp-cases 
    G1A T0 G2 T 
    G1B T1 G2 T
    G1C T2 G2 T
    -> sub-tp G2 T G3 TU
    -> sub-tp-cases
    G1A T0 G3 TU 
    G1B T1 G3 TU
    G1C T2 G3 TU
    -> type.
%mode cases-sub-trans +C +W1 -S.

- : cases-sub-trans (case-f S1) S2 (case-f S3) <- sub-tp-trans S1 S2 S3.
- : cases-sub-trans (case-r S1) S2 (case-r S3) <- sub-tp-trans S1 S2 S3.
- : cases-sub-trans (case-t S1) S2 (case-t S3) <- sub-tp-trans S1 S2 S3.

%worlds () (cases-sub-trans _ _ _).
%total WFE (cases-sub-trans WFE _ _). 


% we could even strengthen it slightly: tcons in output not strictly necessary

invert-fun :
  %% Input
  type-exp G (fun R R2 TX) T ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  type-exp G R2 T1 ->
  wf-tp G (arrow T3 T4) ->
  wf-tp G TX ->
  sub-tp-cases 
    G (arrow T3 T4) G T 
    G (recv T1) G T
    G (rect TX) G T
  ->
  type.
%mode invert-fun +WFE1 -WFE2 -WFE3 -WFE4 -WFE5 -SBT1.

-     : invert-fun (t/fun WF WX TSV TS) TS TSV WF WX (case-f SB) 
           % <- extract-wf2 (t/fun WF WX TSV TS) W
           <- sub-tp-refl WF SB.
           % <- extend-sub-tp1 SB _ SB1.
-     : invert-fun (t/recv WF WX TSV TS) TS TSV WF WX (case-r (sub-tp/recv SB))
           <- extract-wf2 TSV W
           <- sub-tp-refl W SB.
-     : invert-fun (t/rect WF WX TSV TS) TS TSV WF WX (case-t (sub-tp/rect SB)) 
           <- sub-tp-refl WX SB.
-     : invert-fun (t/sub SB1 TS) TSV L WF WX SB2 
           <- invert-fun TS TSV L WF WX SB 
           <- cases-sub-trans SB SB1 SB2.

%worlds () (invert-fun _ _ _ _ _ _).
%total WFE (invert-fun WFE _ _ _ _ _). 




%{ ------- suptyping inversion: wf-val ----- }%
 
% although we only call this from the outside when we
% know T = T1 -> T2, it seems like internally we need a 
% more general interface (b/c of wfv/sub)

invert-wf-fun-aux :
  %% Input
  wf-val (clos R R2 H) G1 T ->
  sub-tp G1 T G2 (arrow T1 T2) ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  wf-env H G ->
  sub-tp G (arrow T3 T4) G2 (arrow T1 T2) ->
  type.
%mode invert-wf-fun-aux +WFE1 +SBT -WFE2 -WFE3 -SBT1.

-     :  invert-wf-fun-aux ((wfv/f SB1 WF TS WE):(wf-val (clos R R2 H) _ _)) SB0
             TS WE SB
            % <- extract-wf3 ((wfv/f WF TS WE):(wf-val (clos R R2 H) _ _)) W 
            % <- sub-tp-refl WF SB1
            <- sub-tp-trans SB1 SB0 SB.


 -     : invert-wf-fun-aux (wfv/sub (SB1: sub-tp G1 TI G T) (TS: wf-val _ G1 TI)) 
                (SB0: sub-tp G T G2 (arrow T1 T2)) L L1 (SB)
            <- sub-tp-trans SB1 SB0 (SB1X: sub-tp G1 TI G2 (arrow T1 T2))
            <- invert-wf-fun-aux TS SB1X L L1 (SB: sub-tp _ (arrow T3 T4) G2 (arrow T1 T2)).

%worlds () (invert-wf-fun-aux _ _ _ _ _).
%total WFE (invert-wf-fun-aux WFE _ _ _ _). 


invert-wf-fun :
  %% Input
  wf-val (clos R R2 H) G1 (arrow T1 T2) ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  wf-env H G ->
  sub-tp G (arrow T3 T4) G1 (arrow T1 T2) ->
  type.
%mode invert-wf-fun +WFE1 -WFE2 -WFE3 -SBT1.

-     :  invert-wf-fun A B C D 
            <- extract-wf3 A W
            <- sub-tp-refl W SB
            <- invert-wf-fun-aux A SB B C D.

%worlds () (invert-wf-fun _ _ _ _).
%total WFE (invert-wf-fun WFE _ _ _). 





invert-wf-rec-aux :
  %% Input
  wf-val (clos R R2 H) G1 T ->
  sub-tp G1 T G2 (recv T2) ->
  %% Output
  wf-val R2 G T4 ->
  sub-tp G (recv T4) G2 (recv T2) ->
  type.
%mode invert-wf-rec-aux +WFE1 +SBT -WFE3 -SBT1.

-     :  invert-wf-rec-aux ((wfv/r TV):(wf-val (clos R R2 H) _ _)) SB0
            TV SB
           <- extract-wf3 TV W 
           <- sub-tp-refl (wf-tp/recv W) SB1
           <- sub-tp-trans SB1 SB0 SB.


 -     : invert-wf-rec-aux (wfv/sub (SB1: sub-tp G1 TI G T) (TS: wf-val _ G1 TI)) 
                (SB0: sub-tp G T G2 (recv T2)) TV SB
            <- sub-tp-trans SB1 SB0 (SB1X: sub-tp G1 TI G2 (recv T2))
            <- invert-wf-rec-aux TS SB1X TV (SB: sub-tp _ (recv T4) G2 (recv T2)).


%worlds () (invert-wf-rec-aux _ _ _ _).
%total WFE (invert-wf-rec-aux WFE _ _ _). 


invert-wf-rec :
  %% Input
  wf-val (clos R R2 H) G1 (recv T) ->
  %% Output
  wf-val R2 G T4 ->
  sub-tp G (recv T4) G1 (recv T) ->
  type.
%mode invert-wf-rec +WFE1 -WFE3 -SBT1.

-     :  invert-wf-rec A B C 
            <- extract-wf3 A W
            <- sub-tp-refl W SB
            <- invert-wf-rec-aux A SB B C.

%worlds () (invert-wf-rec _ _ _).
%total WFE (invert-wf-rec WFE _ _). 




%{ ------- type preservation ----- }%



extend-wfv: wf-val X3 X2 X1 -> {Z: tpe} wf-val X3 (tcons Z X2) X1 -> type.
%mode extend-wfv +A +B -C.

-     : extend-wfv (wfv/sub ST WV) T (wfv/sub ST1 WV1) 
            <- extend-wfv WV T WV1
            <- extend-sub-tp12 ST T ST1.
-     : extend-wfv (wfv/f ST WF TE WE) T (wfv/f ST1 WF1 TE WE)
            <- extend-wf-tp WF T WF1
            <- extend-sub-tp2 ST T ST1.
-     : extend-wfv (wfv/r WV) T (wfv/r WV1)
            <- extend-wfv WV T WV1.
-     : extend-wfv (wfv/t W) T (wfv/t W1)
            <- extend-wf-tp W T W1.

%worlds () (extend-wfv _ _ _).
%total A (extend-wfv A _ _).




% lookup safe

lookup-zero-safe: wf-env H G -> tlookup-zero G (var N2) T -> vlookup-zero H (var N1) V -> eq N1 N2 -> wf-val V G T -> type.
%mode lookup-zero-safe +A +B +C +D -E.

-      : lookup-zero-safe (wfe/c G V) tl/hit vl/hit eq/z V1 
         <- extend-wfv V _ V1.
-      : lookup-zero-safe (wfe/c G V) (tl/miss A) (vl/miss B) (eq/s E) Z1
         <- lookup-zero-safe G A B E Z
         <- extend-wfv Z _ Z1.

%worlds () (lookup-zero-safe _ _ _ _ _).
%total A (lookup-zero-safe A _ _ _ _). % induction on first arg

wf-env-size-eq: wf-env H G -> vsize H (var N1) -> tsize G (var N2) -> eq N1 N2 -> type.
%mode wf-env-size-eq +A +B +C -D.
-      : wf-env-size-eq wfe/n vf/n tf/n eq/z.
-      : wf-env-size-eq (wfe/c G _) (vf/c VS) (tf/c TS) (eq/s E) <- wf-env-size-eq G VS TS E.
%worlds () (wf-env-size-eq _ _ _ _).
%total A (wf-env-size-eq A _ _ _).

lookup-safe: wf-env H G -> tlookup G (var N) T -> vlookup H (var N) V -> wf-val V G T -> type.
%mode lookup-safe +A +B +C -D.

-      : lookup-safe WE (tl TL TA TS) (vl VL VA VS) WV
         <- eq-refl N EN
         <- wf-env-size-eq WE VS TS ES
         <- sub-eq EN ES VA TA EM
         <- lookup-zero-safe WE TL VL EM WV.

%worlds () (lookup-safe _ _ _ _).
%total A (lookup-safe A _ _ _).




%{
% eval primitive op safe

eval-op-safe : type-op OP T1 T2 T3 -> eval-op OP V1 V2 V3 -> wf-val V3 T3 -> type.
%mode eval-op-safe +LTE1 +LTE2 -LTE3.

-plus   : eval-op-safe t/plus (ev/v (e/plus _)) (wfv/c -/n).
-eqt    : eval-op-safe t/eq (ev/v (e/eqt _ _)) (wfv/c -/t).
-eqf    : eval-op-safe t/eq (ev/v (e/eqf _)) (wfv/c -/f).

%worlds () (eval-op-safe _ _ _).
%total A (eval-op-safe A _ _). % induction on first arg
}%



eval-safe: type-exp G E T -> wf-env H G -> eval-exp H E V -> wf-val V G T -> type.
%mode eval-safe +A +B +C -D.

% -      : eval-safe (t/cst T) _ (e/cst) (wfv/c T).  
% -      : eval-safe (t/prim T _ _) _ (e/prim V _ _) WF
%           <- eval-op-safe T V WF.

 -      : eval-safe ZT E (e/var L2) (wfv/sub ST V)
          <- invert-var ZT L ST
          <- lookup-safe E L L2 V.

 -      : eval-safe (ZT: type-exp G _ _) E (e/fun EX) W
          <- invert-fun ZT TS TSV WF WX CST
          <- eval-safe TSV E EX WV
          <- sub-tp-refl WF ST
          <- cases-wfv CST (wfv/f ST WF TS E) (wfv/r WV) (wfv/t WX) W.

-      : eval-safe ZT WE (e/sel EVX) (wfv/sub ST (wfv/sub ST1 WV1))
          <- invert-sel ZT TS ST
          <- eval-safe TS WE EVX WVX
          <- invert-wf-rec WVX WV1 (sub-tp/recv ST1).


-      : eval-safe 
            (ZT: type-exp _ _ T2')
            (WE: wf-env H0 G0)
            (e/app
              (EV3: eval-exp (vcons V2 HC0) R V3) 
              (EVX: eval-exp H0 EXP2 V2) 
              (EVF: eval-exp H0 EXP1 (clos R R2 HC0))
            )
            (wfv/sub ST (wfv/sub STR1 (Z: wf-val V3 (tcons T3 GC0) T4)))

          <- invert-app ZT
              (TF: type-exp G0 EXP1 (arrow T1 T2))
              (TX: type-exp G0 EXP2 T1)
              (ST: sub-tp _ T2 _ T2')

          <- eval-safe          % eval X
              (TX: type-exp _ _ T1)
              WE 
              EVX 
              (WVX: wf-val V2 G0 T1)

          <- eval-safe          % eval F
              TF
              WE 
              (EVF: eval-exp H0 EXP1 (clos R R2 HC0))
              (ZF: wf-val (clos R R2 HC0) G0 (arrow T1 T2))

          <- invert-wf-fun 
              ZF 
              (TR : type-exp (tcons T3 GC0) R T4)
              (WE1: wf-env HC0 GC0)
              ((sub-tp/fun 
                    (STR: sub-tp GC0 T4 G0 T2) 
                    (STA: sub-tp G0 T1 GC0 T3)): 
                sub-tp GC0 (arrow T3 T4) G0 (arrow T1 T2))

          <- eval-safe                 % eval F(X)
              (TR: type-exp (tcons T3 GC0) R T4)
              (wfe/c WE1 (wfv/sub STA WVX))
              (EV3: eval-exp (vcons V2 HC0) R V3) 
              (Z: wf-val V3 (tcons T3 GC0) T4)

          <- extend-sub-tp1 STR _ (STR1: sub-tp (tcons T3 GC0) T4 G0 T2).



%worlds () (eval-safe _ _ _ _).
%total C (eval-safe A _ C _). % induction on eval-exp

