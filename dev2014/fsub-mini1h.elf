% indirect transitivity: 
%   - admit trans axiom
%   - prove lemma: top-level uses of axiom can be 
%     pushed further down into derivation
%   - inversion lemmas remain straighforward


%%%%%  Natural numbers  %%%%%

nat : type.  %name nat N.

z : nat.
s : nat -> nat.

add : nat -> nat -> nat -> type. %name add A.
add/z: add z N N.
add/s: add (s N1) N2 (s N3) <- add N1 N2 N3.

add-reduces: {N1}{N2}{N3}add N1 N2 N3 -> type.
%mode add-reduces +N1 +N2 +N3 +A.
- : add-reduces _ _ _ (add/z).
- : add-reduces _ _ _ (add/s A) <- add-reduces _ _ _ A.
%worlds () (add-reduces _ _ _ _).
%total (A) (add-reduces A _ _ _).
%reduces N2 <= N3 (add-reduces N1 N2 N3 A).

add-inc: add A B C -> add A (s B) (s C) -> type.
%mode add-inc +E1 -E2.

- : add-inc add/z add/z.
- : add-inc (add/s A1) (add/s A2)
  <- add-inc A1 A2.

%worlds () (add-inc _ _).
%total {A} (add-inc A _).

%%%%%  Syntax  %%%%%

tp : type.  %name tp T.

dc: type. %name dc D.
dcs: type.

top     : tp.
sel     : nat -> nat -> tp.
bind    : nat -> dcs -> tp.

topt : type.
tnone : topt.
tsome : tp -> topt.

arrow   : tp -> tp -> dc.
rect    : topt -> tp -> dc.

dnil: dcs.
dcons: dc -> dcs -> dcs.

tenv: type. %name tenv G.
tnil: tenv.
tcons: dcs -> tenv -> tenv.


issel: tp -> nat -> type.
is/bind: issel (bind _ _) z.
is/top: issel top (s z).
is/sel: issel (sel _ _) (s z).

%mode issel +T -N.
%worlds () (issel _ _).
%total (A) (issel A _).

%{ ------- environments ----- }%

tlookup-zero: tenv -> nat -> dcs -> type.
tl/hit  : tlookup-zero (tcons V G) z V.
tl/miss : tlookup-zero (tcons V' G) (s N) V <- tlookup-zero G N V.

tsize : tenv -> nat -> type.
tf/n   : tsize tnil z.
tf/c   : tsize (tcons V G) (s N) <- tsize G N.

%worlds () (tsize _ _).

tlookup: tenv -> nat -> dcs -> type.
tl  : tlookup G N V
  <- tsize G S
  <- add (s N) M S
  <- tlookup-zero G M V.

% Partial ordering on environments

sub-env: tenv -> tenv -> type.

sub-env/refl: sub-env G G.
sub-env/ext: sub-env G1 (tcons Z G2) <- sub-env G1 G2.

sub-env-size: tenv -> nat -> tenv -> type.
ses: sub-env-size GN N G
      <- sub-env GN G
      <- tsize GN N.

%%%%%  Semantics  %%%%%

dlk : dcs -> nat -> dc -> type.
dlk/z : dlk (dcons D DS) z D.
dlk/s : dlk (dcons D DS) (s N) D' <- dlk DS N D'.

mode1: type.
notrans: mode1.
oktrans: mode1.


stp  : {I1:mode1} tenv -> tp -> tp -> type.
sdcs : {I1:mode1} tenv -> dcs -> dcs -> type.
sdc  : {I1:mode1} tenv -> dc -> dc -> type.
stpo : {I1:mode1} tenv -> topt -> tp -> type.
stpoo: {I1:mode1} tenv -> topt -> topt -> type.

stpo/n : stpo I0 G tnone U.
stpo/s : stpo I0 G (tsome S) U <- stp I0 G S U.
stpoo/nn : stpoo I0 G tnone tnone.
stpoo/ns : stpoo I0 G tnone (tsome U).
stpoo/ss : stpoo I0 G (tsome S) (tsome U) <- stp I0 G S U.

stp/top     : stp notrans    G _ top.

stp/sel1    : stp notrans    G (sel N X) T
           <- tlookup G N DS
           <- dlk DS X (rect _ U)
           <- stp oktrans    G U T
           .


stp/sel2    : stp notrans    G T (sel N X)
           <- tlookup G N DS
           <- dlk DS X (rect (tsome L) U)
           <- stp oktrans    G L U
           <- stp oktrans    G T L
           .

stp/bind    : stp notrans    G (bind N DS1) (bind N DS2)
           <- sub-env-size   GN N G
           <- sdcs oktrans   (tcons DS2 GN) DS2 DS2
           <- sdcs oktrans   (tcons DS1 GN) DS1 DS2
           .

stp/trans0   : stp oktrans   G T1 T2
            <- stp notrans   G T1 T2
            .

sdc/arrow   : sdc I0         G (arrow L1 U1) (arrow L2 U2)
           <- stp I0         G U1 U2
           <- stp I0         G L2 L1
            .

sdc/rect    : sdc I0         G (rect OL1 U1) (rect OL2 U2)
           <- stpo I0        G OL2 U2
           <- stpo I0        G OL1 U1
           <- stp I0         G U1 U2
           <- stpoo I0       G OL2 OL1
            .

sdcs/nil    : sdcs I0 G dnil dnil.
sdcs/ext    : sdcs I0 G (dcons D DS) dnil
           % <- sdcs I0 G (dcons D DS) (dcons D DS)
            .
sdcs/cons   : sdcs I0 G (dcons D1 DS1) (dcons D2 DS2)
           <- sdc I0 G D1 D2
           <- sdcs I0 G DS1 DS2.

stp/trans   : stp oktrans     G T1 T3
           <- stp oktrans     G T2 T3
           <- stp oktrans     G T1 T2
            .

% --------------- uniqueness lemmas ------------- %

eq-nat : nat -> nat -> type.
eq-nat/z : eq-nat z z.
eq-nat/s : eq-nat (s N1) (s N2)
   <- eq-nat N1 N2.

id-nat : nat -> nat -> type.
id-nat/refl : id-nat N N.

s-injective : id-nat N1 N2 -> id-nat (s N1) (s N2) -> type.
%mode s-injective +A -B.

s-injective/refl : s-injective id-nat/refl id-nat/refl.

%worlds () (s-injective _ _).
%total (A) (s-injective A _).

eq2id-nat : eq-nat N1 N2 -> id-nat N1 N2 -> type.
%mode eq2id-nat +A -B.

eq2id-nat/z : eq2id-nat eq-nat/z id-nat/refl.

eq2id-nat/s : eq2id-nat (eq-nat/s A) OUT
           <- eq2id-nat A B
           <- s-injective B OUT.

%worlds () (eq2id-nat _ _).
%total (A) (eq2id-nat A _).

id-tp : tp -> tp -> type.
id-tp/refl : id-tp D D.

id-topt : topt -> topt -> type.
id-topt/refl : id-topt D D.

id-dc : dc -> dc -> type.
id-dc/refl : id-dc D D.

id-dcs : dcs -> dcs -> type.
id-dcs/refl : id-dcs D D.

false: type.

dlk-unique : dlk DS X D -> dlk DS X D' -> id-dc D D' -> type.
%mode dlk-unique +A +B -EQ.

dlk-unique/z : dlk-unique dlk/z _ id-dc/refl.
dlk-unique/s : dlk-unique (dlk/s A) (dlk/s B) EQ
            <- dlk-unique A B EQ.

%worlds () (dlk-unique _ _ _).
%total (A) (dlk-unique A _ _).

eq-rect : id-dc (rect L U) (rect L' U') -> id-topt L L' -> id-tp U U' -> type.
%mode eq-rect +A -EQL -EQU.

eq-rect/refl : eq-rect id-dc/refl id-topt/refl id-tp/refl.

%worlds () (eq-rect _ _ _).
%total (A) (eq-rect A _ _).

eq-stp-u : id-tp U U' -> stp I G L U -> stp I G L U' -> type.
%mode eq-stp-u +EQU +B -C.

- : eq-stp-u id-tp/refl B B.

%worlds () (eq-stp-u _ _ _).
%total (A) (eq-stp-u A _ _).
%reduces C <= B (eq-stp-u _ B C).

tlookup-zero-unique: tlookup-zero G2 E T1 -> tlookup-zero G2 E T2 -> id-dcs T1 T2 -> type.
%mode tlookup-zero-unique +P1 +P2 -SBT.

- : tlookup-zero-unique tl/hit tl/hit id-dcs/refl.
- : tlookup-zero-unique (tl/miss A) (tl/miss B) X <- tlookup-zero-unique A B X.

%worlds () (tlookup-zero-unique _ _ _).
%total {T2} (tlookup-zero-unique T2 _ _).

tsize-unique-eq: tsize G2 N1 -> tsize G2 N2 -> eq-nat N1 N2 -> type.
%mode tsize-unique-eq +P1 +P2 -SBT.

- : tsize-unique-eq tf/n tf/n eq-nat/z.
- : tsize-unique-eq (tf/c A) (tf/c B) (eq-nat/s X) <- tsize-unique-eq A B X.

%worlds () (tsize-unique-eq _ _ _).
%total {T2} (tsize-unique-eq T2 _ _).

tsize-unique: tsize G2 N1 -> tsize G2 N2 -> id-nat N1 N2 -> type.
%mode tsize-unique +P1 +P2 -SBT.

- : tsize-unique A B ID
 <- tsize-unique-eq A B EQ
 <- eq2id-nat EQ ID.

%worlds () (tsize-unique _ _ _).
%total {T2} (tsize-unique T2 _ _).

% --------------- extension lemmas ------------- %

extend-wf-lkpz: tlookup-zero G N T -> {Z: dcs} tlookup-zero (tcons Z G) (s N) T -> type.
%mode extend-wf-lkpz +A +B -D.
- : extend-wf-lkpz tl/hit _ (tl/miss tl/hit).
- : extend-wf-lkpz (tl/miss A) _ (tl/miss B) <- extend-wf-lkpz A _ B.
%worlds () (extend-wf-lkpz _ _ _).
%total A (extend-wf-lkpz A _ _).

size-inc: tsize G N -> {Z: dcs} tsize (tcons Z G) (s N) -> type.
%mode size-inc +A +B -D.
- : size-inc tf/n T (tf/c tf/n).
- : size-inc (tf/c S) T (tf/c S') <- size-inc S _ S'.
%worlds () (size-inc _ _ _).
%total A (size-inc A _ _).

extend-wf-lkp: tlookup G N T -> {Z: dcs} tlookup (tcons Z G) N T -> type.
%mode extend-wf-lkp +A +B -C.
- : extend-wf-lkp (tl L A S) Z (tl L' A' S')
      <- size-inc S Z S'
      <- add-inc A A'
      <- extend-wf-lkpz L Z L'.
%worlds () (extend-wf-lkp _ _ _).
%total A (extend-wf-lkp A _ _).

extend-wf-lkp-mult: tlookup G N T -> sub-env G G1 -> tlookup G1 N T -> type.
%mode extend-wf-lkp-mult +A +B -C.
- : extend-wf-lkp-mult L sub-env/refl L.
- : extend-wf-lkp-mult L (sub-env/ext S) L2
    <- extend-wf-lkp-mult L S L1
    <- extend-wf-lkp L1 _ L2.
%worlds () (extend-wf-lkp-mult _ _ _).
%total A (extend-wf-lkp-mult _ A _).

extend-sub-env-size: sub-env-size GN N G -> {Z} sub-env-size GN N (tcons Z G) -> type.
%mode extend-sub-env-size +A +Z -B.

- : extend-sub-env-size (ses N E) Z (ses N (sub-env/ext E)).

%worlds () (extend-sub-env-size _ _ _).
%total A (extend-sub-env-size A _ _).

extend-stp: stp I1 G T1 T2 -> {T3} stp I1 (tcons T3 G) T1 T2 -> type.
%mode extend-stp +A +B -D.

-/top: extend-stp stp/top _ stp/top.

-/sel1: extend-stp (stp/sel1 BUT K E) Z (stp/sel1 BUT' K E')
     <- extend-wf-lkp E Z E'
     <- extend-stp BUT Z BUT'.

-/sel2: extend-stp (stp/sel2 BTL BLU K E) Z (stp/sel2 BTL' BLU' K E')
     <- extend-wf-lkp E Z E'
     <- extend-stp BLU Z BLU'
     <- extend-stp BTL Z BTL'.

-/bind: extend-stp (stp/bind BDS12 BDS22 SE) Z (stp/bind BDS12 BDS22 SE')
     <- extend-sub-env-size SE Z SE'
     .

-/trans0: extend-stp (stp/trans0 S) _ (stp/trans0 S') 
        <- extend-stp S _ S'.

-/trans: extend-stp (stp/trans S1 S2) _ (stp/trans S1' S2') 
        <- extend-stp S1 _ S1'
        <- extend-stp S2 _ S2'.

%worlds () (extend-stp _ _ _).
%total (A) (extend-stp A _ _).

% --------------- (notrans -> oktrans) ------------- %

to-oktrans: stp notrans G T1 T2 -> stp oktrans G T1 T2 -> type.
%mode to-oktrans +A -B.

- : to-oktrans S (stp/trans0 S).

%worlds () (to-oktrans _ _).
%total (A) (to-oktrans A _).


% --------------- transitivity (oktrans mode) ------------- %

ttrans* :
    stp oktrans G S Q ->
    stp oktrans G Q T ->
%%
    stp oktrans G S T ->
    type.

%mode ttrans*   +X1 +X2 -X3.

- : ttrans* S1 S2 (stp/trans S1 S2).

%worlds () (ttrans* _ _ _ ).
%total (Q1) (ttrans* Q1 _ _).

ttransoo* :
    stpoo oktrans G S Q ->
    stpoo oktrans G Q T ->
%%
    stpoo oktrans G S T ->
    type.

%mode ttransoo*   +X1 +X2 -X3.

- : ttransoo* stpoo/nn stpoo/nn stpoo/nn.
- : ttransoo* stpoo/nn stpoo/ns stpoo/ns.
- : ttransoo* stpoo/ns (stpoo/ss _) stpoo/ns.
- : ttransoo* (stpoo/ss A) (stpoo/ss B) (stpoo/ss C)
 <- ttrans* A B C.

%worlds () (ttransoo* _ _ _ ).
%total (Q1) (ttransoo* Q1 _ _).

ttransdc* :
    sdc oktrans G S Q ->
    sdc oktrans G Q T ->
%%
    sdc oktrans G S T ->
    type.

%mode ttransdc* +X1 +X2 -X3.

- : ttransdc*  (sdc/arrow L1 U1) (sdc/arrow L2 U2) (sdc/arrow L3 U3)
        <- ttrans* L2 L1 L3
        <- ttrans* U1 U2 U3.

- : ttransdc*  (sdc/rect OL1 U1 X1 X2) (sdc/rect OL2 U2 X2' X3) (sdc/rect OL3 U3 X1 X3)
        <- ttransoo* OL2 OL1 OL3
        <- ttrans* U1 U2 U3.

%worlds () (ttransdc* _ _ _).
%total (Q1') (ttransdc* Q1' _ _).

ttransdcs* :
    sdcs oktrans G S Q ->
    sdcs oktrans G Q T ->
%%
    sdcs oktrans G S T ->
    type.

%mode ttransdcs* +X1 +X2 -X3.

- : ttransdcs* sdcs/nil sdcs/nil sdcs/nil.

- : ttransdcs* sdcs/ext sdcs/nil sdcs/ext.

- : ttransdcs* (sdcs/cons _ _) sdcs/ext sdcs/ext.

- : ttransdcs* (sdcs/cons BDS1 BD1) (sdcs/cons BDS2 BD2) (sdcs/cons BDS3 BD3)
 <- ttransdc* BD1 BD2 BD3
 <- ttransdcs* BDS1 BDS2 BDS3.

%worlds () (ttransdcs* _ _ _).
%total (Q1') (ttransdcs* Q1' _ _).

% --------------- narrowing (oktrans mode) ------------- %

inv-sdcs :
    sdcs oktrans G DS' DS ->
    (dlk DS X DX) ->
%%
    (dlk DS' X DX') ->
    sdc oktrans G DX' DX ->
    type.

%mode inv-sdcs +A +B -C -D.

- : inv-sdcs (sdcs/cons BDS BD) dlk/z dlk/z BD.
- : inv-sdcs (sdcs/cons BDS BD) (dlk/s K) (dlk/s K') BD'
 <- inv-sdcs BDS K K' BD'.

%worlds () (inv-sdcs _ _ _ _).
%total (A) (inv-sdcs A _ _ _).

tsize-swap : tsize (tcons Z G) N -> {Z'} tsize (tcons Z' G) N -> type.
%mode tsize-swap +A +Z -B.

-/n : tsize-swap (tf/c A) Z (tf/c A).

%worlds () (tsize-swap _ _ _).
%total (A) (tsize-swap A _ _).

narrow* : 
    stp oktrans (tcons Q G) M N ->
    sdcs oktrans (tcons P G) P Q ->
%%
    stp oktrans (tcons P G) M N ->
    type.

%mode narrow*  +X1 +X2 -X3.

-top    : narrow* (stp/trans0 stp/top) _ (stp/trans0 stp/top).


-trans  : narrow* (stp/trans D1 D2) Dsub (stp/trans D1' D2')
       <- narrow* D1 Dsub D1'
       <- narrow* D2 Dsub D2'.

-var1   : narrow* (stp/trans0 (stp/sel1 BU K (tl (tl/miss E0) A N))) BDS (stp/trans0 (stp/sel1 BU' K (tl (tl/miss E0) A N')))
       <- tsize-swap N _ N'
       <- narrow* BU BDS BU'.

-var1hit: narrow* (stp/trans0 (stp/sel1 BU K (tl tl/hit A N))) BDS (stp/trans0 (stp/sel1 BU' K' (tl tl/hit A N')))
       <- tsize-swap N _ N'
       <- inv-sdcs BDS K K' (sdc/rect _ BUK _ _)
       <- narrow* BU BDS BUN
       <- ttrans* BUK BUN BU'.

%{
-var2   : narrow* (stp/trans0 (stp/sel2 BS BSU K)) BDS (stp/trans0 (stp/sel2 BS'' BSU' K'))
       <- narrow* BS BDS BSN
       <- narrow* BSU BDS BSUN
       <- inv-sdcs BDS K K' (sdc/rect (stpoo/ss BS') _ (stpo/s BSU') _)
       <- ttrans* BSN BS' BS''.

-bind   : narrow* (stp/trans0 (stp/bind BD12 BD22)) BDS (stp/trans0 (stp/bind BD12 BD22)).
}%

%worlds () (narrow* _ _ _).
%total (A) (narrow* A _ _).

narrowo* :
    stpo oktrans (tcons Q tnil) M N ->
    sdcs oktrans (tcons P tnil) P Q ->
%%
    stpo oktrans (tcons P tnil) M N ->
    type.

%mode narrowo*  +X1 +X2 -X3.

-n : narrowo* stpo/n BDS stpo/n.
-s : narrowo* (stpo/s BU) BDS (stpo/s BU')
  <- narrow* BU BDS BU'.

%worlds () (narrowo* _ _ _).
%total (A) (narrowo* A _ _).

narrowoo* :
    stpoo oktrans (tcons Q tnil) M N ->
    sdcs oktrans (tcons P tnil) P Q ->
%%
    stpoo oktrans (tcons P tnil) M N ->
    type.

%mode narrowoo*  +X1 +X2 -X3.

-nn : narrowoo* stpoo/nn BDS stpoo/nn.
-ns : narrowoo* stpoo/ns BDS stpoo/ns.
-ss : narrowoo* (stpoo/ss BU) BDS (stpoo/ss BU')
  <- narrow* BU BDS BU'.

%worlds () (narrowoo* _ _ _).
%total (A) (narrowoo* A _ _).

narrowdc* :
    sdc oktrans (tcons Q tnil) M N ->
    sdcs oktrans (tcons P tnil) P Q ->
%%
    sdc oktrans (tcons P tnil) M N ->
    type.

%mode narrowdc*  +X1 +X2 -X3.

-rect : narrowdc* (sdc/rect A B C D) S (sdc/rect A' B' C' D')
         <- narrowoo* A S A'
         <- narrow* B S B'
         <- narrowo* C S C'
         <- narrowo* D S D'
         .

-arrow : narrowdc* (sdc/arrow A B) S (sdc/arrow A' B')
         <- narrow* A S A'
         <- narrow* B S B'
         .

%worlds () (narrowdc* _ _ _).
%total (A) (narrowdc* A _ _).

narrowdcs* :
    sdcs oktrans (tcons Q tnil) M N ->
    sdcs oktrans (tcons P tnil) P Q ->
%%
    sdcs oktrans (tcons P tnil) M N ->
    type.

%mode narrowdcs*  +X1 +X2 -X3.

-nil : narrowdcs* sdcs/nil BDS sdcs/nil.
-ext : narrowdcs* sdcs/ext BDS sdcs/ext
    % <- narrowdcs* A BDS A'
    .
-cons: narrowdcs* (sdcs/cons A BD) BDS (sdcs/cons A' BD')
    <- narrowdc* BD BDS BD'
    <- narrowdcs* A BDS A'.

%worlds () (narrowdcs* _ _ _).
%total (A) (narrowdcs* A _ _).

% --------------- transitivity (notrans mode, exlude middle p.L ) ------------- %


trans* :  
    issel Q z ->
    stp notrans G S Q ->
    stp notrans G Q T ->
%%
    stp notrans G S T ->
    type.

%mode trans*   +I +X1 +X2 -X3.

-top    : trans* _ D stp/top stp/top.


-var    : trans* _ (stp/sel1 U2 K) D (stp/sel1 U2' K)
        <- to-oktrans D D'
        <- ttrans* U2 D' U2'.

-var2   : trans* _ D (stp/sel2 L2 U2 K) (stp/sel2 L2' U2 K)
        <- to-oktrans D D'
        <- ttrans* D' L2 L2'.

-tbind  : trans* _ (stp/bind D12 D22) (stp/bind D23 D33) (stp/bind D13 D33)
       <- narrowdcs* D23 D12 D23'
       <- ttransdcs* D12 D23' D13.

%worlds () (trans* _ _ _ _).
%total (A) (trans* _ A _ _).




% --------------- linearize trans nodes, remove paths ------------- %


% linked-list data structure so we can traverse left -> right
% (is this necessary?)

stpl  : nat -> tenv -> tp -> tp -> type.

stp/transl   : stpl (s N)     G T1 T3
            <- stpl N         G T2 T3
            <- stp notrans    G T1 T2
            <- issel T2 z
            <- issel T1 z
             .

stp/lltop2   : stpl (s z)     (tcons DS tnil) L (sel z X)
            <- dlk DS Y (rect (tsome top) U)
            <- stp oktrans    (tcons DS tnil) top U
            <- stpl z         (tcons DS tnil) (sel z Y) (sel z X)
            .

stp/lltopx   : stpl (s z)     G _ top.

stp/transe   : stpl z         G T1 T1.

stp/llsel2    : stpl z        (tcons DS tnil) L (sel z X)
             <- dlk DS Y (rect (tsome L) U)
             <- stp oktrans   (tcons DS tnil) L U
             <- stpl z        (tcons DS tnil) (sel z Y) (sel z X)
             .

stp/llsel1   : stpl (s N)     (tcons DS tnil) (sel z X) T
            <- dlk DS X (rect L U)
            <- stpl (s N)     (tcons DS tnil) U T
             .


% linearize a derivation that uses transitivity

utrans0* : 
  stp oktrans  G T1 T2 -> 
  stpl _ G T2 T3 -> 
  stpl (s _) G T1 T3 -> 
  type.

%mode utrans0*  +S1 +S2 -S12.

- : utrans0* (stp/trans0 (stp/top)) (stp/llsel2 D0 D K) (stp/lltop2 D0 D K).
- : utrans0* (stp/trans0 (stp/top)) stp/transe stp/lltopx.

- : utrans0* (stp/trans0 _) (stp/lltopx) (stp/lltopx).
- : utrans0* (stp/trans0 _) (stp/lltop2 D0 D K) (stp/lltop2 D0 D K).


- : utrans0* (stp/trans0 (stp/sel1 D K)) TL (stp/llsel1 DL K)
      <- utrans0* D TL DL.

- : utrans0* (stp/trans0 (stp/bind A B))    TL (stp/transl is/bind is/bind (stp/bind A B) TL).

- : utrans0* (stp/trans0 (stp/sel2 D1 D3 K)) (stp/llsel1 DL K') DL''
      <- dlk-unique K K' EQ
      <- eq-rect EQ EQL EQU
      <- eq-stp-u EQU D3 D3'
      <- utrans0* D3' DL DL'
      <- utrans0* D1 DL' DL''.

- : utrans0* (stp/trans0 (stp/sel2 D1 D3 K)) stp/transe DL'
      <- utrans0* D1 (stp/llsel2 stp/transe D3 K) DL'.

- : utrans0* (stp/trans0 (stp/sel2 BTL BLU K)) (stp/llsel2 D0 BLU' K') BTL''
      <- utrans0* BTL (stp/llsel2 (stp/llsel2 D0 BLU' K') BLU K) BTL''
      . % NOTE(namin): BTL' != BTL'' because selection label differs

- : utrans0* (stp/trans S1 S2) TL TL''
  <- utrans0* S2 TL TL'
  <- utrans0* S1 TL' TL''.


%worlds ()(utrans0* _ _ _).
%total {A} (utrans0* A _ _).


utrans0 : 
  stp oktrans  G T1 T2 -> 
  stpl (s _) G T1 T2 -> 
  type.

%mode utrans0  +S2 -S12.

- : utrans0 S1 S1' <- utrans0* S1 stp/transe S1'.

%worlds ()(utrans0 _ _).
%total {A} (utrans0 A _).




% given linear version, remove top-level trans nodes

utrans1s* : 
  stp notrans G T1 (sel z N2) ->
  stpl z G (sel z N2) (sel z N3) -> 
  stp notrans G T1 (sel z N3) ->
  type.
%mode utrans1s* +A +B -C.

- : utrans1s* S1 stp/transe S1.

- : utrans1s* S1 (stp/llsel2 D0 D E) DX
      <- utrans1s* (stp/sel2 (stp/trans0 S1) D E) D0 DX.

%worlds () (utrans1s* _ _ _).
%total {B} (utrans1s* A B C).

utrans1* : 
  issel T2 z ->
  stp notrans G T1 T2 ->
  stpl _ G T2 T3 -> 
  stp notrans G T1 T3 ->
  type.
%mode utrans1* +I2 +A +B -C.

- : utrans1* I2 S1 (stp/transl I1' I2' S2 TL) S13 
        <- trans* I1' S1 S2 S12
        <- utrans1* I2' S12 TL S13.

- : utrans1* I2 S1 stp/transe S1.

- : utrans1* I2 S1 stp/lltopx stp/top.

 - : utrans1* I2 S1 (stp/lltop2 D0 D E) DX 
      <- utrans1s* (stp/sel2 (stp/trans0 stp/top) D E) D0 DX.

- : utrans1* I2 S1 (stp/llsel2 D0 D E) DX % (stp/sel2 (stp/trans0 S1) D E)
      <- utrans1s* (stp/sel2 (stp/trans0 S1) D E) D0 DX.


%worlds () (utrans1* _ _ _ _).
%total {B} (utrans1* _ A B C).



utrans1 : 
  stpl (s _) G T1 T3 -> 
  stp notrans G T1 T3 ->
  type.
%mode utrans1 +A -B.

- : utrans1 (stp/transl I1' I2' S2 TL) S13 
        <- utrans1* I2' S2 TL S13.

- : utrans1 (stp/llsel1 D E) (stp/sel1 (stp/trans0 D') E)
        <- utrans1 D D'.

- : utrans1 stp/lltopx stp/top.

- : utrans1 (stp/lltop2 D0 D E) DX
      <- utrans1s* (stp/sel2 (stp/trans0 stp/top) D E) D0 DX.

%worlds () (utrans1 _ _).
%total (A) (utrans1 A B).


% now put it together for our main lemma ...


% --------------- inversion lemma / remove top-level transitivity ------------- %

invert-trans : 
  stp oktrans G T1 T2 ->
  stp notrans G T1 T2 ->
  type.
%mode invert-trans +A -C.

- : invert-trans S12 S12'
        <- utrans0 S12 SL12
        <- utrans1 SL12 S12'.

%worlds () (invert-trans _ _).
%total (A) (invert-trans A B).

% example inversion lemma

invert-bind :
  stp oktrans G (bind z DS1) (bind z DS2) ->
%%
  sdcs oktrans (tcons DS1 tnil) DS1 DS2 ->
  type.
%mode invert-bind +A -B.

- : invert-bind A B <- invert-trans A (stp/bind B _).

%worlds () (invert-bind _ _).
%total (A) (invert-bind A _).

invert-fun :
  stp oktrans G (bind z DS1) (bind z DS2) ->
  dlk DS2 X (arrow S2 U2) ->
%%
  dlk DS1 X (arrow S1 U1) ->
  stp oktrans (tcons DS1 tnil) S2 S1 ->
  stp oktrans (tcons DS1 tnil) U1 U2 ->
  type.
%mode invert-fun +A +B -C -D -E.

- : invert-fun B K K' BS' BU'
 <- invert-bind B BD
 <- inv-sdcs BD K K' (sdc/arrow BS' BU').

%worlds () (invert-fun _ _ _ _ _).
%total (A) (invert-fun A _ _ _ _).