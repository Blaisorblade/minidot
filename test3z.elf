% echo "loadFile test3.elf" |/Volumes/Twelf\ for\ OS\ X\ \(Intel\)/Twelf/bin/twelf-server

% STLC: big step preservation
% - add store
% - add subtyping
% - add type members
% - add value members
% - add paths


%%%%%% WIP: environments as key/val pairs %%%%%%



% arithmetic


boolx: type.
t: boolx.
f: boolx.

nat: type.
z: nat.
s: nat -> nat.

add : nat -> nat -> nat -> type.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.

%mode add +N1 +N2 -N3.

lte : nat -> nat -> type.
lte/z : lte z N.
lte/s : lte (s N1) (s N2) 
   <- lte N1 N2.

%mode lte +N1 +N2.


ne : nat -> nat -> type.
ne/z : ne z (s N).
ne/z : ne (s N) z.
ne/s : ne (s N1) (s N2) 
   <- ne N1 N2.

%mode ne +N1 +N2.
%worlds () (ne _ _).
% %unique ne +N1 +N2.


eq : nat -> nat -> boolx -> type.
eq/z : eq z z t.
eq/zs : eq z (s N) f.
eq/sz : eq (s N) z f.
eq/s : eq (s N1) (s N2) R
   <- eq N1 N2 R.

%mode eq +N1 +N2 -R.
%worlds () (eq _ _ _).
%total (A) (eq A _ _).
% %unique eq +N1 +N2 -1R.

eq-refl: {N} eq N N t -> type.
%mode eq-refl +N -R.
eq-refl/z: eq-refl z eq/z.
eq-refl/s: eq-refl (s N) (eq/s E) <- eq-refl N E.
%worlds () (eq-refl _ _).
%total (A) (eq-refl A _).
% %unique eq-refl +N1 -1R.

eq-trans: eq N1 N2 B -> eq N2 N3 t -> eq N1 N3 B -> type.
%mode eq-trans +E1 +E2 -E3.
eq-trans/z1: eq-trans eq/z E2 E2.
eq-trans/z1: eq-trans eq/zs (eq/s E2) eq/zs.
eq-trans/z1: eq-trans eq/sz eq/z eq/sz.
eq-trans/s: eq-trans (eq/s E1) (eq/s E2) (eq/s E3) <- eq-trans E1 E2 E3.
%worlds () (eq-trans _ _ _).
%total (A) (eq-trans A _ _).
% %unique eq-trans +E1 +E2 -E3.

eq-symm: eq N1 N2 B -> eq N2 N1 B -> type.
%mode eq-symm +E1 -E2.
eq-symm/z1: eq-symm eq/z eq/z.
eq-symm/z1: eq-symm eq/zs eq/sz.
eq-symm/z1: eq-symm eq/sz eq/zs.
eq-symm/s:  eq-symm (eq/s E1) (eq/s E2) <- eq-symm E1 E2.
%worlds () (eq-symm _ _).
%total (A) (eq-symm A _).
% %unique eq-symm +E1 -E2.

%query 0 * lte (s (s z)) (s z).
%query 1 * lte (s (s z)) (s (s z)).

%{ ------- language ----- }%

% sorts
cst: type.
op: type.

exp: type.
% stm: type.

tpe: type.
val: type.

venv: type.
tenv: type.


% constants
ncst: nat -> cst.
fcst: cst.
tcst: cst.

% operators
plus  : op.
equal : op.

% expressions
cste: cst -> exp.
var: nat -> exp.
prm: op -> exp -> exp -> exp.
fun: nat -> exp -> tpe -> exp.
app: exp -> exp -> exp.

% types
int  : tpe.
bool : tpe.
top  : tpe.
bot  : tpe.
arrow: tpe -> tpe -> tpe.

tsel: nat -> tpe. %%% adding tsel to have meaningful wf-tp


% values
cstv: cst -> val.
clos: nat -> exp -> venv -> val.

% environments

vfresh : nat -> venv -> type.
tfresh : nat -> tenv -> type.

vnil  : venv.
vcons : {N:nat} {V:val} {G:venv} vfresh N G -> venv.
tnil  : tenv.
tcons : {N:nat} {T:tpe} {G:tenv} tfresh N G -> tenv.

vfresh/nil  : vfresh N vnil.
vfresh/cons : vfresh N2 (vcons N1 V G F) <- vfresh N2 G <- eq N2 N1 f.

tfresh/nil  : tfresh N tnil.
tfresh/cons : tfresh N2 (tcons N1 T G F) <- tfresh N2 G <- eq N2 N1 f.




%{ ------- eval-op / primitives ----- }%

% typeof

typeof     : cst -> tpe -> type.
-/n        : typeof (ncst N) int.
-/t        : typeof (tcst) bool.
-/f        : typeof (fcst) bool.

%mode typeof *A *B.

% eval-op

eval-cst-op : op -> cst -> cst -> cst -> type.
e/plus     : eval-cst-op plus (ncst N1) (ncst N2) (ncst N3) <- add N1 N2 N3.
e/eqt      : eval-cst-op equal (ncst N1) (ncst N2) (tcst) <- lte N1 N2 <- lte N2 N1.
e/eqf      : eval-cst-op equal (ncst N1) (ncst N2) (fcst) <- ne N1 N2.

eval-op    : op -> val -> val -> val -> type.
ev/v       : eval-op O (cstv C1) (cstv C2) (cstv C3) <- eval-cst-op O C1 C2 C3.

%mode eval-cst-op +O +V1 +V2 -V3.
%mode eval-op +O +V1 +V2 -V3.


% type-op

type-op    : op -> tpe -> tpe -> tpe -> type.
t/plus     : type-op plus int int int.
t/eq       : type-op equal int int bool.


% eval-cst-op/safe

eval-cst-op-safe : type-op OP T1 T2 T3 -> eval-cst-op OP C1 C2 C3 -> typeof C3 T3 -> type.
%mode eval-cst-op-safe +LTE1 +LTE2 -LTE3.

-plus   : eval-cst-op-safe t/plus (e/plus _) -/n.
-eqt    : eval-cst-op-safe t/eq (e/eqt _ _) -/t.
-eqf    : eval-cst-op-safe t/eq (e/eqf _) -/f.

%worlds () (eval-cst-op-safe _ _ _).
%total LTE1 (eval-cst-op-safe LTE1 _ _). % induction on first arg (not used here)



%{ ------- environments / NEW ----- }%

vopt: type.
vsome: val -> vopt.
vnone: vopt.

vget: vopt -> val -> type.
vget/s: vget (vsome V) V.

vselect: boolx -> vopt -> vopt -> vopt -> type.
vs/t: vselect t V1 V2 V1.
vs/f: vselect f V1 V2 V2.

%mode vselect +G +E +E -T.
%worlds () (vselect _ _ _ _).
%total (A) (vselect A _ _ _).
% %unique vselect +G +V +V -1V.

topt: type.
tsome: tpe -> topt.
tnone: topt.

tget: topt -> tpe -> type.
tget/s: tget (tsome V) V.

tselect: boolx -> topt -> topt -> topt -> type.
ts/t: tselect t V1 V2 V1.
ts/f: tselect f V1 V2 V2.

%mode tselect +G +E +E -T.
%worlds () (tselect _ _ _ _).
%total (A) (tselect A _ _ _).
% %unique tselect +G +V +V -1V.

vlookup : venv -> nat -> vopt -> type.
vl/fail : vlookup vnil N vnone.
vl/hit  : vlookup (vcons N1 V1 G F) N2 V3 <- eq N1 N2 C <- vlookup G N2 V2 <- vselect C (vsome V1) V2 V3.
% vl/hit  : vlookup (vcons N1 V1 G F) N2 (vsome V1) <- eq N1 N2 t.
% vl/miss  : vlookup (vcons N1 V1 G F) N2 V3 <- eq N1 N2 f <- vlookup G N2 V3.

tlookup: tenv -> nat -> topt -> type.
tl/fail : tlookup tnil N tnone.
tl/hit  : tlookup (tcons N1 V1 G F) N2 V3 <- eq N1 N2 C <- tlookup G N2 V2 <- tselect C (tsome V1) V2 V3.
% tl/hit  : tlookup (tcons N1 V1 G F) N2 (tsome V1) <- eq N1 N2 t.
% tl/miss : tlookup (tcons N1 V1 G F) N2 V3 <- eq N1 N2 f <- tlookup G N2 V3.


%mode vlookup +G +E -V.
%mode tlookup +G +E -T.

%worlds () (vlookup _ _ _).
%worlds () (tlookup _ _ _).
%total (A) (vlookup A _ _).
%total (A) (tlookup A _ _).
% %unique vlookup +G +E -1V.
% %unique tlookup +G +E -1T.



% vbind : venv -> val -> exp -> venv -> type.
% vl/n  : vbind vnil V (var z) (vcons V vnil).
% vl/c  : vbind (vcons V G1) V2 (var (s N)) (vcons V2 (vcons V G1)) <- vbind G1 V (var N) _.
%
% vfresh : venv -> exp -> type.
% vf/n   : vfresh vnil (var z).
% vf/c   : vfresh (vcons _ G) (var (s N)) <- vfresh G (var N).


% tbind : tenv -> tpe -> exp -> tenv -> type.
% tl/n  : tbind tnil V (var z) (tcons V tnil).
% tl/c  : tbind (tcons V G1) V2 (var (s N)) (tcons V2 (tcons V G1)) <- tbind G1 V (var N) _.
% 
% tfresh : tenv -> exp -> type.
% tf/n   : tfresh tnil (var z).
% tf/c   : tfresh (tcons _ G) (var (s N)) <- tfresh G (var N).


% %mode vbind +G +V -E -G2.
% %mode tbind +G +V -E -G2.

% %mode vfresh +G -X.
% %mode tfresh +G -X.



sub-env: tenv -> tenv -> type.

sub-env/nil  : sub-env tnil G.
sub-env/cons : sub-env (tcons N T G F) G2 
                  <- sub-env G G2 
                  <- tlookup G2 N (tsome T).


lookup-isnt-fresh: tfresh N1 G -> tlookup G N2 (tsome T) -> eq N1 N2 f -> type.
%mode lookup-isnt-fresh +N +T -C.

- : lookup-isnt-fresh (tfresh/cons E1 F) (tl/hit ts/t L E2) E3
      <- eq-trans E1 E2 E3.
- : lookup-isnt-fresh (tfresh/cons _ F) (tl/hit _ L _) E 
      <- lookup-isnt-fresh F L E.

%worlds () (lookup-isnt-fresh _ _ _).
%total (A) (lookup-isnt-fresh A _ _).


fresh-cant-lookup: tfresh N G -> tlookup G N tnone -> type.
%mode fresh-cant-lookup +N -C.

- : fresh-cant-lookup tfresh/nil tl/fail.
- : fresh-cant-lookup (tfresh/cons E1 F) (tl/hit ts/f L E2)  
      <- fresh-cant-lookup F L       
      <- eq-symm E1 E2.

%worlds () (fresh-cant-lookup _ _).
%total (A) (fresh-cant-lookup A _).



sub-env-extend: {N}{T}{F} sub-env G1 G2 -> sub-env G1 (tcons N T G2 F) -> type.
%mode sub-env-extend +N +T +F +G -C.

- : sub-env-extend N T F sub-env/nil sub-env/nil.
- : sub-env-extend N T F (sub-env/cons L S) (sub-env/cons (tl/hit ts/f L E) S2) 
      <- sub-env-extend N T F S S2 <- lookup-isnt-fresh F L E.

%worlds () (sub-env-extend _ _ _ _ _).
%total (A) (sub-env-extend _ _ _ A _).


sub-env-refl: {G} sub-env G G -> type.
%mode sub-env-refl +G -C.

- : sub-env-refl tnil sub-env/nil.
- : sub-env-refl (tcons N T G F) (sub-env/cons (tl/hit ts/t L E) Z2) 
      <- sub-env-refl G Z
      <- sub-env-extend _ _ _ Z Z2 
      <- fresh-cant-lookup F L
      <- eq-refl N E.

%worlds () (sub-env-refl _ _).
%total (A) (sub-env-refl A _).



lookup-same: tlookup G N1 T -> eq N1 N2 t -> tlookup G N2 T -> type.
%mode lookup-same +A +B -C.

- : lookup-same tl/fail E tl/fail.
- : lookup-same (tl/hit S L1 E1) E2 (tl/hit S L3 E3) 
      <- eq-trans E1 E2 E3 
      <- lookup-same L1 E2 L3.


%worlds () (lookup-same _ _ _).
%total (A) (lookup-same A _ _).

fresh-restrict: tfresh N G2 -> sub-env G1 G2 -> tfresh N G1 -> type.
%mode fresh-restrict +A +B -C.

- : fresh-restrict _ sub-env/nil tfresh/nil.
- : fresh-restrict (tfresh/cons E F1) (sub-env/cons L (S: sub-env G1 (tcons _ _ G2 _))) (tfresh/cons E F2)
      <- fresh-restrict (tfresh/cons E F1) S F2.

%%% FIXME: need to construct {E':eq X1 X5 f}
% - : fresh-restrict (tfresh/cons E F1) (sub-env/cons L (S: sub-env G1 (tcons _ _ G2 _))) (tfresh/cons E' F2) ...

%worlds () (fresh-restrict _ _ _).
%trustme
%total (A) (fresh-restrict _ A _).


lookup-extend: tlookup G1 N (tsome T) -> sub-env G1 G2 -> tlookup G2 N (tsome T) -> type.
%mode lookup-extend +A +B -C.

-: lookup-extend (tl/hit ts/f L1 _) (sub-env/cons L S) L2 <- lookup-extend L1 S L2.
-: lookup-extend (tl/hit ts/t L1 X8) (sub-env/cons L S) L3 <- lookup-same L X8 L3.

%worlds () (lookup-extend _ _ _).
%total (A) (lookup-extend _ A _).



sub-env-trans: sub-env G1 G2 -> sub-env G2 G3 -> sub-env G1 G3 -> type.
%mode sub-env-trans +A +B -C.

- : sub-env-trans sub-env/nil S sub-env/nil.
- : sub-env-trans S sub-env/nil S.
- : sub-env-trans (sub-env/cons L1 S1) S2 (sub-env/cons L3 S3)
      <- sub-env-trans S1 S2 S3
      <- lookup-extend L1 S2 L3.


%worlds () (sub-env-trans _ _ _).
%total (A) (sub-env-trans A _ _).



eq-deriv: {N1} {N2} {C} eq N1 N2 C -> type.
%mode eq-deriv +N1 +N2 -C -EQ.
- : eq-deriv z z t eq/z.
- : eq-deriv z (s N) f eq/zs.
- : eq-deriv (s N) z f eq/sz.
- : eq-deriv (s N1) (s N2) R (eq/s E) <- eq-deriv N1 N2 R E.
%worlds () (eq-deriv _ _ _ _).
%total (A) (eq-deriv A _ _ _).

select-deriv: {C} {V1} {V2} {V3} tselect C V1 V2 V3 -> type.
%mode select-deriv +C +V1 +V2 -V3 -SEL.
- : select-deriv t V1 V2 V1 ts/t.
- : select-deriv f V1 V2 V2 ts/f.
%worlds () (select-deriv _ _ _ _ _).
%total (A) (select-deriv A _ _ _ _).

lookup-deriv: {G} {N} {T} tlookup G N T -> type.
%mode lookup-deriv +G +N -T -TL.
- : lookup-deriv tnil N tnone tl/fail.
- : lookup-deriv (tcons N1 V1 G F) N2 T (tl/hit S TL E)
     <- eq-deriv N1 N2 C E
     <- lookup-deriv G N2 T2 TL
     <- select-deriv C (tsome V1) T2 T S.
%worlds () (lookup-deriv _ _ _ _).
%total (G) (lookup-deriv G _ _ _).




same: topt -> topt -> type.
ident: same T T.

same-refl: same T T' -> same T' T -> type.
%mode same-refl +A -B.
- : same-refl ident ident.
%worlds () (same-refl _ _).
%total (A) (same-refl A _).


lookup-same2: tlookup G N1 T1 -> same T2 T1 -> tlookup G N1 T2 -> type.
%mode lookup-same2 +A +B -C.
- : lookup-same2 tl/fail X tl/fail.
- : lookup-same2 (tl/hit ts/t L E) ident (tl/hit ts/t L E).
- : lookup-same2 (tl/hit ts/f L1 E) X (tl/hit ts/f L3 E) 
      <- lookup-same2 L1 X L3.
%worlds () (lookup-same2 _ _ _).
%total (A) (lookup-same2 A _ _).

id-boolx: boolx -> boolx -> type.
id-boolx/refl: id-boolx A A.


eq-unique: eq N1 N2 C -> eq N1 N2 C' -> id-boolx C C' -> type.
%mode eq-unique +A +B -ID.
- : eq-unique eq/z eq/z id-boolx/refl.
- : eq-unique eq/zs eq/zs id-boolx/refl.
- : eq-unique eq/sz eq/sz id-boolx/refl.
- : eq-unique (eq/s E1) (eq/s E2) X
     <- eq-unique E1 E2 X.
%worlds () (eq-unique _ _ _).
%total (A) (eq-unique A _ _).

tselect-unique: id-boolx B B' -> same V2 V2' -> tselect B V1 V2 V3 -> tselect B' V1 V2' V3' -> same V3 V3' -> type.
%mode tselect-unique +X +Y +A +B -ID.
- : tselect-unique X Y ts/t ts/t ident.
- : tselect-unique X Y ts/f ts/f ident.
%worlds () (tselect-unique _ _  _ _ _).
%total (A) (tselect-unique _ _ A _ _).

tlookup-unique: tlookup G N T -> tlookup G N T' -> same T T' -> type.
%mode tlookup-unique +L +L' -ID.
- : tlookup-unique tl/fail tl/fail ident.
- : tlookup-unique (tl/hit S1 L1 E1) (tl/hit S2 L2 E2) X
     <- eq-unique E1 E2 XE
     <- tlookup-unique L1 L2 XL
     <- tselect-unique XE XL S1 S2 X.
%worlds () (tlookup-unique _ _ _).
%total A (tlookup-unique A _ _).


lookup-restrict: tlookup G2 N (tsome T2) -> tlookup G1 N (tsome T1) -> sub-env G1 G2 -> tlookup G1 N (tsome T2) -> same (tsome T2) (tsome T1) -> type.
%mode lookup-restrict +A +B +C -E -F.

-: lookup-restrict L2 (tl/hit ts/f L1 E) (sub-env/cons L S) (tl/hit ts/f L1' E) X
    <- lookup-restrict L2 L1 S L1' X.

-: lookup-restrict L2 (tl/hit ts/t L1 E) (sub-env/cons L S) L1' X
    <- eq-symm E E'
    <- lookup-same L2 E' L2'
    <- tlookup-unique L2' L X
    <- lookup-same2 (tl/hit ts/t L1 E) X L1'
    .


%worlds () (lookup-restrict _ _ _ _ _).
%total {C} (lookup-restrict _ _ C _ _).






% NOT USED YET 
% get-fresh operation:
% 
% get-fresh: tenv -> {N:nat} tfresh N G -> type.
% %mode get-fresh +A -B -C.
% 
% %worlds () (get-fresh _ _ _).
% %total A (get-fresh A _ _).




%%%% WF-TP

wf-tp : tenv -> tpe -> type.

wf-tp/bool : wf-tp G1 bool.
wf-tp/int  : wf-tp G1 int.
wf-tp/top  : wf-tp G1 top.
wf-tp/bot  : wf-tp G1 bot.

wf-tp/fun  : wf-tp G1 (arrow T1 T2)
             <- wf-tp G1 T1
             <- wf-tp G1 T2.

wf-tp/tsel : wf-tp G1 (tsel N)
              <- tlookup G1 N (tsome (arrow T1 T2))
              <- wf-tp G1 (arrow T1 T2).




same-arrow-ex: same (tsome (arrow T1 T2)) (tsome (arrow T3 T4)) -> same (tsome T1) (tsome T3) -> same (tsome T2) (tsome T4) -> type.
%mode same-arrow-ex +A -B -C.

- : same-arrow-ex ident ident ident.

%worlds () (same-arrow-ex _ _ _).
%total (A) (same-arrow-ex A _ _).


% extend-wf-pev 

same-wf-tp: wf-tp G T1 -> same (tsome T2) (tsome T1) -> wf-tp G T2 -> type.
%mode same-wf-tp +A +B -H.
- : same-wf-tp W ident W.
%worlds () (same-wf-tp _ _ _).
%total (A) (same-wf-tp A _ _).


extend-wf-tp: wf-tp G T -> sub-env G G' -> wf-tp G' T -> type.
%mode extend-wf-tp +A +B -H.

- : extend-wf-tp wf-tp/int S wf-tp/int.
- : extend-wf-tp wf-tp/bool S wf-tp/bool.
- : extend-wf-tp wf-tp/top S wf-tp/top.
- : extend-wf-tp wf-tp/bot S wf-tp/bot.
- : extend-wf-tp (wf-tp/fun W2 W1) S (wf-tp/fun W2' W1') 
      <- extend-wf-tp W1 S W1'
      <- extend-wf-tp W2 S W2'.
- : extend-wf-tp (wf-tp/tsel W1 L1) S (wf-tp/tsel W1' L1')
      <- lookup-extend L1 S L1'
      <- extend-wf-tp W1 S W1'.

%worlds () (extend-wf-tp _ _ _).
%total (A) (extend-wf-tp A _ _).


restrict-wf-pev: wf-tp G1 T1 -> tlookup G1 N (tsome T1) -> sub-env G2 G1 -> wf-tp G2 T2 -> tlookup G2 N (tsome T2) -> 
  wf-tp G2 T1 -> tlookup G2 N (tsome T1) -> type.
%mode restrict-wf-pev +A +B +C +D +E -F -H.

- : restrict-wf-pev WT LT S1T W1 L1 W1' L1'
                 <- lookup-restrict LT L1 S1T L1' X
                 <- same-wf-tp W1 X W1'.

%worlds () (restrict-wf-pev _ _ _ _ _ _ _).
%total (A) (restrict-wf-pev A _ _ _ _ _ _).




membership: tenv -> nat -> tpe -> type.
mem-yes : tlookup G N (tsome T) -> membership G N T.
mem-no  : tlookup G N tnone -> tfresh N G -> membership G N T.

select-mship: boolx -> membership G N T1 -> membership G N T2 -> membership G N T3 -> type.
-: select-mship t V1 V2 V1.
-: select-mship f V1 V2 V2.
%mode select-mship +C +V1 +V2 -V3.
%worlds () (select-mship _ _ _ _).
%total (A) (select-mship A _ _ _).

cons-mship: {N} {T1} {G} {C} eq N N1 C -> {F: tfresh N G} membership G N1 T2 -> membership (tcons N T1 G F) N1 T3 -> type.
%mode cons-mship +N +T +G +C +E +M +F -M1.

- : cons-mship N T G t E F M (mem-yes (tl/hit ts/t L' E)) 
      <- fresh-cant-lookup F L
      <- lookup-same L E L'
      .

- : cons-mship N T G f E F (mem-yes L) (mem-yes (tl/hit ts/f L E)).
- : cons-mship N T G f E F ((mem-no L F0): membership _ _ T2) 
              ((mem-no (tl/hit ts/f L E) (tfresh/cons E2 F0)): membership _ _ T2) 
                <- eq-symm E E2.

%worlds () (cons-mship _ _ _ _ _ _ _ _).
%total (A) (cons-mship A _ _ _ _ _ _ _).


test-membership: {G:tenv} {N:nat} membership G N T -> type.
%mode test-membership +G +N -M.

- : test-membership tnil N ((mem-no tl/fail tfresh/nil): membership tnil N bot). %% bit ugly to pass a type here...
- : test-membership (tcons N1 T1 G F) N2 M1
     <- eq-deriv N1 N2 C E
     <- test-membership G N2 M
     <- cons-mship N1 T1 G C E F M M1
     .
%worlds () (test-membership _ _ _).
%total (A) (test-membership A _ _).
% %unique test-membership +G +N -M.


restrict-membership: membership G2 N T2 -> membership G1 N T1 -> sub-env G1 G2 -> membership G1 N T2 -> type.
%mode restrict-membership +A +B +C -D.

- : restrict-membership (mem-yes L2) (mem-yes L1) S (mem-yes L1')
      <- lookup-restrict L2 L1 S L1' X.

- : restrict-membership (mem-yes L2) (mem-no _ F1) S (mem-no L1 F1)
     <- fresh-cant-lookup F1 L1.

- : restrict-membership (mem-no L2 F2) _ S (mem-no L1 F1)
     <- fresh-restrict F2 S F1
     <- fresh-cant-lookup F1 L1.

%worlds () (restrict-membership _ _ _ _).
%total (A) (restrict-membership A _ _ _).



union-env1: membership G1 N T -> {G3:tenv} sub-env G1 G3 -> tlookup G3 N (tsome T) -> type.
%mode union-env1 +A -C -D -E.

- : union-env1 (mem-yes L) _ S L 
      <- sub-env-refl _ S.

- : union-env1 ((mem-no L F): membership G1 N T) (tcons _ _ _ F) S' (tl/hit ts/t L E)
      <- eq-refl _ E
      <- sub-env-refl _ S 
      <- sub-env-extend _ T F S S'.

%worlds () (union-env1 _ _ _ _).
%total (A) (union-env1 A _ _ _).

union-env2: {G1:tenv}{N:nat} {G3:tenv} sub-env G1 G3 -> tlookup G3 N (tsome T) -> type.
%mode union-env2 +A +B -D -E -F.

- : union-env2 G1 N G3 S L
      <- test-membership G1 N M
      <- union-env1 M G3 S L.

%worlds () (union-env2 _ _ _ _ _).
%total (A) (union-env2 A _ _ _ _).



union-env: {G1:tenv}{G2:tenv}{G3:tenv} sub-env G1 G3 -> sub-env G2 G3 -> type.
%mode union-env +A +B -C -D -E.

- : union-env tnil G2 G2 sub-env/nil S
      <- sub-env-refl G2 S.

- : union-env (tcons N T G1 F) G2 G3' (sub-env/cons L S1') S2'
      <- union-env G1 G2 G3 S1 S2
      <- union-env2 G3 N G3' S3 L
      <- sub-env-trans S1 S3 S1'
      <- sub-env-trans S2 S3 S2'.

%worlds () (union-env _ _ _ _ _).
%covers union-env +A +B -C -D -E. %%% not total, because types for a key may be different
% %total (A) (union-env A _ _ _ _).


% intersect-env1: membership G1 N T -> tfresh G2 N -> {G3:tenv} sub-env G2 G3 -> type.
% %mode intersect-env1 +A -C -D -E.
% 
% - : intersect-env1 (mem-yes L) _ S L 
%       <- sub-env-refl _ S.
% 
% - : intersect-env1 ((mem-no L F): membership G1 N T) (tcons _ _ _ F) S' (tl/hit ts/t L E)
%       <- eq-refl _ E
%       <- sub-env-refl _ S 
%       <- sub-env-extend _ T F S S'.
% 
% %worlds () (intersect-env1 _ _ _ _).
% %total (A) (intersect-env1 A _ _ _).


% intersect-env2: {G1:tenv}{N:nat} {G3:tenv} sub-env G1 G3 -> tlookup G3 N (tsome T) -> type.
% %mode intersect-env2 +A +B -D -E -F.
% 
% - : intersect-env2 G1 N G3 S L
%       <- test-membership G1 N M
%       <- intersect-env1 M G3 S L.
% 
% %worlds () (intersect-env2 _ _ _ _ _).
% %total (A) (intersect-env2 A _ _ _ _).



intersect-env1: membership G2 N T -> {F:tfresh N G1} sub-env G0 G1 -> sub-env G0 G2 -> 
sub-env G0 G0' -> sub-env G0' (tcons N T G1 F) -> sub-env G0' G2 -> type.
%mode intersect-env1 +A +B +C +D -E -F -G.

- : intersect-env1 (mem-yes (L: tlookup G2 N (tsome T1))) F1 (S1: sub-env G0 G1) S2 S 
      ((sub-env/cons ((tl/hit ts/t L1' E): tlookup (tcons N T1 G1 F1) N (tsome _)) S1x): sub-env (tcons _ _ G0 F) _)
      ((sub-env/cons L S2): sub-env (tcons N T1 G0 F) G2) 
      <- fresh-restrict F1 S1 F
      <- fresh-cant-lookup F1 L1'
      <- eq-refl _ E
      <- sub-env-refl _ S0 
      <- sub-env-extend _ _ _ S1 S1x
      <- sub-env-extend _ _ _ S0 S.

- : intersect-env1 (mem-no L _) F S1 S2 S S1' S2
      <- sub-env-extend _ _ F S1 S1'
      <- sub-env-refl _ S.

%worlds () (intersect-env1 _ _ _ _ _ _ _).
%total (A) (intersect-env1 A _ _ _ _ _ _).



intersect-env: {G1:tenv}{G2:tenv} sub-env G1 GT -> sub-env G2 GT -> {G3:tenv} sub-env G3 G1 -> sub-env G3 G2 -> type.
%mode intersect-env +A +B +U +V -C -D -E.

- : intersect-env tnil G2 sub-env/nil S tnil sub-env/nil sub-env/nil.

- : intersect-env (tcons N T G1 F) G2 (sub-env/cons L S1T) S2T G3' S1' S2'
      <- intersect-env G1 G2 S1T S2T G3 S1 S2
      <- test-membership G2 N M
      <- restrict-membership (mem-yes L) M S2T M'
      <- intersect-env1 M' F S1 S2 S0 S1' S2'
      .

%worlds () (intersect-env _ _ _ _ _ _ _).
%total (A) (intersect-env A _ _ _ _ _ _).


tselect-t-invert: id-boolx C t -> tselect C V1 V2 V3 -> same V1 V3 -> type.
%mode tselect-t-invert +C +X -ID.
- : tselect-t-invert id-boolx/refl ts/t ident.
%worlds () (tselect-t-invert _ _ _).
%total (A) (tselect-t-invert A _ _).

tselect-f-invert: id-boolx C f -> tselect C V1 V2 V3 -> same V3 V2 -> type.
%mode tselect-f-invert +C +X -ID.
- : tselect-f-invert id-boolx/refl ts/f ident.
%worlds () (tselect-f-invert _ _ _).
%total (A) (tselect-f-invert A _ _).

lookup-after-first: tlookup (tcons N2 T2 G2 F2) N1 T1 -> eq N2 N1 f -> tlookup G2 N1 T1 -> type.
%mode lookup-after-first +A +B -C.
- : lookup-after-first (tl/hit SL TL2 E2) E1 TL2'
     <- eq-unique E2 E1 X
     <- tselect-f-invert X SL Y
     <- lookup-same2 TL2 Y TL2'.
%worlds () (lookup-after-first _ _ _).
%total (A) (lookup-after-first A _ _).

sub-env-restrict2: sub-env G1 (tcons N T G2 F) -> tfresh N G1 -> sub-env G1 G2 -> type.
%mode sub-env-restrict2 +S1 +S2 -S3.
- : sub-env-restrict2 sub-env/nil F sub-env/nil.
- : sub-env-restrict2 (sub-env/cons TL S) (tfresh/cons EQ F) (sub-env/cons TL' S')
     <- lookup-after-first TL EQ TL'
     <- sub-env-restrict2 S F S'.
%worlds () (sub-env-restrict2 _ _ _).
%total (A) (sub-env-restrict2 A _ _).


%%% do we need GA' and GB' or could we just use G1?

intersect-env2: membership G2 N T -> {F:tfresh N G1} 
sub-env G0 G1 -> sub-env G0 G2 -> 
sub-env GA (tcons N T GA' FA) -> sub-env GA G2 -> 
sub-env GB (tcons N T GB' FB) -> sub-env GB G2 -> 
sub-env GA' G0 -> sub-env GB' G0 ->

sub-env G0 G0' -> 
sub-env G0' (tcons N T G1 F) -> sub-env G0' G2 -> 
sub-env GA G0' -> sub-env GB G0' ->
type.
%mode intersect-env2 +U +V +W +X +Y +Z +A +B +C +D -E -F -G -H -I.

- : intersect-env2 (mem-yes (L: tlookup G2 N (tsome T1))) F1 
      (S1: sub-env G0 G1) S2 
      SAA SA2
      SBB SB2
      SA0 SB0
      S 
      ((sub-env/cons ((tl/hit ts/t L1' E): tlookup (tcons N T1 G1 F1) N (tsome _)) S1x): sub-env (tcons _ _ G0 F) _)
      ((sub-env/cons L S2): sub-env (tcons N T1 G0 F) G2) 
      SA0' SB0'
      <- fresh-restrict F1 S1 F
      <- fresh-cant-lookup F1 L1'
      <- eq-refl _ E
      <- sub-env-refl _ S0 
      <- sub-env-extend _ _ _ S1 S1x
      <- sub-env-extend _ _ _ S0 S
      %% now A and B
      <- sub-env-extend _ _ _ SA0 SA0x
      <- sub-env-extend _ _ _ SB0 SB0x
      <- fresh-cant-lookup F L0'
      <- sub-env-trans SAA (sub-env/cons (tl/hit ts/t L0' E) SA0x) SA0'
      <- sub-env-trans SBB (sub-env/cons (tl/hit ts/t L0' E) SB0x) SB0'
      .

- : intersect-env2 (mem-no L F2) F S1 S2 SAA SA2 SBB SB2 SA SB S S1' S2 SA' SB'
      <- sub-env-extend _ _ F S1 S1'
      <- sub-env-refl _ S
      %% now A and B
      <- fresh-restrict F2 SA2 FA
      <- fresh-restrict F2 SB2 FB
      <- sub-env-restrict2 SAA FA SAx
      <- sub-env-restrict2 SBB FB SBx
      <- sub-env-trans SAx SA SA'
      <- sub-env-trans SBx SB SB'
      .

%worlds () (intersect-env2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).
%total (A) (intersect-env2 A _ _ _ _ _ _ _ _ _ _ _ _ _ _).

sub-env-extend2: {N}{T}{F1}{F2} sub-env G1 G2 -> sub-env (tcons N T G1 F1) (tcons N T G2 F2) -> type.
%mode sub-env-extend2 +N +T +F1 +F2 +S -S'.
%worlds () (sub-env-extend2 _ _ _ _ _ _).
%trustme
%total (A) (sub-env-extend2 _ _ _ _ A _).

sub-env-restrict: sub-env G1 (tcons N T G2 F) -> sub-env G1' G1 -> sub-env G1' G2 -> sub-env G1 (tcons N T G1' F') -> type.
%mode sub-env-restrict +S1 -S2 -S3 -S4.
- : sub-env-restrict sub-env/nil sub-env/nil sub-env/nil (sub-env/nil: sub-env tnil (tcons _ _ _ tfresh/nil)).
- : sub-env-restrict (sub-env/cons TL S: sub-env (tcons N T G1 F1) (tcons N T G2 F))
     S1'
     S2
     (sub-env/cons (tl/hit ts/t TL3 EQ3) S3)
     <- eq-refl N EQ3
     <- fresh-cant-lookup F1 TL3
     <- sub-env-restrict S S1 S2 S3
     <- sub-env-extend N T F1 S1 S1'.
- : sub-env-restrict (sub-env/cons (tl/hit ts/f TL EQF) S: sub-env (tcons N1 T1 G1 F1) (tcons N T G2 F))
     (sub-env/cons (tl/hit ts/t TL1 EQ1) S1')
     (sub-env/cons TL S2)
     (sub-env/cons (tl/hit ts/f (tl/hit ts/t TL3 EQ1) EQF) S3')
     <- sub-env-restrict S S1 S2 (S3: sub-env G1 (tcons N T G1' F3))
     <- fresh-restrict F1 S1 F1'
     <- fresh-cant-lookup F1 TL1
     <- sub-env-extend N1 T1 F1 S1 S1'
     <- eq-refl N1 EQ1
     <- sub-env-refl G1' SG1'
     <- sub-env-extend N1 T1 F1' SG1' SG1''
     <- sub-env-extend2 N T F3 (tfresh/cons EQF F3) SG1'' SG1'''
     <- sub-env-trans S3 SG1''' S3'
     <- fresh-cant-lookup F1' TL3.

%worlds () (sub-env-restrict _ _ _ _).
%trustme
%total (A) (sub-env-restrict A _ _ _).


join-env: 
{G1:tenv}{G2:tenv} 
sub-env G1 GT -> sub-env G2 GT -> 
sub-env GA G1 -> sub-env GA G2 -> sub-env GB G1 -> sub-env GB G2
-> sub-env GA G0 -> sub-env GB G0 
-> sub-env G0 G1 -> sub-env G0 G2
-> sub-env G0 GT -> type.
%mode join-env +G1 +G2 +A +B  +C +D +E +F  -G -H  -I -J -K.

- : join-env tnil G2 sub-env/nil S  
             sub-env/nil _ sub-env/nil _
             sub-env/nil sub-env/nil
             sub-env/nil sub-env/nil
             sub-env/nil.

- : join-env (tcons N T G1 F) G2 
      (sub-env/cons L S1T) S2T 
      (SA1: sub-env GA _) SA2 (SB1: sub-env GB _) SB2
      % (sub-env/cons LA SA1) SA2 (sub-env/cons LB SB1y) SB2
      (SA0': sub-env GA G0) SB0'
      S1' S2'
      (S0T': sub-env G0 GT)
      <- sub-env-restrict SA1 SA1x1 SA1x2 SA1x3
      <- sub-env-restrict SB1 SB1x1 SB1x2 SB1x3
      <- sub-env-trans SA1x1 SA2 SA2'
      <- sub-env-trans SB1x1 SB2 SB2'
      <- join-env G1 G2 
            S1T S2T
            SA1x2 SA2' SB1x2 SB2'
            (SA0x: sub-env GA' G0') SB0x
            S1 S2
            S0Tx
      <- test-membership G2 N M
      <- restrict-membership (mem-yes L) M S2T M'
      <- intersect-env2 M' F S1 S2 SA1x3 SA2 SB1x3 SB2 SA0x SB0x S0 S1' S2' SA0' SB0'

      <- sub-env-trans S2' S2T S0T'
      .      

%worlds () (join-env _ _ _ _ _ _ _ _ _ _ _ _ _).
%total (A) (join-env A _ _ _ _ _ _ _ _ _ _ _ _).









%%% diamond properties --- still need to prove aux:


tl-join1: membership G N T0 -> sub-env G G1 -> sub-env G G2 -> tlookup G1 N (tsome T) -> tlookup G2 N (tsome T) -> 
tlookup G' N (tsome T) -> sub-env G G' -> sub-env G' G1 -> sub-env G' G2 -> type.
%mode tl-join1 +M +A +B +C +D -E -F -G -H.

- : tl-join1 (mem-yes L) S1 S2 L1 L2 L' S S1 S2
     <- lookup-restrict L1 L S1 L' X
     <- sub-env-refl _ S.

- : tl-join1 (mem-no (L:tlookup G N tnone) F) S1 S2 L1 L2 (tl/hit ts/t L E) S' (sub-env/cons L1 S1) (sub-env/cons L2 S2)
      <- eq-refl _ E
      <- sub-env-refl _ S 
      <- sub-env-extend _ T F S S'
      .

%worlds () (tl-join1 _ _ _ _ _ _ _ _ _).
%total (A) (tl-join1 _ A _ _ _ _ _ _ _).



tl-join: sub-env G G1 -> sub-env G G2 -> tlookup G1 N (tsome T) -> tlookup G2 N (tsome T) -> 
tlookup G' N (tsome T) -> sub-env G G' -> sub-env G' G1 -> sub-env G' G2 -> type.
%mode tl-join +A +B +C +D -E -F -G -H.

- : tl-join S1 S2 L1 L2 L0 S0 S1' S2' 
      <- test-membership _ _ M
      <- tl-join1 M S1 S2 L1 L2 L0 S0 S1' S2'.

%worlds () (tl-join _ _ _ _ _ _ _ _).
%total (A) (tl-join A _ _ _ _ _ _ _).



%%% assuming tl-join, tsel case in wf-tp-dia holds. arrow case still missing
%%% (need union on environments?)

wf-tp-dia: 
  wf-tp GT T -> wf-tp G1 T -> wf-tp G2 T -> sub-env G1 GT -> sub-env G2 GT ->
  wf-tp G T -> sub-env G G1 -> sub-env G G2 ->
  type.

%mode wf-tp-dia +A +B +C +D +E -F -G -H.


- : wf-tp-dia wf-tp/bool wf-tp/bool wf-tp/bool S1 S2 wf-tp/bool sub-env/nil sub-env/nil.
- : wf-tp-dia wf-tp/int wf-tp/int wf-tp/int S1 S2 wf-tp/int sub-env/nil sub-env/nil.
- : wf-tp-dia wf-tp/top wf-tp/top wf-tp/top S1 S2 wf-tp/top sub-env/nil sub-env/nil.
- : wf-tp-dia wf-tp/bot wf-tp/bot wf-tp/bot S1 S2 wf-tp/bot sub-env/nil sub-env/nil.


- : wf-tp-dia (wf-tp/fun TT2 TT1) (wf-tp/fun T12 T11) (wf-tp/fun T22 T21) S1T S2T 
              (wf-tp/fun T02' T01') S01 S02
                  <- wf-tp-dia TT1 T11 T21 S1T S2T T01 S01A S02A
                  <- wf-tp-dia TT2 T12 T22 S1T S2T T02 S01B S02B
                  <- join-env _ _ S1T S2T S01A S02A S01B S02B SA0 SB0 S01 S02 S0T
                  <- extend-wf-tp T01 SA0 T01'
                  <- extend-wf-tp T02 SB0 T02'
                  .

- : wf-tp-dia (wf-tp/tsel WT LT) (wf-tp/tsel W1 L1)(wf-tp/tsel W2 L2) S1T S2T 
              (wf-tp/tsel W0' L0') S01' S02'
                  %% establish that W1 L1 W2 L2 all have the same type as WT LT
                  <- restrict-wf-pev WT LT S1T W1 L1 W1' L1'
                  <- restrict-wf-pev WT LT S2T W2 L2 W2' L2'
                  %% induction
                  <- wf-tp-dia WT W1' W2' S1T S2T W0 S01 S02
                  %% add key/val being looked up to result W0
                  <- tl-join S01 S02 L1' L2' L0' S0 S01' S02'
                  <- extend-wf-tp W0 S0 W0'.

%worlds () (wf-tp-dia _ _ _ _ _ _ _ _).
%total A (wf-tp-dia A _ _ _ _ _ _ _).




%%%%% OLF STUFF BELOW %%%%%





%{ ------- eval-exp / type-exp ----- }%

eval-exp   : venv -> exp -> val -> type.
e/cst      : eval-exp G (cste C) (cstv C).
e/var      : eval-exp G (var N) V <- vlookup G N (vsome V).
e/fun      : eval-exp G (fun N R T) (clos N R G).

e/prim     : eval-exp G (prm OP E1 E2) V3
            <- eval-exp G E1 V1 
            <- eval-exp G E2 V2
            <- eval-op OP V1 V2 V3.

e/app      : eval-exp G (app E1 E2) V3
            <- eval-exp G E1 (clos N R G1)
            <- eval-exp G E2 V2
            <- eval-exp (vcons N V2 G1 F) R V3.



type-exp   : tenv -> exp -> tpe -> type.
t/cst      : type-exp G (cste C) T <- typeof C T.
t/var      : type-exp G (var N) T <- tlookup G N (tsome T).
t/fun      : type-exp G (fun N R T1) (arrow T1 T2) 
                <- type-exp (tcons N T1 G F) R T2.

t/prim      : type-exp G (prm OP E1 E2) T3
            <- type-exp G E1 T1 
            <- type-exp G E2 T1
            <- type-op OP T1 T2 T3.

t/app       : type-exp G (app E1 E2) T2
            <- type-exp G E1 (arrow T1 T2) 
            <- type-exp G E2 T1.



%{ ------- well-formedness / typing for values and environment ----- }%

wf-val   : val -> tpe -> type.
wf-env   : venv -> tenv -> type.

wfv/c    : wf-val (cstv C) T <- typeof C T.
wfv/f    : wf-val (clos N R H) (arrow T1 T2) 
            <- wf-env H G
            <- type-exp (tcons N T1 G F) R T2.

wfe/n    : wf-env vnil tnil. 
wfe/c    : wf-env H G -> wf-val V T -> wf-env (vcons N V H F1) (tcons N T G F2).



%{ ------- type preservation ----- }%

wf-val-same: wf-val V T1 -> same (tsome T1) (tsome T2) -> wf-val V T2 -> type.
%mode wf-val-same +V +A -B.
- : wf-val-same W ident W.
%worlds () (wf-val-same _ _ _).
%total (A) (wf-val-same A _ _).

% lookup safe

lookup-safe0: wf-val V T -> wf-env H G -> 
tlookup (tcons N T G FT) N1 (tsome T1) -> vlookup (vcons N V H FV) N1 (vsome V1) -> 
wf-val V1 T1 -> type.

% - : lookup-safe0 V _ (tl/hit _) (vl/hit _) V.

- : lookup-safe0 V wfe/n _ _ V.

- : lookup-safe0 V (wfe/c G V1) (tl/hit S1 A E1) (vl/hit vs/t B E2) V'
      <- eq-unique E1 E2 Y
      <- tselect-t-invert Y S1 X
      <- wf-val-same V X V'
      .

- : lookup-safe0 V (wfe/c G V1) (tl/hit S1 A E1) (vl/hit vs/f B E2) Z
      <- eq-unique E1 E2 Y
      <- tselect-f-invert Y S1 X
      <- lookup-same2 A X A'
      <- lookup-safe0 V1 G A' B Z
      .

%mode lookup-safe0 +V +A +B +C -F.

%worlds () (lookup-safe0 _ _ _ _ _).
%total A (lookup-safe0 _ A _ _ _).



lookup-safe: wf-env H G -> tlookup G N (tsome T) -> vlookup H N (vsome V) -> wf-val V T -> type.
%mode lookup-safe +A +B +C -D.

-      : lookup-safe (wfe/c G V) A B Z
         <- lookup-safe0 V G A B Z.


%worlds () (lookup-safe _ _ _ _).
%total A (lookup-safe A _ _ _). % induction on first arg



% eval primitive op safe

eval-op-safe : type-op OP T1 T2 T3 -> eval-op OP V1 V2 V3 -> wf-val V3 T3 -> type.
%mode eval-op-safe +LTE1 +LTE2 -LTE3.

-plus   : eval-op-safe t/plus (ev/v (e/plus _)) (wfv/c -/n).
-eqt    : eval-op-safe t/eq (ev/v (e/eqt _ _)) (wfv/c -/t).
-eqf    : eval-op-safe t/eq (ev/v (e/eqf _)) (wfv/c -/f).

%worlds () (eval-op-safe _ _ _).
%total A (eval-op-safe A _ _). % induction on first arg



eval-safe: type-exp G E T -> wf-env H G -> eval-exp H E V -> wf-val V T -> type.
%mode eval-safe +A +B +C -D.

-      : eval-safe (t/cst T) _ (e/cst) (wfv/c T).  

-      : eval-safe (t/var L) E (e/var L2) V
          <- lookup-safe E L L2 V.

-      : eval-safe (t/fun TS) E (e/fun) (wfv/f TS E).

-      : eval-safe (t/prim T _ _) _ (e/prim V _ _) WF
          <- eval-op-safe T V WF.

-      : eval-safe 
            (t/app 
              (TX: type-exp G0 EXP2 T1) 
              (TF: type-exp G0 EXP1 (arrow T1 T2))
            ) 
            (WE: wf-env H0 G0)
            (e/app
              (EV3: eval-exp (vcons _ V2 HC0 _) R V3) 
              (EVX: eval-exp H0 EXP2 V2) 
              (EVF: eval-exp H0 EXP1 (clos _ R HC0))
            )
            (Z: wf-val V3 T2)

          <- eval-safe TX WE EVX WVX   % eval X

          <- eval-safe TF WE           % eval F
            (EVF: eval-exp H0 EXP1 (clos _ R HC0))
            (wfv/f 
              (TR : type-exp (tcons _ T1 GC0 _) R T2)
              (WE1: wf-env HC0 GC0)
            )

          <- eval-safe                 % eval F(X)
              (TR: type-exp (tcons _ T1 GC0 _) R T2)
              (wfe/c WE1 WVX)
              (EV3: eval-exp (vcons _ V2 HC0 _) R V3) 
              (Z: wf-val V3 T2).


%worlds () (eval-safe _ _ _ _).
%total C (eval-safe A _ C _). % induction on eval-exp

