%{ ------- language ----- }%

tpe: type.
dec: type.
topt: type.

top: tpe.
tbind: dec -> tpe.
tsel: tpe.

tnone: topt.
tsome: tpe -> topt.

rect: topt -> tpe -> dec.

%{ ------- environments ----- }%

% environments
tenv  : type.
tnil  : tenv.
tcons : dec -> tenv.

tlookup: tenv -> dec -> type.
tl  : tlookup (tcons D) D.

%{ ------- subtyping ------ }%

has-lower : dec -> tpe -> type.
has-lower/yes : has-lower (rect (tsome S) U) S.

has-upper : dec -> tpe -> type.
has-upper/yes : has-upper (rect _ U) U.

wf-tp : tenv -> tpe -> type.
wf-dc : tenv -> dec -> type.
sub-tp : tenv -> tpe -> tenv -> tpe -> type.
sub-dc : tenv -> dec -> tenv -> dec -> type.

wf-env  : tenv -> type.
wf-env/tnil : wf-env tnil.
wf-env/tcons : wf-env (tcons D)
            <- wf-dc (tcons D) D.
sub-env : tenv -> tenv -> type.
sub-env/refl  : sub-env G G
            <- wf-env G.
sub-env/tcons : sub-env (tcons D1) (tcons D2)
            <- sub-dc (tcons D1) D1 (tcons D2) D2.

sub-tp/top : sub-tp G1 T G2 top
          <- sub-env G1 G2
          <- wf-tp G1 T.
sub-tp/tsel1 : sub-tp G1 tsel G2 T
            <- tlookup G1 D
            <- wf-dc G1 D
            <- has-upper D U
            <- sub-tp G1 U G2 T
            .
sub-tp/tsel2 : sub-tp G1 T G2 tsel
            <- tlookup G1 D
            <- wf-tp G2 tsel
            <- has-lower D S
            <- sub-tp G1 T G2 S
            .
sub-tp/tbind : sub-tp G1 (tbind D1) G2 (tbind D2)
            <- sub-env G1 G2
            <- wf-tp G2 (tbind D2)
            <- sub-dc (tcons D1) D1 (tcons D2) D2
            .

sub-dc/ss : sub-dc G1 (rect (tsome S1) U1) G2 (rect (tsome S2) U2)
         <- sub-tp G1 S2 G2 S1
         <- sub-tp G1 U1 G2 U2
         <- sub-tp G1 S1 G1 U1
         <- sub-tp G2 S2 G2 U2.
sub-dc/sn : sub-dc G1 (rect (tsome S1) U1) G2 (rect tnone U2)
         <- sub-tp G1 U1 G2 U2
         <- sub-tp G1 S1 G1 U1.

sub-dc/nn : sub-dc G1 (rect tnone U1) G2 (rect tnone U2)
         <- sub-tp G1 U1 G2 U2.

wf-tp/top : wf-tp G top.
wf-tp/tbind : wf-tp G (tbind D)
           <- wf-dc (tcons D) D.
wf-tp/tsel : wf-tp G tsel
          <- tlookup G D
          <- wf-dc G D.

wf-dc/s : wf-dc G (rect (tsome S) U)
       <- sub-tp G S G U.
wf-dc/n : wf-dc G (rect tnone U)
       <- wf-tp G U.

%%% PROOFS %%%

%{ ------- uniqueness ------ }%

same: tpe -> tpe -> type.
ident: same T T.

samed: dec -> dec -> type.
identd: samed T T.

sameopt : topt -> topt -> type.
identopt: sameopt T T.

sametenv: tenv -> tenv -> type.
identtenv: sametenv G G.

false: type.

tlookup-eq : tlookup G D1 -> tlookup G D2 -> samed D1 D2 -> type.
%mode tlookup-eq +A +B -C.

- : tlookup-eq tl tl identd.

%worlds () (tlookup-eq _ _ _).
%total A (tlookup-eq A _ _).

eq-sub-tp-low : same T1 T1' -> sub-tp G1 T1 G2 T2 -> sub-tp G1 T1' G2 T2 -> type.
%mode eq-sub-tp-low +A +B -C.

- : eq-sub-tp-low ident BT BT.

%worlds () (eq-sub-tp-low _ _ _).
%total A (eq-sub-tp-low A _ _).
%reduces C <= B (eq-sub-tp-low _ B C).

eq-sub-tp-high : same T2 T2' -> sub-tp G1 T1 G2 T2 -> sub-tp G1 T1 G2 T2' -> type.
%mode eq-sub-tp-high +A +B -C.

- : eq-sub-tp-high ident BT BT.

%worlds () (eq-sub-tp-high _ _ _).
%total A (eq-sub-tp-high A _ _).
%reduces C <= B (eq-sub-tp-high _ B C).

eq-sub-dc-low : samed D1 D1' -> sub-dc G1 D1 G2 D2 -> sub-dc G1 D1' G2 D2 -> type.
%mode eq-sub-dc-low +A +B -C.

- : eq-sub-dc-low identd BD BD.

%worlds () (eq-sub-dc-low _ _ _).
%total A (eq-sub-dc-low A _ _).
%reduces C <= B (eq-sub-dc-low _ B C).

eq-sub-dc-high : samed D2 D2' -> sub-dc G1 D1 G2 D2 -> sub-dc G1 D1 G2 D2' -> type.
%mode eq-sub-dc-high +A +B -C.

- : eq-sub-dc-high identd BD BD.

%worlds () (eq-sub-dc-high _ _ _).
%total A (eq-sub-dc-high A _ _).
%reduces C <= B (eq-sub-dc-high _ B C).

upper-eq : samed D D' -> has-upper D U -> has-upper D' U' -> same U U' -> type.
%mode upper-eq +A +B +C -D.

- : upper-eq identd has-upper/yes has-upper/yes ident.

%worlds () (upper-eq _ _ _ _).
%total A (upper-eq A _ _ _).

%{ ------- regularity ------ }%

extract-wf : sub-tp G1 T1 G2 T2 -> sub-env G1 G2 -> wf-tp G1 T1 -> wf-tp G2 T2 -> type.
%mode extract-wf +A -B -C -D.
extract-wfd : sub-dc G1 D1 G2 D2 -> sub-env G1 G2 -> wf-dc G1 D1 -> wf-dc G2 D2 -> type.
%mode extract-wfd +A -B -C -D.

- : extract-wf (sub-tp/top W E) E W wf-tp/top.

- : extract-wf (sub-tp/tsel1 B H D L)
     E
     (wf-tp/tsel D L)
     W2
 <- extract-wf B E _ W2.

- : extract-wf (sub-tp/tsel2 B H W2 L)
     E
     W1
     W2
 <- extract-wf B E W1 _.

- : extract-wf (sub-tp/tbind BD W2 E)
     E
     (wf-tp/tbind D1)
     W2
 <- extract-wfd BD _ D1 D2.

- : extract-wfd (sub-dc/ss B2 B1 BU BS)
     E
     (wf-dc/s B1)
     (wf-dc/s B2)
 <- extract-wf BU E _ _.

- : extract-wfd (sub-dc/sn B1 BU)
     E
     (wf-dc/s B1)
     (wf-dc/n WU2)
 <- extract-wf BU E _ WU2.

- : extract-wfd (sub-dc/nn BU)
     E
     (wf-dc/n WU1)
     (wf-dc/n WU2)
 <- extract-wf BU E WU1 WU2.

%worlds () (extract-wf _ _ _ _) (extract-wfd _ _ _ _).
%total (A B) (extract-wf A _ _ _) (extract-wfd B _ _ _).

%{ ------- transitivity & weakening ------ }%

weak-wf-tp : sub-env G1 G2 -> wf-tp G2 T -> wf-tp G1 T -> type.
%mode weak-wf-tp +BE +A2 -A1.

- : weak-wf-tp _ wf-tp/top wf-tp/top.
- : weak-wf-tp _ (wf-tp/tbind WD) (wf-tp/tbind WD).
- : weak-wf-tp (sub-env/tcons BD) (wf-tp/tsel WD L) (wf-tp/tsel WD' tl)
 <- extract-wfd BD _ WD' _.
- : weak-wf-tp (sub-env/refl _) (wf-tp/tsel WD L) (wf-tp/tsel WD L).

%worlds () (weak-wf-tp _ _ _).
%total {} (weak-wf-tp _ _ _).
