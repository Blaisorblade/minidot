% echo "set unsafe true
% loadFile test13.elf" |/Volumes/Twelf\ for\ OS\ X\ \(Intel\)/Twelf/bin/twelf-server

% STLC: big step preservation
% - add store
% + add subtyping
% + add env to subtyping
% + add type members
% + add value members
% + add type bounds
% + add reflexivity for type selections
% + add self types

%%%%%% work in progress %%%%%%

%{

+ add labels to field/method/type members
+ add intersection types (union types tbd)
+ assign intersection types to objects
    - what about invert-var? special-cased for now
    + projection lemmas
+ enable multiple members in object terms
    + only multiple type members for now
    - use expansion for projection lemmas?
+ make type selection work with intersections
    + expansion
    - add 'interesting' expansion cases

Note:

Expansion is really wimply right now. It does
not compute actual meets and joins but is only
defined for cases like this:

   T1 --> tnone     T2 --> tsome T2'
  ----------------------------------
          (T1 /\ T2) -->  T2'

}%


%{ ------- arithmetic ----- }%

nat: type.
z: nat.
s: nat -> nat.

add : nat -> nat -> nat -> type.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.

%mode add +N1 +N2 -N3.

lte : nat -> nat -> type.
lte/z : lte z N.
lte/s : lte (s N1) (s N2)
   <- lte N1 N2.

%mode lte +N1 +N2.


eq : nat -> nat -> type.
eq/z : eq z z.
eq/s : eq (s N1) (s N2)
   <- eq N1 N2.

% %mode eq +N1 +N2.


ne : nat -> nat -> type.
ne/z : ne z (s N).
ne/z : ne (s N) z.
ne/s : ne (s N1) (s N2)
   <- ne N1 N2.

%mode ne +N1 +N2.


%query 0 * lte (s (s z)) (s z).
%query 1 * lte (s (s z)) (s (s z)).

eq-refl: {N:nat} eq N N -> type.
%mode eq-refl +N -E1.

- : eq-refl z eq/z.
- : eq-refl (s N) (eq/s E) <- eq-refl N E.

%worlds () (eq-refl _ _).
%total {A} (eq-refl A _).


sub-eq: eq A1 A2 -> eq C1 C2 -> add A1 B1 C1 -> add A2 B2 C2 -> eq B1 B2 -> type.
%mode sub-eq +E1 +E2 +A1 +A2 -E3.

- : sub-eq eq/z E add/z add/z E.
- : sub-eq (eq/s E1) (eq/s E2) (add/s A1) (add/s A2) E3
  <- sub-eq E1 E2 A1 A2 E3.

%worlds () (sub-eq _ _ _ _ _).
%total {A} (sub-eq A _ _ _ _).

add-inc: add A B C -> add A (s B) (s C) -> type.
%mode add-inc +E1 -E2.

- : add-inc add/z add/z.
- : add-inc (add/s A1) (add/s A2)
  <- add-inc A1 A2.

%worlds () (add-inc _ _).
%total {A} (add-inc A _).





%{ ------- language ----- }%

% sorts
exp: type.

tpe: type.
val: type.

venv: type.
tenv: type.

% members
mem   : nat -> type.
mnil  : mem z.
mcons : {N} tpe -> tpe -> mem N -> mem (s N).

% expressions
empty: exp.
var: nat -> exp.
fun:
  nat -> tpe -> exp -> tpe -> % def f(x: T): T = e
  nat -> exp -> tpe ->        % val v: T = e
  mem N ->                    % type T = A..B  ...
  exp.
app: exp -> nat -> exp -> exp.
sel: exp -> nat -> exp.



% types
top  : tpe.
bot  : tpe.
arrow: nat -> tpe -> tpe -> tpe.  % { def f: A => B }
rect : nat -> tpe -> tpe -> tpe.  % { type T: A..B }
recv : nat -> tpe -> tpe.         % { val v: A }
tsel : exp -> nat -> tpe.         % x.T


%% This version of bind makes the variable convention
%% explicit by fixing the 'this' identifier.

%% TODO: Putting the environment in the type avoids the
%% need for a uniqueness lemma -- we should add one and
%% get rid of the tenv.

bind : nat -> tenv -> tpe -> tpe.     % { this_n => A }

and  : tpe -> tpe -> tpe.


% values
emptyv: val.
clos: nat -> exp -> nat -> val -> venv -> val.

% environments
vnil  : venv.
vcons : val -> venv -> venv.
tnil  : tenv.
tcons : tpe -> tenv -> tenv.


%{ ------- environments ----- }%

vlookup-zero : venv -> exp -> val -> type.
vl/hit  : vlookup-zero (vcons V G) (var z) V.
vl/miss : vlookup-zero (vcons _ G) (var (s N)) V <- vlookup-zero G (var N) V.

vbind : venv -> val -> exp -> venv -> type.
vl/n  : vbind vnil V (var z) (vcons V vnil).
vl/c  : vbind (vcons V G1) V2 (var (s N)) (vcons V2 (vcons V G1)) <- vbind G1 V (var N) _.

vsize : venv -> exp -> type.
vf/n   : vsize vnil (var z).
vf/c   : vsize (vcons _ G) (var (s N)) <- vsize G (var N).

vlookup: venv -> exp -> val -> type.
vl  : vlookup G (var N) V
  <- vsize G (var S)
  <- add N M S
  <- vlookup-zero G (var M) V.


tlookup-zero: tenv -> exp -> tpe -> type.
tl/hit  : tlookup-zero (tcons V G) (var z) V.
tl/miss : tlookup-zero (tcons _ G) (var (s N)) V <- tlookup-zero G (var N) V.

tbind : tenv -> tpe -> exp -> tenv -> type.
tl/n  : tbind tnil V (var z) (tcons V tnil).
tl/c  : tbind (tcons V G1) V2 (var (s N)) (tcons V2 (tcons V G1)) <- tbind G1 V (var N) _.

tsize : tenv -> exp -> type.
tf/n   : tsize tnil (var z).
tf/c   : tsize (tcons _ G) (var (s N)) <- tsize G (var N).

%worlds () (tsize _ _).

tlookup: tenv -> exp -> tpe -> type.
tl  : tlookup G (var N) V
  <- tsize G (var S)
  <- add N M S
  <- tlookup-zero G (var M) V.

% tlookupa: tenv -> exp -> tpe -> type.
% tl/hita  : tlookupa (tcons V G) (var N) V <- tfresh G (var N).
% tl/missa : tlookupa (tcons _ G) (var N) V <- tlookupa G (var N) V.



% Partial ordering on environments

sub-env: tenv -> tenv -> type.

sub-env/refl: sub-env G G.
sub-env/ext: sub-env G1 (tcons Z G2) <- sub-env G1 G2.


sub-env-trans: sub-env G1 G2 -> sub-env G2 G3 -> sub-env G1 G3 -> type.
%mode sub-env-trans +A +B -C.

- : sub-env-trans S sub-env/refl S.
- : sub-env-trans S1 (sub-env/ext S2) (sub-env/ext S3) <- sub-env-trans S1 S2 S3.

%worlds () (sub-env-trans _ _ _).
%total A (sub-env-trans _ A _).


minmax-env: tenv -> tenv -> tenv -> tenv -> type.
mm-env/1: minmax-env G1 G2 G1 G2 <- sub-env G1 G2.
mm-env/2: minmax-env G1 G2 G2 G1 <- sub-env G2 G1.


% Diamond / common prefix property

sub-env-dia: sub-env G1 GT -> sub-env G2 GT -> minmax-env G1 G2 GS GU -> type.
%mode sub-env-dia +A +B -C.

- : sub-env-dia sub-env/refl S (mm-env/2 S).
- : sub-env-dia (sub-env/ext S1) sub-env/refl (mm-env/1 (sub-env/ext S1)).
- : sub-env-dia (sub-env/ext S1) (sub-env/ext S2) MM <- sub-env-dia S1 S2 MM.

%worlds () (sub-env-dia _ _ _).
%total A (sub-env-dia A _ _).




%{ ------- subtyping ------ }%

path-eval: tenv -> exp -> tpe -> type.

wf-tp : tenv -> tpe -> type.

sub-tp : tenv -> tpe -> tenv -> tpe -> type.

topt : type.
tnone: topt.
tsome: tpe -> topt.

exp-tp: tpe -> nat -> topt -> type.

exp-tp/top  : exp-tp top N tnone.
exp-tp/bot  : exp-tp bot N tnone.
exp-tp/fun  : exp-tp (arrow N1 T1 T2) N2 tnone.
exp-tp/recv : exp-tp (recv N1 T) N2 tnone.
exp-tp/rect : exp-tp (rect N T1 T2) N (tsome (rect N T1 T2)).
exp-tp/rectn: exp-tp (rect N1 T1 T2) N2 tnone
              <- ne N1 N2.
exp-tp/and1 : exp-tp (and T1 T2) N (tsome T1')
              <- exp-tp T2 N tnone
              <- exp-tp T1 N (tsome T1').
exp-tp/and2 : exp-tp (and T1 T2) N (tsome T2')
              <- exp-tp T2 N (tsome T2')
              <- exp-tp T1 N tnone.

%% TODO: interesting cases

tlookexp: tenv -> exp -> tpe -> type.
tle: tlookexp G (var N) (rect LN T1 T2)  <- exp-tp T0 LN (tsome (rect LN T1 T2)) <- tlookup G (var N) T0.

pev  : path-eval G E (rect N TS TU) <- wf-tp G (rect N TS TU) <- tlookexp G E (rect N TS TU).


sub-tp/top  : sub-tp G1 T G2 top <- wf-tp G1 T.
sub-tp/bot  : sub-tp G1 bot G2 T <- wf-tp G2 T.

sub-tp/fun  : sub-tp G1 (arrow N T1 T2) G2 (arrow N T3 T4)
              <- sub-tp G2 T3 G1 T1
              <- sub-tp G1 T2 G2 T4.

sub-tp/rect : sub-tp G1 (rect N T1 T2) G2 (rect N T3 T4)
              <- sub-tp G1 T1 G1 T2
              <- sub-tp G2 T3 G2 T4

              <- sub-tp G2 T3 G1 T1
              <- sub-tp G1 T2 G2 T4.

sub-tp/recv : sub-tp G1 (recv N T1) G2 (recv N T2)
              <- sub-tp G1 T1 G2 T2.

sub-tp/tsel1 : sub-tp G1 (tsel E1 N) G2 T2
              <- path-eval G1 E1 (rect N T1 T1U)
              <- sub-tp G1 T1U G2 T2.

sub-tp/tsel2 : sub-tp G1 T1 G2 (tsel E2 N)
              <- path-eval G2 E2 (rect N T2 T2U)
              <- sub-tp G1 T1 G2 T2.

sub-tp/tselx : sub-tp G1 (tsel E N) G2 (tsel E N)
              <- sub-env G G2
              <- sub-env G G1
              <- path-eval G E (rect N T2 T2U)
              <- sub-tp G2 (rect N T2 T2U) G1 (rect N T2 T2U)
              <- sub-tp G1 (rect N T2 T2U) G2 (rect N T2 T2U).


sub-tp/tbind1 : sub-tp G1 (bind N G0 TN) G2 T2
              <- sub-tp (tcons TN G0) TN G2 T2
              <- tsize G0 (var N)
              <- sub-env G0 G1.


sub-tp/tbind2 : sub-tp G1 T1 G2 (bind N G0 TN)
              <- sub-tp G1 T1 (tcons TN G0) TN   %% upper bound (trans: bind2-bind1 case in trans)
              <- sub-tp G1 T1 (tcons T1' G0) TN
              <- sub-tp G1 T1 G1' T1'            %% built-in slack (trans: T1-bind2)
              <- tsize G0 (var N)
              <- sub-env G0 G2.


sub-tp/and1a : sub-tp G1 (and T1 T2) G2 T3
              <- wf-tp G1 T2
              <- sub-tp G1 T1 G2 T3.

sub-tp/and1b : sub-tp G1 (and T1 T2) G2 T3
              <- sub-tp G1 T2 G2 T3
              <- wf-tp G1 T1.

sub-tp/and2 : sub-tp G1 T1 G2 (and T2 T3)
              <- sub-tp G1 T1 G2 T3
              <- sub-tp G1 T1 G2 T2.




wf-tp/top  : wf-tp G1 top.
wf-tp/bot  : wf-tp G1 bot.

wf-tp/fun  : wf-tp G1 (arrow N T1 T2)
              <- wf-tp G1 T1
              <- wf-tp G1 T2.

wf-tp/rect : wf-tp G1 (rect N T1 T2)
              <- wf-tp G1 T1
              <- wf-tp G1 T2
              <- sub-tp G1 T1 G1 T2. % T1 <: T2 required for transitivity

wf-tp/recv : wf-tp G1 (recv N T1)
              <- wf-tp G1 T1.

wf-tp/tsel : wf-tp G1 (tsel E1 N)
              <- path-eval G1 E1 (rect N T1 T1U).

wf-tp/tbind : wf-tp G1 (bind N G0 TN)
              <- wf-tp (tcons TN G0) TN
              <- tsize G0 (var N)
              <- sub-env G0 G1.

wf-tp/and  : wf-tp G1 (and T1 T2)
              <- wf-tp G1 T2
              <- wf-tp G1 T1.




% Subtyping with explicit equality case

subeq-tp : tenv -> tpe -> tenv -> tpe -> type.

% subeq-tp/eq  : subeq-tp G1 T G2 T <- wf-tp G T <- sub-env G G1 <- sub-env G G2.
subeq-tp/sub : subeq-tp G1 T1 G2 T2 <- sub-tp G1 T1 G2 T2.





% Extending environments preserves lookup


extend-wf-lkpz: tlookup-zero G (var N) T -> {Z: tpe} tlookup-zero (tcons Z G) (var (s N)) T -> type.
%mode extend-wf-lkpz +A +B -D.
- : extend-wf-lkpz tl/hit _ (tl/miss tl/hit).
- : extend-wf-lkpz (tl/miss A) _ (tl/miss B) <- extend-wf-lkpz A _ B.
%worlds () (extend-wf-lkpz _ _ _).
%total A (extend-wf-lkpz A _ _).

size-inc: tsize G (var N) -> {Z: tpe} tsize (tcons Z G) (var (s N)) -> type.
%mode size-inc +A +B -D.
- : size-inc tf/n T (tf/c tf/n).
- : size-inc (tf/c S) T (tf/c S') <- size-inc S _ S'.
%worlds () (size-inc _ _ _).
%total A (size-inc A _ _).



extend-wf-lkp: tlookup G (var N) T -> {Z: tpe} tlookup (tcons Z G) (var N) T -> type.
%mode extend-wf-lkp +A +B -C.
- : extend-wf-lkp (tl L A S) Z (tl L' A' S')
      <- size-inc S Z S'
      <- add-inc A A'
      <- extend-wf-lkpz L Z L'.
%worlds () (extend-wf-lkp _ _ _).
%total A (extend-wf-lkp A _ _).

extend-wf-lkpe: tlookexp G (var N) T -> {Z: tpe} tlookexp (tcons Z G) (var N) T -> type.
%mode extend-wf-lkpe +A +B -C.
- : extend-wf-lkpe (tle L E) Z (tle L' E) <- extend-wf-lkp L Z L'.
%worlds () (extend-wf-lkpe _ _ _).
%total A (extend-wf-lkpe A _ _).


extend-wf-lkp-mult: tlookup G (var N) T -> sub-env G G1 -> tlookup G1 (var N) T -> type.
%mode extend-wf-lkp-mult +A +B -C.
- : extend-wf-lkp-mult L sub-env/refl L.
- : extend-wf-lkp-mult L (sub-env/ext S) L2
    <- extend-wf-lkp-mult L S L1
    <- extend-wf-lkp L1 _ L2.
%worlds () (extend-wf-lkp-mult _ _ _).
%total A (extend-wf-lkp-mult _ A _).

extend-wf-lkpe-mult: tlookexp G (var N) T -> sub-env G G1 -> tlookexp G1 (var N) T -> type.
%mode extend-wf-lkpe-mult +A +B -C.
- : extend-wf-lkpe-mult (tle L E) Z (tle L' E) <- extend-wf-lkp-mult L Z L'.
%worlds () (extend-wf-lkpe-mult _ _ _).
%total A (extend-wf-lkpe-mult _ A _).





% Uniqueness of lookup

same: tpe -> tpe -> type.
ident: same T T.

% same-refl: same T1 T2 -> same T2 T1 -> type

lookup-zero-same: tlookup-zero G2 E T1 -> tlookup-zero G2 E T2 -> same T1 T2 -> type.
%mode lookup-zero-same +P1 +P2 -SBT.

- : lookup-zero-same tl/hit tl/hit ident.
- : lookup-zero-same (tl/miss A) (tl/miss B) X <- lookup-zero-same A B X.

%worlds () (lookup-zero-same _ _ _).
%total {T2} (lookup-zero-same T2 _ _).



size-eq: tsize G2 (var N1) -> tsize G2 (var N2) -> eq N1 N2 -> type.
%mode size-eq +P1 +P2 -SBT.

- : size-eq tf/n tf/n eq/z.
- : size-eq (tf/c A) (tf/c B) (eq/s X) <- size-eq A B X.

%worlds () (size-eq _ _ _).
%total {T2} (size-eq T2 _ _).



lookup-zero-eq: tlookup-zero G2 (var N1) (rect LN T1 T3) -> tlookup-zero G2 (var N2) (rect LN T2 T4) -> eq N1 N2
  -> same T1 T2 -> same T3 T4 -> type.
%mode lookup-zero-eq +P1 +P2 +E -SBT -SBT2.

- : lookup-zero-eq tl/hit tl/hit eq/z ident ident.
- : lookup-zero-eq (tl/miss A) (tl/miss B) (eq/s E) X Y <- lookup-zero-eq A B E X Y.

%worlds () (lookup-zero-eq _ _ _ _ _).
%total {T2} (lookup-zero-eq T2 _ _ _ _).


lookup-eq: tlookup G2 (var N1) (rect LN T1 T3) -> tlookup G2 (var N2) (rect LN T2 T4) -> eq N1 N2
  -> same T1 T2 -> same T3 T4 -> type.
%mode lookup-eq +P1 +P2 +E -SBT -SBT.

- : lookup-eq (tl L1 A1 F1) (tl L2 A2 F2) EN X Y
        <- size-eq F1 F2 ES
        <- sub-eq EN ES A1 A2 EM
        <- lookup-zero-eq L1 L2 EM X Y.

%worlds () (lookup-eq _ _ _ _ _).
%total {T2} (lookup-eq T2 _ _ _ _).



lookup-zero-eq0: tlookup-zero G2 (var N1) T1 -> tlookup-zero G2 (var N2) T2 -> eq N1 N2
  -> same T1 T2 -> type.
%mode lookup-zero-eq0 +P1 +P2 +E -SBT.

- : lookup-zero-eq0 tl/hit tl/hit eq/z ident.
- : lookup-zero-eq0 (tl/miss A) (tl/miss B) (eq/s E) X <- lookup-zero-eq0 A B E X.

%worlds () (lookup-zero-eq0 _ _ _ _).
%total {T2} (lookup-zero-eq0 T2 _ _ _).


lookup-eq0: tlookup G2 (var N1) T1 -> tlookup G2 (var N2) T2 -> eq N1 N2
  -> same T1 T2 -> type.
%mode lookup-eq0 +P1 +P2 +E -SBT.

- : lookup-eq0 (tl L1 A1 F1) (tl L2 A2 F2) EN X
        <- size-eq F1 F2 ES
        <- sub-eq EN ES A1 A2 EM
        <- lookup-zero-eq0 L1 L2 EM X.

%worlds () (lookup-eq0 _ _ _ _).
%total {T2} (lookup-eq0 T2 _ _ _).



false: type.

ne-irrefl: ne N N -> false -> type.
%mode ne-irrefl +A -B.
- : ne-irrefl (ne/s NE) F <- ne-irrefl NE F.
%worlds () (ne-irrefl _ _).
%total (A) (ne-irrefl A _).

no-eq: false -> {T1}{T2} same T1 T2 -> type.
%mode no-eq +A +B +C -D.
%worlds () (no-eq _ _ _ _).
%total (A) (no-eq A _ _ _).


expand-eq: exp-tp T LN (tsome (rect LN T1 T3)) -> exp-tp T LN (tsome (rect LN T2 T4))
-> same T1 T2 -> same T3 T4 -> type.
%mode expand-eq +P1 +P2 -SBT -SBT.

- : expand-eq exp-tp/rect exp-tp/rect ident ident.
- : expand-eq (exp-tp/and1 ES1 EN1) (exp-tp/and1 ES2 EN2) S1 S2 <- expand-eq ES1 ES2 S1 S2.
- : expand-eq (exp-tp/and2 EN1 ES1) (exp-tp/and2 EN2 ES2) S1 S2 <- expand-eq ES1 ES2 S1 S2.

- : expand-eq (exp-tp/and2 (exp-tp/rectn (N1)) exp-tp/rect)
         (exp-tp/and1 exp-tp/rect (exp-tp/rectn (N2))) S1 S2
            <- ne-irrefl N1 F <- no-eq F _ _ S1 <- no-eq F _ _ S2.

- : expand-eq (exp-tp/and1 exp-tp/rect (exp-tp/rectn (N1)))
         (exp-tp/and2 (exp-tp/rectn (N2)) exp-tp/rect) S1 S2
            <- ne-irrefl N1 F <- no-eq F _ _ S1 <- no-eq F _ _ S2.

%worlds () (expand-eq _ _ _ _).
%total {T2} (expand-eq T2 _ _ _).


eq-exp-low: same T1 T1' -> exp-tp T1 N T2 -> exp-tp T1' N T2 -> type.
%mode eq-exp-low +P1 +P2 -SBT.

- : eq-exp-low ident S S.

%worlds () (eq-exp-low _ _ _).
%total {T2} (eq-exp-low T2 _ _).
%reduces N3 <= N2 (eq-exp-low _ N2  N3).

lookexp-eq: tlookexp G2 (var N1) (rect LN T1 T3) -> tlookexp G2 (var N2) (rect LN T2 T4) -> eq N1 N2
  -> same T1 T2 -> same T3 T4 -> type.
%mode lookexp-eq +P1 +P2 +E -SBT -SBT.

- : lookexp-eq (tle L1 E1) (tle L2 E2) E S1 S2
      <- lookup-eq0 L1 L2 E X
      <- eq-exp-low X E1 E1'
      <- expand-eq E1' E2 S1 S2.

%worlds () (lookexp-eq _ _ _ _ _).
%total {T2} (lookexp-eq T2 _ _ _ _).


eq-rect: same T1 T1' -> same T2 T2' -> {LN:nat} same (rect LN T1 T2) (rect LN T1' T2') -> same (rect LN T1' T2') (rect LN T1 T2) -> type.
%mode eq-rect +P1 +P2 +LN -SBT -SBT2.

- : eq-rect ident ident _ ident ident.

%worlds () (eq-rect _ _ _ _ _).
%total {T2} (eq-rect T2 _ _ _ _).



eq-low: same T1 T1' -> sub-tp G1 T1 G2 T2 -> sub-tp G1 T1' G2 T2 -> type.
%mode eq-low +P1 +P2 -SBT.

- : eq-low ident S S.

%worlds () (eq-low _ _ _).
%total {T2} (eq-low T2 _ _).
%reduces N3 <= N2 (eq-low _ N2  N3).


eq-high: same T2 T2' -> sub-tp G1 T1 G2 T2 -> sub-tp G1 T1 G2 T2' -> type.
%mode eq-high +P1 +P2 -SBT.

- : eq-high ident S S.

%worlds () (eq-high _ _ _).
%total {T2} (eq-high T2 _ _).
%reduces N3 <= N2 (eq-high _ N2  N3).

eq-wf: same T1 T1' -> wf-tp G1 T1 -> wf-tp G1 T1' -> type.
%mode eq-wf +P1 +P2 -SBT.

- : eq-wf ident S S.

%worlds () (eq-wf _ _ _).
%total {T2} (eq-wf T2 _ _).
%reduces N3 <= N2 (eq-wf _ N2  N3).



eq-pev: same T1 T1' -> path-eval G1 N T1 -> path-eval G1 N T1' -> type.
%mode eq-pev +P1 +P2 -SBT.

- : eq-pev ident S S.

%worlds () (eq-pev _ _ _).
%total {T2} (eq-pev T2 _ _).
%reduces N3 <= N2 (eq-pev _ N2  N3).






% Extending environments preserves subtyping

extend-wf-tp: wf-tp G1 T1 -> {Z: tpe} wf-tp (tcons Z G1) T1 -> type.
%mode extend-wf-tp +A +B -C.

extend-wf-pev : path-eval G1 E T1 -> {Z: tpe} path-eval (tcons Z G1) E T1 -> type.
%mode extend-wf-pev +A +B -C.



extend-sub-tp: sub-tp G1 T1 G2 T2 -> {Z: tpe}
  sub-tp (tcons Z G1) T1 (tcons Z G2) T2 ->
  sub-tp (tcons Z G1) T1 G2 T2 ->
  sub-tp G1 T1 (tcons Z G2) T2 ->
  type.
%mode extend-sub-tp +A +B -C -D -E.


- : extend-wf-pev (pev L W) T (pev L1 W1)
      <- extend-wf-tp W T W1
      <- extend-wf-lkpe L T L1.



- : extend-wf-tp wf-tp/top T wf-tp/top.
- : extend-wf-tp wf-tp/bot T wf-tp/bot.
- : extend-wf-tp (wf-tp/fun W1 W2) T (wf-tp/fun W1' W2')
      <- extend-wf-tp W1 _ W1'
      <- extend-wf-tp W2 _ W2'.
- : extend-wf-tp (wf-tp/rect ST W1 W2) T (wf-tp/rect ST' W1' W2')
      <- extend-sub-tp ST _ ST' _ _
      <- extend-wf-tp W1 _ W1'
      <- extend-wf-tp W2 _ W2'.
- : extend-wf-tp (wf-tp/recv W1) T (wf-tp/recv W1')
      <- extend-wf-tp W1 _ W1'.
- : extend-wf-tp (wf-tp/tsel P) T (wf-tp/tsel P1)
      <- extend-wf-pev P T P1.

- : extend-wf-tp (wf-tp/tbind SE S W) T (wf-tp/tbind (sub-env/ext SE) S W).

- : extend-wf-tp (wf-tp/and W1 W2) T (wf-tp/and W1' W2')
      <- extend-wf-tp W1 _ W1'
      <- extend-wf-tp W2 _ W2'.



- : extend-sub-tp (sub-tp/top ST) T (sub-tp/top ST') (sub-tp/top ST') (sub-tp/top ST)
      <- extend-wf-tp ST _ ST'.
- : extend-sub-tp (sub-tp/bot ST) T (sub-tp/bot ST') (sub-tp/bot ST) (sub-tp/bot ST')
      <- extend-wf-tp ST _ ST'.
- : extend-sub-tp (sub-tp/fun ST1 ST2) T (sub-tp/fun ST1' ST2') (sub-tp/fun ST1A ST2B) (sub-tp/fun ST1B ST2A)
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B
      <- extend-sub-tp ST2 _ ST2' ST2A ST2B.
- : extend-sub-tp (sub-tp/rect ST1 ST2 B2 B1) T (sub-tp/rect ST1' ST2' B2' B1') (sub-tp/rect ST1A ST2B B2 B1') (sub-tp/rect ST1B ST2A B2' B1)
      <- extend-sub-tp B2 _ B2' _ _
      <- extend-sub-tp B1 _ B1' _ _
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B
      <- extend-sub-tp ST2 _ ST2' ST2A ST2B.
- : extend-sub-tp (sub-tp/recv ST1) T (sub-tp/recv ST1') (sub-tp/recv ST1A) (sub-tp/recv ST1B)
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B.
- : extend-sub-tp (sub-tp/tsel1 ST P) T
    (sub-tp/tsel1 ST' P') (sub-tp/tsel1 STA P') (sub-tp/tsel1 STB P)
      <- extend-wf-pev P _ P'
      <- extend-sub-tp ST _ ST' STA STB.
- : extend-sub-tp (sub-tp/tsel2 ST P) T
    (sub-tp/tsel2 ST' P') (sub-tp/tsel2 STA P) (sub-tp/tsel2 STB P')
      <- extend-wf-pev P _ P'
      <- extend-sub-tp ST _ ST' STA STB.

- : extend-sub-tp (sub-tp/tselx ST ST2 P S1 S2) T
    (sub-tp/tselx ST' ST2' P (sub-env/ext S1) (sub-env/ext S2))
    (sub-tp/tselx STA ST2B P (sub-env/ext S1) S2)
    (sub-tp/tselx STB ST2A P S1 (sub-env/ext S2))
      <- extend-sub-tp ST _ ST' STA STB
      <- extend-sub-tp ST2 _ ST2' ST2A ST2B.


- : extend-sub-tp (sub-tp/tbind1 SE S ST) T
     (sub-tp/tbind1 (sub-env/ext SE) S STC1)
     (sub-tp/tbind1 (sub-env/ext SE) S ST)
     (sub-tp/tbind1 SE S STC1)
     <- extend-sub-tp ST T STA1 STB1 STC1
     .


- : extend-sub-tp (sub-tp/tbind2 SE S ST1 ST2 ST3) T
     (sub-tp/tbind2 (sub-env/ext SE) S STB1 STB2 STB3)
     (sub-tp/tbind2 SE S STB1 STB2 STB3)
     (sub-tp/tbind2 (sub-env/ext SE) S ST1 ST2 ST3)
     <- extend-sub-tp ST1 T STA1 STB1 STC1
     <- extend-sub-tp ST2 T STA2 STB2 STC2
     <- extend-sub-tp ST3 T STA3 STB3 STC3
     .

- : extend-sub-tp (sub-tp/and1a ST1 W2) T (sub-tp/and1a ST1' W2') (sub-tp/and1a ST1A W2') (sub-tp/and1a ST1B W2)
      <- extend-wf-tp W2 _ W2'
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B.

- : extend-sub-tp (sub-tp/and1b W1 ST2) T (sub-tp/and1b W1' ST2') (sub-tp/and1b W1' ST2A) (sub-tp/and1b W1 ST2B)
      <- extend-wf-tp W1 _ W1'
      <- extend-sub-tp ST2 _ ST2' ST2A ST2B.


- : extend-sub-tp (sub-tp/and2 ST1 ST2) T (sub-tp/and2 ST1' ST2') (sub-tp/and2 ST1A ST2A) (sub-tp/and2 ST1B ST2B)
      <- extend-sub-tp ST1 _ ST1' ST1A ST1B
      <- extend-sub-tp ST2 _ ST2' ST2A ST2B.


%worlds () (extend-wf-tp _ _ _)(extend-sub-tp _ _ _ _ _)(extend-wf-pev _ _ _).
%total (A B C) (extend-wf-tp A _ _)(extend-sub-tp B _ _ _ _)(extend-wf-pev C _ _).

extend-sub-tp12: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp (tcons Z G1) T1 (tcons Z G2) T2 -> type.
%mode extend-sub-tp12 +A +B -C.
- : extend-sub-tp12 ST Z ST' <- extend-sub-tp ST Z ST' _ _.
%worlds () (extend-sub-tp12 _ _ _).
%total A (extend-sub-tp12 A _ _).

extend-sub-tp1: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp (tcons Z G1) T1 G2 T2 -> type.
%mode extend-sub-tp1 +A +B -C.
- : extend-sub-tp1 ST Z ST' <- extend-sub-tp ST Z _ ST' _.
%worlds () (extend-sub-tp1 _ _ _).
%total A (extend-sub-tp1 A _ _).

extend-sub-tp2: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp G1 T1 (tcons Z G2) T2 -> type.
%mode extend-sub-tp2 +A +B -C.
- : extend-sub-tp2 ST Z ST' <- extend-sub-tp ST Z _ _ ST'.
%worlds () (extend-sub-tp2 _ _ _).
%total A (extend-sub-tp2 A _ _).











extend-subeq-tp1: subeq-tp G1 T1 G2 T2 -> {Z: tpe} subeq-tp (tcons Z G1) T1 G2 T2 -> type.
%mode extend-subeq-tp1 +A +B -C.
% - : extend-subeq-tp1 (subeq-tp/eq SX2 SX1 W) Z (subeq-tp/eq SX2 (sub-env/ext SX1) W).
- : extend-subeq-tp1 (subeq-tp/sub S) Z (subeq-tp/sub S') <- extend-sub-tp1 S _ S'.
%worlds () (extend-subeq-tp1 _ _ _).
%total A (extend-subeq-tp1 A _ _).

extend-subeq-tp2: subeq-tp G1 T1 G2 T2 -> {Z: tpe} subeq-tp G1 T1 (tcons Z G2) T2 -> type.
%mode extend-subeq-tp2 +A +B -C.
% - : extend-subeq-tp2 (subeq-tp/eq SX2 SX1 W) Z (subeq-tp/eq (sub-env/ext SX2) SX1 W).
- : extend-subeq-tp2 (subeq-tp/sub S) Z (subeq-tp/sub S') <- extend-sub-tp2 S _ S'.
%worlds () (extend-subeq-tp2 _ _ _).
%total A (extend-subeq-tp2 A _ _).






extend-wf-tp-mult: wf-tp G1 T1 -> sub-env G1 G2 -> wf-tp G2 T1 -> type.
%mode extend-wf-tp-mult +A +B -C.
- : extend-wf-tp-mult W sub-env/refl W.
- : extend-wf-tp-mult W (sub-env/ext S) W2
    <- extend-wf-tp-mult W S W1
    <- extend-wf-tp W1 _ W2.
%worlds () (extend-wf-tp-mult _ _ _).
%total A (extend-wf-tp-mult _ A _).


extend-sub-tp1-mult: sub-tp G1 T1 G2 T2 -> sub-env G1 G3 -> sub-tp G3 T1 G2 T2 -> type.
%mode extend-sub-tp1-mult +A +B -C.
- : extend-sub-tp1-mult ST sub-env/refl ST.
- : extend-sub-tp1-mult ST (sub-env/ext S) ST2
    <- extend-sub-tp1-mult ST S ST1
    <- extend-sub-tp1 ST1 _ ST2.
%worlds () (extend-sub-tp1-mult _ _ _).
%total A (extend-sub-tp1-mult _ A _).

extend-sub-tp2-mult: sub-tp G1 T1 G2 T2 -> sub-env G2 G3 -> sub-tp G1 T1 G3 T2 -> type.
%mode extend-sub-tp2-mult +A +B -C.
- : extend-sub-tp2-mult ST sub-env/refl ST.
- : extend-sub-tp2-mult ST (sub-env/ext S) ST2
    <- extend-sub-tp2-mult ST S ST1
    <- extend-sub-tp2 ST1 _ ST2.
%worlds () (extend-sub-tp2-mult _ _ _).
%total A (extend-sub-tp2-mult _ A _).




extend-wf-pev-mult : path-eval G E T -> sub-env G G1 -> path-eval G1 E T -> type.
%mode extend-wf-pev-mult +A +B -C.

- : extend-wf-pev-mult (pev L W) S (pev L1 W1)
      <- extend-wf-tp-mult W S W1
      <- extend-wf-lkpe-mult L S L1.

%worlds () (extend-wf-pev-mult _ _ _).
%total (A) (extend-wf-pev-mult A _ _).





% Extract wf from subtyping

extract-wf : sub-tp G1 T1 G2 T2 -> wf-tp G1 T1 -> wf-tp G2 T2 -> type.
%mode extract-wf +SBT1 -SBT2 -SBT3.

extract-wf-pev : path-eval G E T -> wf-tp G T -> type.
%mode extract-wf-pev +P -S.

- : extract-wf-pev (pev L W) W.


- : extract-wf (sub-tp/top W) W wf-tp/top.
- : extract-wf (sub-tp/bot W) wf-tp/bot W.
- : extract-wf (sub-tp/fun (ST1:sub-tp G1 T2 G2 T4) (ST2:sub-tp G2 T3 G1 T1))
        (wf-tp/fun W2 W1) (wf-tp/fun W4 W3)
      <- extract-wf ST1 W2 W4
      <- extract-wf ST2 W3 W1.
- : extract-wf (sub-tp/rect ST1 ST2 B2 B1) (wf-tp/rect B1 W2 W1) (wf-tp/rect B2 W4 W3) %% FIXME: T1<:T2 & T3 <: T4
      <- extract-wf ST1 W2 W4
      <- extract-wf ST2 W3 W1.
- : extract-wf (sub-tp/recv ST) (wf-tp/recv W1) (wf-tp/recv W2)
      <- extract-wf ST W1 W2.

- : extract-wf (sub-tp/tsel1 ST P)
      (wf-tp/tsel P) W2
      <- extract-wf ST _ W2. % W1 W2

- : extract-wf (sub-tp/tsel2 ST P)
      W1 (wf-tp/tsel P)
      <- extract-wf ST W1 _. % W1 W2

- : extract-wf (sub-tp/tselx ST ST2 P S1 S2)
      (wf-tp/tsel P1)
      (wf-tp/tsel P2)
      <- extend-wf-pev-mult P S1 P1
      <- extend-wf-pev-mult P S2 P2.

- : extract-wf (sub-tp/tbind1 ES S ST) (wf-tp/tbind ES S WU) W2
      <- extract-wf ST WU W2.

- : extract-wf (sub-tp/tbind2 ES S SW SE SU) W1 (wf-tp/tbind ES S W2)
      <- extract-wf SU W1 W2.

- : extract-wf (sub-tp/and1a S1 W2)
      (wf-tp/and W1 W2)
      W3
      <- extract-wf S1 W1 W3.

- : extract-wf (sub-tp/and1b W1 S2)
      (wf-tp/and W1 W2)
      W3
      <- extract-wf S2 W2 W3.

- : extract-wf (sub-tp/and2 S1 S2)
      W1
      (wf-tp/and W3 W4)
      <- extract-wf S1 W1 W3
      <- extract-wf S2 W2 W4.

%worlds () (extract-wf _ _ _)(extract-wf-pev _ _).
%total (A B) (extract-wf A _ _)(extract-wf-pev B _).





%% Diamond property w.r.t. environment for well formed types

wf-tp-min:
  wf-tp G1 T -> wf-tp G2 T -> minmax-env G1 G2 GS GU ->
  wf-tp GS T -> sub-env GS G1 -> sub-env GS G2 ->
  type.
%mode wf-tp-min +A +B +C -F -G -H.

- : wf-tp-min W1 W2 (mm-env/1 S12) W1 sub-env/refl S12.
- : wf-tp-min W1 W2 (mm-env/2 S21) W2 S21 sub-env/refl.

%worlds () (wf-tp-min _ _ _ _ _ _).
%total A (wf-tp-min A _ _ _ _ _ ).


wf-tp-dia:
  wf-tp GT T -> wf-tp G1 T -> wf-tp G2 T -> sub-env G1 GT -> sub-env G2 GT ->
  wf-tp G T -> sub-env G G1 -> sub-env G G2 ->
  type.
%mode wf-tp-dia +A +B +C +D +E -F -G -H.

- : wf-tp-dia WT W1 W2 S1 S2 W0 S01 S02
     <- sub-env-dia S1 S2 MM
     <- wf-tp-min W1 W2 MM W0 S01 S02.


%worlds () (wf-tp-dia _ _ _ _ _ _ _ _).
%total A (wf-tp-dia A _ _ _ _ _ _ _).


pev-tp-min:
  path-eval G1 N T -> path-eval G2 N T -> minmax-env G1 G2 GS GU ->
  path-eval GS N T -> sub-env GS G1 -> sub-env GS G2 ->
  type.
%mode pev-tp-min +A +B +C -F -G -H.

- : pev-tp-min W1 W2 (mm-env/1 S12) W1 sub-env/refl S12.
- : pev-tp-min W1 W2 (mm-env/2 S21) W2 S21 sub-env/refl.

%worlds () (pev-tp-min _ _ _ _ _ _).
%total A (pev-tp-min A _ _ _ _ _ ).


pev-tp-dia:
  path-eval GT N T -> path-eval G1 N T -> path-eval G2 N T -> sub-env G1 GT -> sub-env G2 GT ->
  path-eval G N T -> sub-env G G1 -> sub-env G G2 ->
  type.
%mode pev-tp-dia +A +B +C +D +E -F -G -H.

- : pev-tp-dia WT W1 W2 S1 S2 W0 S01 S02
     <- sub-env-dia S1 S2 MM
     <- pev-tp-min W1 W2 MM W0 S01 S02.


%worlds () (pev-tp-dia _ _ _ _ _ _ _ _).
%total A (pev-tp-dia A _ _ _ _ _ _ _).







%% In test8, Subtyping of type selections was not reflexive because of type bounds.
%% Now we have sub-tp/tselx, so reflexivity holds again.
%% The proofs depend on it again, as it enabled us to remove restrict-sub-tp,
%% which caused trouble for self types.

%% Subtyping is reflexive

sub-tp-refl :
  %% Input
  wf-tp G T ->
  %% Output
  sub-tp G T G T ->
  type.
%mode sub-tp-refl +WT -SBT.

-/bot : sub-tp-refl wf-tp/bot (sub-tp/bot wf-tp/bot).
-/top : sub-tp-refl wf-tp/top (sub-tp/top wf-tp/top).
-/fun : sub-tp-refl (wf-tp/fun T1 T2) (sub-tp/fun SBT1 SBT2)
   <- sub-tp-refl T1 SBT1
   <- sub-tp-refl T2 SBT2.
-/rect: sub-tp-refl (wf-tp/rect ST T1 T2) (sub-tp/rect SBT1 SBT2 ST ST)
   <- sub-tp-refl T1 SBT1
   <- sub-tp-refl T2 SBT2.
-/recv: sub-tp-refl (wf-tp/recv T1) (sub-tp/recv SBT1)
   <- sub-tp-refl T1 SBT1.
-/tsel: sub-tp-refl (wf-tp/tsel (pev L W)) (sub-tp/tselx ST ST (pev L W) sub-env/refl sub-env/refl)
   <- sub-tp-refl W ST.


-/tbind: sub-tp-refl (wf-tp/tbind SE S WU)
          (sub-tp/tbind1
             SE S (sub-tp/tbind2 SE S R R R))
          <- sub-tp-refl WU R.

-/tand: sub-tp-refl (wf-tp/and W1 W2) (sub-tp/and2 (sub-tp/and1a ST1 W2) (sub-tp/and1b W1 ST2))
   <- sub-tp-refl W1 ST1
   <- sub-tp-refl W2 ST2.


%worlds () (sub-tp-refl _ _).
%total T (sub-tp-refl T _).




subeq-tp-refl :
  %% Input
  wf-tp G T ->
  %% Output
  subeq-tp G T G T ->
  type.
%mode subeq-tp-refl +WT -SBT.

-/eq  : subeq-tp-refl W (subeq-tp/sub ST) <- sub-tp-refl W ST.

%worlds () (subeq-tp-refl _ _).
%total T (subeq-tp-refl T _).






%% Subtyping is transitive

sub-tp-trans-aux :
  %% Inputs
%  {G2:tenv}
%  {T2:tpe}
  wf-tp G2 T2 ->
  sub-tp G1 T1 G2 T2 ->
  sub-tp G2 T2 G3 T3 ->
  %% Output
  sub-tp G1 T1 G3 T3 ->
  type.
%mode sub-tp-trans-aux +T2 +SBT1 +SBT2 -SBT3.

-/top    : sub-tp-trans-aux _ S1 (sub-tp/top _) (sub-tp/top W) <- extract-wf S1 W _.
-/bot    : sub-tp-trans-aux _ (sub-tp/bot _) S2 (sub-tp/bot W) <- extract-wf S2 _ W.


-/fun-fun  : sub-tp-trans-aux
      (wf-tp/fun T2 T1)
            (sub-tp/fun SBT2 SBT1)
            (sub-tp/fun SBT4 SBT3)
            (sub-tp/fun SBT6 SBT5)
      <- sub-tp-trans-aux T1 SBT3 SBT1 SBT5
      <- sub-tp-trans-aux T2 SBT2 SBT4 SBT6.

-/rect-rect  : sub-tp-trans-aux
      (wf-tp/rect SB T2 T1)
            (sub-tp/rect SBT2 SBT1 B2 B1)
            (sub-tp/rect SBT4 SBT3 B4 B3)
            (sub-tp/rect SBT6 SBT5 B4 B1)
      <- sub-tp-trans-aux T1 SBT3 SBT1 SBT5
      <- sub-tp-trans-aux T2 SBT2 SBT4 SBT6.

-/recv-recv  : sub-tp-trans-aux
      (wf-tp/recv T1)
            (sub-tp/recv SBT1)
            (sub-tp/recv SBT3)
            (sub-tp/recv SBT5)
      <- sub-tp-trans-aux T1 SBT1 SBT3 SBT5.


%% case p.T < p.T && p.T < T3   -->   p.T < T3

-/tselx1  : sub-tp-trans-aux
      (wf-tp/tsel (pev (P0: (tlookexp G2 (var N) (rect LN T2 T2U))) (wf-tp/rect AB (WU: wf-tp G2 T2U) (W: wf-tp G2 T2)) ))

      (sub-tp/tselx (sub-tp/rect (SY24:sub-tp G1 T2UA G2 T2UA) SY31 SY34 SY12) _ (pev (P1: (tlookexp G0 (var N) (rect LN T2A T2UA))) (wf-tp/rect AB1 W1X W1Y)) (SX1: sub-env G0 G1) (SX2: sub-env G0 G2))

      (sub-tp/tsel1 (A2: sub-tp G2 T2UB G3 T3) (pev (P2: (tlookexp G2 (var N) (rect LN T2B T2UB))) (wf-tp/rect AB2 W2X W2Y)))
      (sub-tp/tsel1 SBT5 (pev PXX (wf-tp/rect AB11' W1X1' W1Y1')))


      <- extend-wf-pev-mult (pev P1 (wf-tp/rect AB1 W1X W1Y)) SX1 (pev PXX (wf-tp/rect AB11' W1X1' W1Y1'))
      <- extend-wf-pev-mult (pev P1 (wf-tp/rect AB1 W1X W1Y)) SX2 (pev P1' (wf-tp/rect AB1' W1X' W1Y'))

      <- eq-refl N Q
      <- lookexp-eq P0 P1' Q (S3: same T2  T2A) (S4: same T2U  T2UA)
      <- lookexp-eq P2 P1' Q (S1: same T2B T2A) (S2: same T2UB T2UA)

      <- eq-low S2 (A2: sub-tp G2 T2UB G3 T3) (A2': sub-tp G2 T2UA G3 T3)
      <- eq-wf S4 (WU: wf-tp G2 T2U) (WU': wf-tp G2 T2UA)

      <- sub-tp-trans-aux WU' SY24 A2' SBT5
      .


%% case T1 < p.T && p.T < p.T   -->   T1 < p.T

-/tselx2  : sub-tp-trans-aux
      (wf-tp/tsel (pev (P0: (tlookexp G2 (var N) (rect LN T2 T2U))) (wf-tp/rect AB (WU: wf-tp G2 T2U) (W: wf-tp G2 T2)) ))

      (sub-tp/tsel2 (A1: sub-tp G1 T1 G2 T2A) (pev (P1: (tlookexp G2 (var N) (rect LN T2A T2UA))) (wf-tp/rect AB1 W1X W1Y)))

      (sub-tp/tselx _ (sub-tp/rect SY24 SY31 SY34 SY12) (pev (P2: (tlookexp G0 (var N) (rect LN T2B T2UB))) (wf-tp/rect AB2 W2X W2Y)) (SX2: sub-env G0 G2) (SX3: sub-env G0 G3))

      (sub-tp/tsel2 SBT5 (pev PXX (wf-tp/rect AB2' W2X' W2Y')))


      <- extend-wf-pev-mult (pev P2 (wf-tp/rect AB2 W2X W2Y)) SX2 (pev P2' (wf-tp/rect AB21' W2X1' W2Y1'))
      <- extend-wf-pev-mult (pev P2 (wf-tp/rect AB2 W2X W2Y)) SX3 (pev PXX (wf-tp/rect AB2' W2X' W2Y'))

      <- eq-refl N Q
      <- lookexp-eq P0 P2' Q (S3: same T2  T2B) (S4: same T2U  T2UB)
      <- lookexp-eq P1 P2' Q (S1: same T2A T2B) (S2: same T2UA T2UB)

      <- eq-high S1 (A1: sub-tp G1 T1 G2 T2A) (A1': sub-tp G1 T1 G2 T2B)
      <- eq-wf S3 (W: wf-tp G2 T2) (W': wf-tp G2 T2B)

      <- sub-tp-trans-aux W' A1' SY31 (SBT5: sub-tp G1 T1 G3 T2B)
      .


-/tselx-tselx  : sub-tp-trans-aux
      (wf-tp/tsel (pev (P0: (tlookexp G2 (var N) (rect _ _ _))) WR0 ))

      (sub-tp/tselx ST11 ST12 (pev (P1: (tlookexp G0 (var N) (rect _ _ _))) WR1) (SX1: sub-env G0 G1) (SX2: sub-env G0 G2))

      (sub-tp/tselx ST21 ST22 (pev (P2: (tlookexp G0' (var N) (rect _ _ _))) WR2) (SX2': sub-env G0' G2) (SX3: sub-env G0' G3))

      (sub-tp/tselx ST31 ST32 (pev P3 W00) SX1x SX3x)

      <- eq-refl N Q

      <- extend-wf-pev-mult (pev P1 WR1) SX2 (pev P1' WR1')
      <- extend-wf-pev-mult (pev P2 WR2) SX2' (pev P2' WR2')

      <- lookexp-eq P2' P1' Q S1 S2
      <- eq-rect S1 S2 _ SR1 SR1x

      <- eq-low SR1 ST21 ST21'
      <- eq-low SR1x ST11 ST11'

      <- eq-high SR1 ST22 ST22'
      <- eq-high SR1x ST12 ST12'

      <- lookexp-eq P0 P1' Q S3 S4
      <- eq-rect S3 S4 _ SR3 SR3x
      <- eq-pev SR3 (pev P0 WR0) (pev P0' WR0')

      <- sub-tp-trans-aux WR0' ST11' ST21' ST31x
      <- sub-tp-trans-aux WR0' ST22' ST12' ST32x

      <- eq-low SR1 ST31x ST31xx %% TODO: reverse order somewhere above??
      <- eq-high SR1 ST31xx ST31

      <- eq-low SR1 ST32x ST32xx
      <- eq-high SR1 ST32xx ST32


      <- eq-pev SR1 (pev P2 WR2) (pev P2S WR2S)

      <- pev-tp-dia (pev P0' WR0') (pev P1 WR1) (pev P2S WR2S) SX2 SX2' (pev P3 W00) S01 S02

      <- sub-env-trans S01 SX1 SX1x
      <- sub-env-trans S02 SX3 SX3x
      .


-/tsel1  : sub-tp-trans-aux  % p.T1 < T2 <-- p:{T1} && T1 < T2
      W
      (sub-tp/tsel1 SBT1 P)
      SBT3
      (sub-tp/tsel1 SBT5 P)
      <- sub-tp-trans-aux W SBT1 SBT3 SBT5.

-/tsel2  : sub-tp-trans-aux  % T1 < p.T2 <-- p:{T1} && T1 < T2
      W
      SBT1
      (sub-tp/tsel2 SBT3 P)
      (sub-tp/tsel2 SBT5 P)
      <- sub-tp-trans-aux W SBT1 SBT3 SBT5.


%% case T1 < p.T2 && p.T2 < T3   -->   T1 < T3


-/tsel2-tsel1  : sub-tp-trans-aux  % T1 < p.T2 && p.T2 < T3 --> T1 < T3
      (wf-tp/tsel (pev (P0: (tlookexp G2 (var N) (rect LN T2 T2U))) (wf-tp/rect AB (WU: wf-tp G2 T2U) (W: wf-tp G2 T2)) ))
      (sub-tp/tsel2 (A1: sub-tp G1 T1 G2 T2A) (pev (P1: (tlookexp G2 (var N) (rect LN T2A T2UA))) (wf-tp/rect _ W1X W1Y)))
      (sub-tp/tsel1 (A2: sub-tp G2 T2UB G3 T3) (pev (P2: (tlookexp G2 (var N) (rect LN T2B T2UB))) (wf-tp/rect _ W2X W2Y)))
      (SBT5: sub-tp G1 T1 G3 T3)

      <- eq-refl N Q
      <- lookexp-eq P1 P0 Q (S1: same T2A T2) (S3: same T2UA T2U)
      <- lookexp-eq P2 P0 Q (S2: same T2B T2) (S4: same T2UB T2U)

      <- eq-high S1 A1 (A1': sub-tp G1 T1 G2 T2)
      <- eq-low  S4 A2 (A2': sub-tp G2 T2U G3 T3)

      <- sub-tp-trans-aux W A1' AB SBT3
      <- sub-tp-trans-aux WU SBT3 A2' SBT5.



%{
In the previous formulation of tbind2 we had a problem.

we have:

G1 T1 <: G2 T2
G2 T2 <: G3 {z=>T3}    <---    G2 T2 <: (G3,z:T2) T3

and we need to show:

G1 T2 <: G3 {z=>T3}    <---    G1 T1 <: (G3,z:T1) T3


but induction only gives us:   G1 T1 <: (G3,z:T2) T3

That's why we have explicit slack in tbind2.
}%


-/tbind2  : sub-tp-trans-aux
       W
       SBT1
       (sub-tp/tbind2 SE0 S SW SBT3 SU)
       (sub-tp/tbind2 SE0 S SW' SBT5 SU')

       <- sub-tp-trans-aux W SBT1 SW SW'
       <- sub-tp-trans-aux W SBT1 SU SU'
       <- sub-tp-trans-aux W SBT1 SBT3 SBT5.


-/tbind1 : sub-tp-trans-aux
       W
       (sub-tp/tbind1 SE S ST)
       SBT2
       (sub-tp/tbind1 SE S ST')
       <- sub-tp-trans-aux W ST SBT2 ST'.


-/tbind2-tbind1  : sub-tp-trans-aux
       (wf-tp/tbind SE0 WS0 WY0)
       (sub-tp/tbind2 SE1 S1 SW SBT1 SU)
       (sub-tp/tbind1 SE3 S3 SBT3)
       SBT5

       %% TODO: uniqueness lemmas for G0/SE/S

       <- sub-tp-trans-aux WY0 SU SBT3 SBT5.


-/tand1a : sub-tp-trans-aux
      W
      (sub-tp/and1a SBT1 W1)
      SBT3
      (sub-tp/and1a SBT5 W1)
      <- sub-tp-trans-aux W SBT1 SBT3 SBT5.

-/tand1b : sub-tp-trans-aux
      W
      (sub-tp/and1b W1 SBT1)
      SBT3
      (sub-tp/and1b W1 SBT5)
      <- sub-tp-trans-aux W SBT1 SBT3 SBT5.

-/tand2 : sub-tp-trans-aux
      W
      SBT1
      (sub-tp/and2 ST1 ST2)
      (sub-tp/and2 ST1' ST2')
      <- sub-tp-trans-aux W SBT1 ST1 ST1'
      <- sub-tp-trans-aux W SBT1 ST2 ST2'.

-/tand2-tand1a : sub-tp-trans-aux
      (wf-tp/and W1 W2)
      (sub-tp/and2 SBT1 _)
      (sub-tp/and1a SBT3 _)
      SBT5
      <- sub-tp-trans-aux W1 SBT1 SBT3 SBT5.

-/tand2-tand1b : sub-tp-trans-aux
      (wf-tp/and W1 W2)
      (sub-tp/and2 _ SBT1)
      (sub-tp/and1b _ SBT3)
      SBT5
      <- sub-tp-trans-aux W2 SBT1 SBT3 SBT5.

%worlds () (sub-tp-trans-aux _ _ _ _).
%total {T2 S1 S2} (sub-tp-trans-aux T2 S1 S2 _).




%% Corrollary to sub-tp-trans-aux that doesn't require us to provide
%% WF as an additional argument.

sub-tp-trans :
  %% Inputs
  sub-tp G1 T1 G2 T2 ->
  sub-tp G2 T2 G3 T3 ->
  %% Output
  sub-tp G1 T1 G3 T3 ->
  type.
%mode sub-tp-trans +SBT1 +SBT2 -SBT3.

-/i : sub-tp-trans SBT1 SBT2 SBT3
       <- extract-wf SBT1 T1 T2
       <- sub-tp-trans-aux T2 SBT1 SBT2 SBT3.

%worlds () (sub-tp-trans _ _ _).
%total {A} (sub-tp-trans A _ _).



subeq-tp-trans :
  %% Inputs
  subeq-tp G1 T1 G2 T2 ->
  subeq-tp G2 T2 G3 T3 ->
  %% Output
  subeq-tp G1 T1 G3 T3 ->
  type.
%mode subeq-tp-trans +SBT1 +SBT2 -SBT3.

% - : subeq-tp-trans (subeq-tp/eq SX2 SX1 W1) (subeq-tp/eq SY2 SY1 W2) (subeq-tp/eq SZY2 SZX1 W0)
%       <- extend-wf-tp-mult W1 SX2 WT
%       <- wf-tp-dia WT W1 W2 SX2 SY1 W0 SZ1 SZ2
%       <- sub-env-trans SZ2 SY2 SZY2
%       <- sub-env-trans SZ1 SX1 SZX1.

% - : subeq-tp-trans (subeq-tp/eq SX2 SX1 W1) (subeq-tp/sub S2) (subeq-tp/sub S4)
%       <- restrict-sub-tp1-mult S2 W1 SX2 S3
%       <- extend-sub-tp1-mult S3 SX1 S4.
% - : subeq-tp-trans (subeq-tp/sub S1) (subeq-tp/eq SX2 SX1 W2) (subeq-tp/sub S4)
%       <- restrict-sub-tp2-mult S1 W2 SX1 S3
%       <- extend-sub-tp2-mult S3 SX2 S4.
- : subeq-tp-trans (subeq-tp/sub S1) (subeq-tp/sub S2) (subeq-tp/sub S3)
      <- sub-tp-trans S1 S2 S3.

%worlds () (subeq-tp-trans _ _ _).
%total {A} (subeq-tp-trans A _ _).





%{ ------- eval-exp / type-exp ----- }%

eval-exp   : venv -> exp -> val -> type.
% e/cst      : eval-exp G (cste C) (cstv C).
% e/prim     : eval-exp G (prm OP E1 E2) V3
%             <- eval-exp G E1 V1
%             <- eval-exp G E2 V2
%             <- eval-op OP V1 V2 V3.

e/empty    : eval-exp G empty emptyv.

e/var      : eval-exp G X V <- vlookup G X V.
e/fun      : eval-exp G (fun LNF TR R TP LNV R2 T2 MT) (clos LNF R LNV V2 G)
            <- eval-exp G R2 V2.


e/app      : eval-exp G (app E1 LNF E2) V3
            <- eval-exp G E1 (clos LNF R LNV R2 G1)
            <- eval-exp G E2 V2
            <- eval-exp (vcons V2 G1) R V3.

e/sel      : eval-exp G (sel E1 LNV) V
            <- eval-exp G E1 (clos LNF R LNV V G1).



type-mem   : mem N -> tpe -> type.
tm/nil     : type-mem mnil top.
tm/cons    : type-mem (mcons N T1 T2 R) (and (rect N T1 T2) TR) <- type-mem R TR.


type-exp   : tenv -> exp -> tpe -> type.
% t/cst       : type-exp G (cste C) T <- typeof C T.
% t/prim      : type-exp G (prm OP E1 E2) T3
%             <- type-exp G E1 T1
%             <- type-exp G E2 T1
%             <- type-op OP T1 T2 T3.

t/empty    : type-exp G empty top.

t/var      : type-exp G X T <- tlookup G X T <- wf-tp G T.

t/varx     : type-exp G X (rect N (tsel X N) (tsel X N)) %% TODO: proper expansion
                <- tlookup G X (rect N T1 T2) <- wf-tp G (rect N T1 T2).


t/fun      : type-exp G (fun LNF T3 R T4 LNV R2 T2 M)
                (and (arrow LNF T3 T4) (and (recv  LNV T2) MT))
                <- type-exp (tcons T3 G) R T4
                <- type-exp G R2 T2
                <- type-mem M MT
                <- wf-tp G MT
                <- wf-tp G (recv LNV T2)
                <- wf-tp G (arrow LNF T3 T4)
                .


% whacky way of assigning an intersection type...
% t/fun      : type-exp G (fun LNF R LNV R2 LNT TX1 TX2) (arrow LNF T3 T4)
%                 <- type-exp (tcons T3 G) R T4
%                 <- type-exp G R2 T2
%                 <- wf-tp G (rect LNT TX1 TX2)
%                 <- wf-tp G (arrow LNF T3 T4).
% t/recv     : type-exp G (fun LNF R LNV R2 LNT TX1 TX2) (recv LNV T2)
%                 <- type-exp (tcons T3 G) R T4
%                 <- type-exp G R2 T2
%                 <- wf-tp G (rect LNT TX1 TX2)
%                 <- wf-tp G (arrow LNF T3 T4).
% t/rect     : type-exp G (fun LNF R LNV R2 LNT TX1 TX2) (rect LNT TX1 TX2)
%                 <- type-exp (tcons T3 G) R T4
%                 <- type-exp G R2 T2
%                 <- wf-tp G (rect LNT TX1 TX2)
%                 <- wf-tp G (arrow LNF T3 T4).


t/app       : type-exp G (app E1 LNF E2) T2
            <- type-exp G E1 (arrow LNF T1 T2)
            <- type-exp G E2 T1.

t/sel       : type-exp G (sel E1 LNV) T1
            <- type-exp G E1 (recv LNV T1).

t/sub       : type-exp G E T2
            <- type-exp G E T1
            <- sub-tp G T1 G T2.

%{ ------- well-formedness / typing for values and environment ----- }%

wf-val   : val -> tenv -> tpe -> type.
wf-env   : venv -> tenv -> type.

% wfv/c    : wf-val (cstv C) T <- typeof C T.

wfv/empty : wf-val emptyv G (rect N T1 T2)
             <- wf-tp G (rect N T1 T2).

wfv/f    : wf-val (clos LNF R LNV R2 H) G
            (and (arrow LNF T1 T2) (and (recv LNV T) TX))
            <- wf-env H GC
            <- type-exp (tcons T1 GC) R T2
            <- subeq-tp GC (arrow LNF T1 T2) G (arrow LNF T1 T2)

            <- wf-val R2 G T
            <- type-mem M TX

            <- wf-tp G TX
            <- wf-tp G (recv LNV T)
            <- wf-tp G (arrow LNF T1 T2)
            .




% wfv/f    : wf-val (clos LNF R LNV R2 H) G (arrow LNF T1 T2)
%             <- wf-env H GC
%             <- type-exp (tcons T1 GC) R T2
%             <- wf-tp G (arrow LNF T1 T2)
%             <- subeq-tp GC (arrow LNF T1 T2) G (arrow LNF T1 T2).
%
% wfv/r    : wf-val (clos LNF R LNV R2 H) G (recv LNV T)
%             <- wf-val R2 G T.
%

wfv/t    : wf-val (clos LNF R LNV R2 H) G (rect LNT T1 T2)
            <- wf-tp G (rect LNT T1 T2).


wfv/sub  : wf-val V G T
            <- wf-val V G1 T1
            <- sub-tp G1 T1 G T.


wfe/n    : wf-env vnil tnil.
wfe/c    : wf-env (vcons V H) (tcons T G) <- wf-val V G T <- wf-env H G.



%{ ------- type well-formedness extractors ----- }%

extract-wf2: type-exp G E1 T1 -> wf-tp G T1 -> type.
%mode extract-wf2 +WFE1 -WFE2.

- : extract-wf2 t/empty wf-tp/top.
- : extract-wf2 (t/var W L) W.
- : extract-wf2 (t/varx W L) (wf-tp/rect (sub-tp/tselx ST ST (pev (tle L exp-tp/rect) W) sub-env/refl sub-env/refl) (wf-tp/tsel (pev (tle L exp-tp/rect) W)) (wf-tp/tsel (pev (tle L exp-tp/rect) W))) <- sub-tp-refl W ST.
- : extract-wf2 (t/fun WF WV WR _ _ _) (wf-tp/and WF (wf-tp/and WV WR)).
- : extract-wf2 (t/app TS1 (TS2: type-exp _ _ (arrow _ _ _))) W2 <- extract-wf2 TS2 (wf-tp/fun W2 W1).
- : extract-wf2 (t/sel TS) W <- extract-wf2 TS (wf-tp/recv W).
- : extract-wf2 (t/sub S TS) W2 <- extract-wf S W1 W2.

%worlds () (extract-wf2 _ _).
%total WFE (extract-wf2 WFE _).


extract-wf3: wf-val V G T1 -> wf-tp G T1 -> type.
%mode extract-wf3 +WFE1 -WFE2.

- : extract-wf3 (wfv/empty W) W.
- : extract-wf3 (wfv/f WF WV WR _ _ _ _ _) (wf-tp/and WF (wf-tp/and WV WR)).
- : extract-wf3 (wfv/t WR) WR.
- : extract-wf3 (wfv/sub S TS) W2 <- extract-wf S W1 W2.

%worlds () (extract-wf3 _ _).
%total WFE (extract-wf3 WFE _).



%{ ------- wfv: extending and restricting the environment / type ----- }%



extend-wfv: wf-val X3 X2 X1 -> {Z: tpe} wf-val X3 (tcons Z X2) X1 -> type.
%mode extend-wfv +A +B -C.

-     : extend-wfv (wfv/empty W) T (wfv/empty W1)
         <- extend-wf-tp W T W1.

-     : extend-wfv (wfv/sub ST WV) T (wfv/sub ST1 WV)
            <- extend-sub-tp2 ST T ST1.
-     : extend-wfv (wfv/f WF WV WR MT TV ST TE WE) T (wfv/f WF1 WV1 WR1 MT TV1 ST1 TE WE)
            <- extend-wf-tp WF T WF1
            <- extend-wf-tp WV T WV1
            <- extend-wf-tp WR T WR1
            <- extend-wfv TV T TV1
            <- extend-subeq-tp2 ST T ST1.
-     : extend-wfv (wfv/t WR) T (wfv/t WR1)
            <- extend-wf-tp WR T WR1.

%worlds () (extend-wfv _ _ _).
%total A (extend-wfv A _ _).




wfv-widen-env: sub-env G1 G2 -> wf-val V G1 T1 -> wf-val V G2 T1 -> type.
%mode wfv-widen-env +LTE1 +LTE2 -LTE3.

- : wfv-widen-env sub-env/refl WV WV.
- : wfv-widen-env (sub-env/ext S) WV WVX
      <- wfv-widen-env S WV WV1
      <- extend-wfv WV1 Z WVX.

%worlds () (wfv-widen-env _ _ _).
%total A (wfv-widen-env A _ _).


wfv-widen: subeq-tp G1 T1 G2 T2 -> wf-val V G1 T1 -> wf-val V G2 T2 -> type.
%mode wfv-widen +LTE1 +LTE2 -LTE3.

% - : wfv-widen (subeq-tp/eq SX2 SX1 W) WV1 WV2
%      <- wfv-narrow-env W SX1 WV1 WV0
%      <- wfv-widen-env SX2 WV0 WV2.
- : wfv-widen (subeq-tp/sub S) W (wfv/sub S W).

%worlds () (wfv-widen _ _ _).
%total A (wfv-widen A _ _).



%{ ------- suptyping inversion: type-exp ----- }%


% no intersection/union types yet, encode

subeq-tp-cases: tenv -> tpe -> tenv -> tpe  ->
        tenv -> tpe -> tenv -> tpe  ->
        tenv -> tpe -> tenv -> tpe  ->  type.
case-f : subeq-tp G1 T1 G2 T2 -> subeq-tp-cases G1 T1 G2 T2 _ _ _ _ _ _ _ _.
case-r : subeq-tp G1 T1 G2 T2 -> subeq-tp-cases _ _ _ _ G1 T1 G2 T2 _ _ _ _.
case-t : subeq-tp G1 T1 G2 T2 -> subeq-tp-cases _ _ _ _ _ _ _ _ G1 T1 G2 T2.

cases-wfv: subeq-tp-cases
    G1A T0 G2 T
    G1B T1 G2 T
    G1C T2 G2 T
    -> wf-val V G1A T0
    -> wf-val V G1B T1
    -> wf-val V G1C T2
    -> wf-val V G2 T
    -> type.
%mode cases-wfv +C +W1 +W2 +W3 -W.

- : cases-wfv (case-f ST) WF WR WT WF1 <- wfv-widen ST WF WF1.
- : cases-wfv (case-r ST) WF WR WT WR1 <- wfv-widen ST WR WR1.
- : cases-wfv (case-t ST) WF WR WT WT1 <- wfv-widen ST WT WT1.

%worlds () (cases-wfv _ _ _ _ _).
%total WFE (cases-wfv WFE _ _ _ _).


extract-wf4: subeq-tp G1 T1 G2 T2 -> wf-tp G1 T1 -> wf-tp G2 T2 -> type.
%mode extract-wf4 +A -B -C.
% - : extract-wf4 (subeq-tp/eq S2 S1 W) W1 W2 <- extend-wf-tp-mult W S1 W1  <- extend-wf-tp-mult W S2 W2.
- : extract-wf4 (subeq-tp/sub ST) W1 W2 <- extract-wf ST W1 W2.
%worlds () (extract-wf4 _ _ _).
%total WFE (extract-wf4 WFE _ _).



%% this will need to change if we add non-closure values

% assign-rect: wf-val V G0 T -> wf-tp G (rect N T1 T2) -> wf-val V G (rect N T1 T2) -> type.
% %mode assign-rect +A +B -C.
% - : assign-rect ((wfv/f (WF: wf-tp _ (arrow NF A B)) WV WR TV ST TE WE): (wf-val _ G0 (and (arrow NF A B) (and (recv NV C) (% rect N T1X T2X))))) W
%       (wfv/sub ((sub-tp/and1b WF' (sub-tp/and1b WV' SRR)): (sub-tp G _ G _))
%         ((wfv/f (wf-tp/fun _ _) WV' W TV' ST' TE' WE): (wf-val _ G (and (arrow NF top bot) (and (recv NV top) (rect N T1 T2))% ))) )
%           <- extract-wf3 TV WXV
%           <- wfv-widen (subeq-tp/sub (sub-tp/top WXV)) TV TV'
%           <- subeq-tp-trans ST (subeq-tp/sub SX) ST'
%           <- sub-tp-refl W SRR.
%
% - : assign-rect (wfv/sub S T) W T' <- assign-rect T W T'.
% %worlds () (assign-rect _ _ _).
% %total WFE (assign-rect WFE _ _).

assign-rect: wf-val V G0 T -> wf-tp G (rect N T1 T2) -> wf-val V G (rect N T1 T2) -> type.
%mode assign-rect +A +B -C.
- : assign-rect (wfv/empty _) W (wfv/empty W).
- : assign-rect (wfv/f WF WV WR MT TV ST TE WE) W (wfv/t W).
- : assign-rect (wfv/t WR) W (wfv/t W).
- : assign-rect (wfv/sub S T) W T' <- assign-rect T W T'.
%worlds () (assign-rect _ _ _).
%total WFE (assign-rect WFE _ _).


cases-wfv-rect: subeq-tp-cases
    G1A T0 G2 T
    G1B T1 G2 T
    G1C (rect N T2S T2U) G2 T
    -> wf-val V G1A T0
    -> wf-val V G1B T1
    -> wf-val V G1C TX
    -> wf-val V G2 T
    -> type.
%mode cases-wfv-rect +C +W1 +W2 +W3 -W.

- : cases-wfv-rect (case-f ST) WF WR WT WF1 <- wfv-widen ST WF WF1.
- : cases-wfv-rect (case-r ST) WF WR WT WR1 <- wfv-widen ST WR WR1.
- : cases-wfv-rect (case-t ST) WF WR WT WT1
      <- extract-wf4 ST W1 W2
      <- assign-rect WT W1 WT0
      <- wfv-widen ST WT0 WT1.

%worlds () (cases-wfv-rect _ _ _ _ _).
%total WFE (cases-wfv-rect WFE _ _ _ _).



%{
TODO generalize: why doesn't this work??

cases-map: subeq-tp-cases
    G1A T0 G2 T
    G1B T1 G2 T
    G1C T2 G2 T
    -> (subeq-tp G1A T0 G2 T -> wf-val V G2 T)
    -> (subeq-tp G1B T0 G2 T -> wf-val V G2 T)
    -> (subeq-tp G1C T0 G2 T -> wf-val V G2 T)
    -> wf-val V G2 T
    -> type.
%mode cases-map +C +W1 +W2 +W3 -W.

- : cases-map (case-f ST) WF WR WT (WF ST).
- : cases-map (case-r ST) WF WR WT (WR ST).
- : cases-map (case-t ST) WF WR WT (WT ST).

%worlds () (cases-map _ _ _ _ _).
%total WFE (cases-map WFE _ _ _ _).
}%


cases-subeq-trans: subeq-tp-cases
    G1A T0 G2 T
    G1B T1 G2 T
    G1C T2 G2 T
    -> subeq-tp G2 T G3 TU
    -> subeq-tp-cases
    G1A T0 G3 TU
    G1B T1 G3 TU
    G1C T2 G3 TU
    -> type.
%mode cases-subeq-trans +C +W1 -S.

- : cases-subeq-trans (case-f S1) S2 (case-f S3) <- subeq-tp-trans S1 S2 S3.
- : cases-subeq-trans (case-r S1) S2 (case-r S3) <- subeq-tp-trans S1 S2 S3.
- : cases-subeq-trans (case-t S1) S2 (case-t S3) <- subeq-tp-trans S1 S2 S3.

%worlds () (cases-subeq-trans _ _ _).
%total WFE (cases-subeq-trans WFE _ _).


% we could even strengthen it slightly: tcons in output not strictly necessary

subeq-tp-recv: subeq-tp G1 T1 G2 T2 -> {N:nat} subeq-tp G1 (recv N T1) G2 (recv N T2) -> type.
%mode subeq-tp-recv +C +N -S.

% - : subeq-tp-recv (subeq-tp/eq SX1 SX2 W) (subeq-tp/eq SX1 SX2 (wf-tp/recv W)).
- : subeq-tp-recv (subeq-tp/sub S) _ (subeq-tp/sub (sub-tp/recv S)).

%worlds () (subeq-tp-recv _ _ _).
%total WFE (subeq-tp-recv WFE _ _).


varx-tp-wf: path-eval G E (rect N T1 T2) -> wf-tp G (rect N (tsel E N) (tsel E N)) -> type.
%mode varx-tp-wf +A -B.

- : varx-tp-wf P (wf-tp/rect (sub-tp/tselx ST ST P sub-env/refl sub-env/refl) (wf-tp/tsel P) (wf-tp/tsel P))
    <- extract-wf-pev P W <- sub-tp-refl W ST.

%worlds () (varx-tp-wf _ _).
%total WFE (varx-tp-wf WFE _).


%% TODO: can we use intersection/union types here, too?

invert-var :
  %% Input
  type-exp G (var N) T ->
  %% Output
  tlookup G (var N) T1 ->
  wf-tp G T1 ->
  {LN:nat}
  subeq-tp-cases
    G T1 G T
    G T1 G T
    G (rect LN (tsel (var N) LN) (tsel (var N) LN)) G T
  ->
  type.
%mode invert-var +WFE1 -WFE2 -SBT1 -LN -SBT1.

-     : invert-var (t/var W L) L W z (case-f SB)
            % <- extract-wf2 (t/var L) W
            <- subeq-tp-refl W SB.
-     : invert-var (t/varx W L) L W _ (case-t SB)
           <- varx-tp-wf (pev (tle L exp-tp/rect) W) WS
           <- subeq-tp-refl WS SB.
-     : invert-var (t/sub SB1 TS) L W _ SB2
            <- invert-var TS L W _ SB
            <- cases-subeq-trans SB (subeq-tp/sub SB1) SB2.

%worlds () (invert-var _ _ _ _ _).
%total WFE (invert-var WFE _ _ _ _).


invert-app :
  %% Input
  type-exp G (app E1 LNF E2) T ->
  %% Output
  type-exp G E1 (arrow LNF T1 T2) ->
  type-exp G E2 T1 ->
  subeq-tp G T2 G T ->
  type.
%mode invert-app +WFE1 -WFE2 -WFE3 -SBT.

-     : invert-app (t/app TS1 TS) TS TS1 SB
            <- extract-wf2 (t/app TS1 TS) W
            <- subeq-tp-refl W SB.
-     : invert-app (t/sub SB1 TS) L L2 SB2
            <- invert-app TS L L2 SB
            <- subeq-tp-trans SB (subeq-tp/sub SB1) SB2.

%worlds () (invert-app _ _ _ _).
%total WFE (invert-app WFE _ _ _).


invert-sel :
  %% Input
  type-exp G (sel E1 LNV) T ->
  %% Output
  type-exp G E1 (recv LNV T1) ->
  subeq-tp G T1 G T ->
  type.
%mode invert-sel +WFE1 -WFE3 -SBT.

-     : invert-sel (t/sel TS) TS SB
            <- extract-wf2 (t/sel TS) W
            <- subeq-tp-refl W SB.
-     : invert-sel (t/sub SB1 TS) L2 SB2
            <- invert-sel TS L2 SB
            <- subeq-tp-trans SB (subeq-tp/sub SB1) SB2.

%worlds () (invert-sel _ _ _).
%total WFE (invert-sel WFE _ _).



invert-fun :
  %% Input
  type-exp G (fun LNF _ R _ LNV R2 _ M) T ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  type-exp G R2 T1 ->
  type-mem M MT ->
  wf-tp G (arrow LNF T3 T4) ->
  wf-tp G MT ->
  subeq-tp G (and (arrow LNF T3 T4) (and (recv LNV T1) MT)) G T ->
  type.
%mode invert-fun +WFE1 -WFE2 -WFE3 -WFE4 -WFE5 -WFE6 -SBT1.

-     : invert-fun (t/fun WF WV WX M TSV TS)
          TS TSV M WF WX ST
           <- subeq-tp-refl (wf-tp/and WF (wf-tp/and WV WX)) ST.

-     : invert-fun (t/sub SB1 TS) TSV L M WF WX ST'
           <- invert-fun TS TSV L M WF WX ST
           <- subeq-tp-trans ST (subeq-tp/sub SB1) ST'.

%worlds () (invert-fun _ _ _ _ _ _ _).
%total WFE (invert-fun WFE _ _ _ _ _ _).




%{ ------- inversion helpers: make sense of intersections ----- }%


incompat-tp: tpe -> tpe -> type.

incompat/recv-arrow: incompat-tp (recv _ _) (arrow _ _ _).
incompat/arrow-recv: incompat-tp (arrow _ _ _) (recv _ _).
incompat/rect-arrow: incompat-tp (rect _ _ _) (arrow _ _ _).

% incompat/and1:       incompat-tp (and T1 T2) T3 <- incompat-tp T2 T3 <- incompat-tp T1 T3.


false: type.

no-subtype: false -> {G1}{T1}{G2}{T2}sub-tp G1 T1 G2 T2 -> type.
%mode no-subtype +A +B +C +D +E -F.
%worlds () (no-subtype _ _ _ _ _ _).
%total (A) (no-subtype A _ _ _ _ _).

no-subtype1: sub-tp G1 (recv _ _) G2 (arrow _ _ _) -> false -> type.
%mode no-subtype1 +A -B.
%worlds () (no-subtype1 _ _).
%total (A) (no-subtype1 A _).


no-subtype2: sub-tp G1 T1 G2 T2 -> incompat-tp T1 T2 -> false -> type.
%mode no-subtype2 +A +B -C.
%worlds () (no-subtype2 _ _ _).
%total (A) (no-subtype2 A _ _).


no-subtype2: sub-tp G1 T1 G2 T2 -> incompat-tp T1 T2 -> false -> type.
%mode no-subtype2 +A +B -C.
%worlds () (no-subtype2 _ _ _).
%total (A) (no-subtype2 A _ _).



no-subtype-mt-arrow: sub-tp G1 T1 G2 (arrow NF TA TB) -> type-mem M T1 -> false -> type.

- : no-subtype-mt-arrow (sub-tp/and1b _ ST1) (tm/cons TM) F <- no-subtype-mt-arrow ST1 TM F.

%mode no-subtype-mt-arrow +A +E -B.
%worlds () (no-subtype-mt-arrow _ _ _).
%total (A) (no-subtype-mt-arrow A _ _).

no-subtype-mt-recv: sub-tp G1 T1 G2 (recv NF TA) -> type-mem M T1 -> false -> type.

- : no-subtype-mt-recv (sub-tp/and1b _ ST1) (tm/cons TM) F <- no-subtype-mt-recv ST1 TM F.

%mode no-subtype-mt-recv +A +E -B.
%worlds () (no-subtype-mt-recv _ _ _).
%total (A) (no-subtype-mt-recv A _ _).


project-sub-arrow: sub-tp G1 (and (arrow NF T1 T2) (and (recv NV T3) MT)) G2 (arrow NF T1X T2X) -> type-mem M MT -> sub-tp G1 (arrow NF T1 T2) G2 (arrow NF T1X T2X) -> type.

- : project-sub-arrow (sub-tp/and1a ST W) MT ST.
- : project-sub-arrow (sub-tp/and1b WF (sub-tp/and1a ST WR)) MT ST'
      <- no-subtype2 ST incompat/recv-arrow F <- no-subtype F _ _ _ _ ST'.
- : project-sub-arrow (sub-tp/and1b WF (sub-tp/and1b WV ST)) MT ST'
      <- no-subtype-mt-arrow ST MT F  <- no-subtype F _ _ _ _ ST'.

%mode project-sub-arrow +A +B -C.
%worlds () (project-sub-arrow _ _ _).
%total (A) (project-sub-arrow A _ _).



project-sub-recv: sub-tp G1 (and (arrow NF T1 T2) (and (recv NV T3) MT)) G2 (recv NV TX) -> type-mem M MT -> sub-tp G1 (recv NV T3) G2 (recv NV TX) -> type.

- : project-sub-recv (sub-tp/and1a ST W) MT ST'
      <- no-subtype2 ST incompat/arrow-recv F <- no-subtype F _ _ _ _ ST'.
- : project-sub-recv (sub-tp/and1b WF (sub-tp/and1a ST WR)) MT ST.
- : project-sub-recv (sub-tp/and1b WF (sub-tp/and1b WV ST)) MT ST'
      <- no-subtype-mt-recv ST MT F  <- no-subtype F _ _ _ _ ST'.

%mode project-sub-recv +A +B -C.
%worlds () (project-sub-recv _ _ _).
%total (A) (project-sub-recv A _ _).



%{
%%% TODO: rudiments for expansion (not used)

expand-arrow: {G:tenv} {T:tpe} {N:nat} tpe -> tpe -> type.

epa/arrow: expand-arrow G (arrow N T1 T2) N T1 T2.
epa/and1:  expand-arrow G (and T1 T2) N T3 T4 <- expand-arrow G T1 N T3 T4.
% epa/and2:  expand-arrow G (and T1 T2) N T3 T4 <- expand-arrow G T2 N T3 T4.


expand-monot: sub-tp G1 T1 G2 T2 -> expand-arrow G1 T1 N T11 T12 -> expand-arrow G2 T2 N T21 T22 -> sub-tp G1 (arrow N T11 T12) G2 (arrow N T21 T22) -> type.

- : expand-monot ST epa/arrow epa/arrow ST.

- : expand-monot (sub-tp/and1a ST W) (epa/and1 E1) E2 ST' <- expand-monot ST E1 E2 ST'.
% - : expand-monot (sub-tp/and1a ST W) (epa/and2 E1) E2 ST' <- expand-monot ST E1 E2 ST'.

% - : expand-monot (sub-tp/and1b W ST) (epa/and1 E1) E2 ST' <- expand-monot STx E1 E2 ST'.
% - : expand-monot (sub-tp/and1b W ST) (epa/and2 E1) E2 ST' <- expand-monot ST E1 E2 ST'.

%mode expand-monot +A +B +C -D.
%worlds () (expand-monot _ _ _ _).
%total (A) (expand-monot _ A _ _).

}%





%{ ------- suptyping inversion: wf-val ----- }%

% although we only call this from the outside when we
% know T = T1 -> T2, it seems like internally we need a
% more general interface (b/c of wfv/sub)

invert-wf-fun-aux :
  %% Input
  wf-val (clos LNF R LNV R2 H) G1 T ->
  subeq-tp G1 T G2 (arrow LNF T1 T2) ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  wf-env H G ->
  subeq-tp G (arrow LNF T3 T4) G2 (arrow LNF T1 T2) ->
  type.
%mode invert-wf-fun-aux +WFE1 +SBT -WFE2 -WFE3 -SBT1.

-     :  invert-wf-fun-aux (wfv/f WF WV WR MT TV ST TS WE) (subeq-tp/sub SB0) TS WE ST1
            <- project-sub-arrow SB0 MT SB1
            <- subeq-tp-trans ST (subeq-tp/sub SB1) ST1.

 -     : invert-wf-fun-aux (wfv/sub (SB1: sub-tp G1 TI G T) (TS: wf-val _ G1 TI))
                (SB0: subeq-tp G T G2 (arrow LNF T1 T2)) L L1 (SB)
            <- subeq-tp-trans (subeq-tp/sub SB1) SB0 (SB1X: subeq-tp G1 TI G2 (arrow LNF T1 T2))
            <- invert-wf-fun-aux TS SB1X L L1 (SB: subeq-tp _ (arrow LNF T3 T4) G2 (arrow LNF T1 T2)).

%worlds () (invert-wf-fun-aux _ _ _ _ _).
%total WFE (invert-wf-fun-aux WFE _ _ _ _).


invert-wf-fun :
  %% Input
  wf-val (clos LNF R LNV R2 H) G1 (arrow LNF T1 T2) ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  wf-env H G ->
  subeq-tp G (arrow LNF T3 T4) G1 (arrow LNF T1 T2) ->
  type.
%mode invert-wf-fun +WFE1 -WFE2 -WFE3 -SBT1.

-     :  invert-wf-fun A B C D
            <- extract-wf3 A W
            <- subeq-tp-refl W SB
            <- invert-wf-fun-aux A SB B C D.

%worlds () (invert-wf-fun _ _ _ _).
%total WFE (invert-wf-fun WFE _ _ _).





invert-wf-rec-aux :
  %% Input
  wf-val (clos LNF R LNV R2 H) G1 T ->
  subeq-tp G1 T G2 (recv LNV T2) ->
  %% Output
  wf-val R2 G T4 ->
  subeq-tp G (recv LNV T4) G2 (recv LNV T2) ->
  type.
%mode invert-wf-rec-aux +WFE1 +SBT -WFE3 -SBT1.

-     :  invert-wf-rec-aux (wfv/f WF WV WR MT TV ST TS WE) (subeq-tp/sub SB0) TV (subeq-tp/sub SB1)
            <- project-sub-recv SB0 MT SB1.

 -     : invert-wf-rec-aux (wfv/sub (SB1: sub-tp G1 TI G T) (TS: wf-val _ G1 TI))
                (SB0: subeq-tp G T G2 (recv LNV T2)) TV SB
            <- subeq-tp-trans (subeq-tp/sub SB1) SB0 (SB1X: subeq-tp G1 TI G2 (recv LNV T2))
            <- invert-wf-rec-aux TS SB1X TV (SB: subeq-tp _ (recv LNV T4) G2 (recv LNV T2)).

%worlds () (invert-wf-rec-aux _ _ _ _).
%total WFE (invert-wf-rec-aux WFE _ _ _).


invert-wf-rec :
  %% Input
  wf-val (clos LNF R LNV R2 H) G1 (recv LNV T) ->
  %% Output
  wf-val R2 G T4 ->
  subeq-tp G (recv LNV T4) G1 (recv LNV T) ->
  type.
%mode invert-wf-rec +WFE1 -WFE3 -SBT1.

-     :  invert-wf-rec A B C
            <- extract-wf3 A W
            <- subeq-tp-refl W SB
            <- invert-wf-rec-aux A SB B C.

%worlds () (invert-wf-rec _ _ _).
%total WFE (invert-wf-rec WFE _ _).




%{ ------- type preservation ----- }%



% lookup safe

lookup-zero-safe: wf-env H G -> tlookup-zero G (var N2) T -> vlookup-zero H (var N1) V -> eq N1 N2 -> wf-val V G T -> type.
%mode lookup-zero-safe +A +B +C +D -E.

-      : lookup-zero-safe (wfe/c G V) tl/hit vl/hit eq/z V1
         <- extend-wfv V _ V1.
-      : lookup-zero-safe (wfe/c G V) (tl/miss A) (vl/miss B) (eq/s E) Z1
         <- lookup-zero-safe G A B E Z
         <- extend-wfv Z _ Z1.

%worlds () (lookup-zero-safe _ _ _ _ _).
%total A (lookup-zero-safe A _ _ _ _). % induction on first arg

wf-env-size-eq: wf-env H G -> vsize H (var N1) -> tsize G (var N2) -> eq N1 N2 -> type.
%mode wf-env-size-eq +A +B +C -D.
-      : wf-env-size-eq wfe/n vf/n tf/n eq/z.
-      : wf-env-size-eq (wfe/c G _) (vf/c VS) (tf/c TS) (eq/s E) <- wf-env-size-eq G VS TS E.
%worlds () (wf-env-size-eq _ _ _ _).
%total A (wf-env-size-eq A _ _ _).

lookup-safe: wf-env H G -> tlookup G (var N) T -> vlookup H (var N) V -> wf-val V G T -> type.
%mode lookup-safe +A +B +C -D.

-      : lookup-safe WE (tl TL TA TS) (vl VL VA VS) WV
         <- eq-refl N EN
         <- wf-env-size-eq WE VS TS ES
         <- sub-eq EN ES VA TA EM
         <- lookup-zero-safe WE TL VL EM WV.

%worlds () (lookup-safe _ _ _ _).
%total A (lookup-safe A _ _ _).


subeq-tp-inv-recv: subeq-tp G1 (recv LNV T1) G2 (recv LNV T2)
  -> subeq-tp G1 T1 G2 T2
  -> type.
%mode subeq-tp-inv-recv +LTE1 -LTE2.

% - : subeq-tp-inv-recv (subeq-tp/eq SX1 SX2 (wf-tp/recv W)) (subeq-tp/eq SX1 SX2 W).
- : subeq-tp-inv-recv (subeq-tp/sub (sub-tp/recv S)) (subeq-tp/sub S).

%worlds () (subeq-tp-inv-recv _ _).
%total A (subeq-tp-inv-recv A _).

subeq-tp-inv-fun: subeq-tp G1 (arrow LNF T1 T2) G2 (arrow LNF T3 T4)
  -> subeq-tp G2 T3 G1 T1
  -> subeq-tp G1 T2 G2 T4
  -> type.
%mode subeq-tp-inv-fun +LTE1 -LTE2 -LTE3.

% - : subeq-tp-inv-fun (subeq-tp/eq SX1 SX2 (wf-tp/fun W1 W2)) (subeq-tp/eq SX2 SX1 W2) (subeq-tp/eq SX1 SX2 W1).
- : subeq-tp-inv-fun (subeq-tp/sub (sub-tp/fun S1 S2)) (subeq-tp/sub S2) (subeq-tp/sub S1).

%worlds () (subeq-tp-inv-fun _ _ _).
%total A (subeq-tp-inv-fun A _ _).


%{
% eval primitive op safe

eval-op-safe : type-op OP T1 T2 T3 -> eval-op OP V1 V2 V3 -> wf-val V3 T3 -> type.
%mode eval-op-safe +LTE1 +LTE2 -LTE3.

-plus   : eval-op-safe t/plus (ev/v (e/plus _)) (wfv/c -/n).
-eqt    : eval-op-safe t/eq (ev/v (e/eqt _ _)) (wfv/c -/t).
-eqf    : eval-op-safe t/eq (ev/v (e/eqf _)) (wfv/c -/f).

%worlds () (eval-op-safe _ _ _).
%total A (eval-op-safe A _ _). % induction on first arg
}%

eval-empty-safe: type-exp G empty T -> wf-val emptyv G T -> type.
%mode eval-empty-safe +A -B.
- : eval-empty-safe
     (t/empty: type-exp G _ _)
     (wfv/sub
        ((sub-tp/top
            (wf-tp/rect
               (sub-tp/top wf-tp/top)
               wf-tp/top
               wf-tp/top)): sub-tp G (rect z _ _) G _)
        (wfv/empty
           (wf-tp/rect
              (sub-tp/top wf-tp/top)
              wf-tp/top
              wf-tp/top))).

- : eval-empty-safe (t/sub ST ZT) (wfv/sub ST W)
<- eval-empty-safe ZT W.

%worlds () (eval-empty-safe _ _).
%total A (eval-empty-safe A _).

eval-safe: type-exp G E T -> wf-env H G -> eval-exp H E V -> wf-val V G T -> type.
%mode eval-safe +A +B +C -D.

% -      : eval-safe (t/cst T) _ (e/cst) (wfv/c T).
% -      : eval-safe (t/prim T _ _) _ (e/prim V _ _) WF
%           <- eval-op-safe T V WF.

 -      : eval-safe ZT _ e/empty V
          <- eval-empty-safe ZT V.

 -      : eval-safe ZT E (e/var L2) V2
          <- invert-var ZT L W _ CST
          <- lookup-safe E L L2 V
          <- cases-wfv-rect CST V V V V2.

 -      : eval-safe (ZT: type-exp G _ _) E (e/fun EX) WV2
          <- invert-fun ZT TS TSV M WF WX CST
          <- eval-safe TSV E EX TV
          <- extract-wf3 TV WV
          <- subeq-tp-refl WF ST
          <- wfv-widen CST (wfv/f WF (wf-tp/recv WV) WX M TV ST TS E) WV2.

-      : eval-safe ZT WE (e/sel EVX) WV3
          <- invert-sel ZT TS ST
          <- eval-safe TS WE EVX WVX
          <- invert-wf-rec WVX WV1 STR
          <- subeq-tp-inv-recv STR ST1
          <- wfv-widen ST1 WV1 WV2
          <- wfv-widen ST WV2 WV3.


-      : eval-safe
            (ZT: type-exp _ _ T2')
            (WE: wf-env H0 G0)
            (e/app
              (EV3: eval-exp (vcons V2 HC0) R V3)
              (EVX: eval-exp H0 EXP2 V2)
              (EVF: eval-exp H0 EXP1 (clos _ R _ R2 HC0))
            )
            Z2 % (wfv/sub ST (wfv/sub STR1 (Z: wf-val V3 (tcons T3 GC0) T4)))

          <- invert-app ZT
              (TF: type-exp G0 EXP1 (arrow _ T1 T2))
              (TX: type-exp G0 EXP2 T1)
              (ST: subeq-tp _ T2 _ T2')

          <- eval-safe          % eval X
              (TX: type-exp _ _ T1)
              WE
              EVX
              (WVX: wf-val V2 G0 T1)

          <- eval-safe          % eval F
              TF
              WE
              (EVF: eval-exp H0 EXP1 (clos _ R _ R2 HC0))
              (ZF: wf-val (clos _ R _ R2 HC0) G0 (arrow _ T1 T2))

          <- invert-wf-fun
              ZF
              (TR : type-exp (tcons T3 GC0) R T4)
              (WE1: wf-env HC0 GC0)
              STF

          <- subeq-tp-inv-fun
              (STF: subeq-tp GC0 (arrow _ T3 T4) G0 (arrow _ T1 T2))
              (STA: subeq-tp G0 T1 GC0 T3)
              (STR: subeq-tp GC0 T4 G0 T2)

          <- wfv-widen STA WVX WVX3

          <- eval-safe                 % eval F(X)
              (TR: type-exp (tcons T3 GC0) R T4)
              (wfe/c WE1 WVX3)
              (EV3: eval-exp (vcons V2 HC0) R V3)
              (Z: wf-val V3 (tcons T3 GC0) T4)

          <- extend-subeq-tp1 STR _ (STR1: subeq-tp (tcons T3 GC0) T4 G0 T2)

          <- wfv-widen STR1 (Z: wf-val V3 (tcons T3 GC0) T4) Z1
          <- wfv-widen ST Z1 Z2.



%worlds () (eval-safe _ _ _ _).
%total C (eval-safe A _ C _). % induction on eval-exp

%%% QUERIES %%%

%query 1 1 type-exp tnil empty top.
%query 1 1 type-exp tnil (fun z _ (var (s z)) _ z empty _ mnil) top.
%query 1 1 type-exp tnil (fun z _ (var (s z)) _ z empty _ mnil) (arrow z A A).
%dquery 5 1 1 type-exp tnil (fun z _ (var (s z)) _ z empty _ mnil) (arrow z (rect z bot top) (rect z bot top)).
%query 1 1 type-exp tnil (fun z _ (var (s z)) _ z empty _ (mcons z bot top mnil)) top.
%query 1 1 type-exp tnil (fun z _ (var (s z)) _ z empty _ (mcons z bot top mnil)) (rect z bot top).

%query 1 1 type-exp tnil (fun z (rect z bot top) (var (s z)) _ z empty _ mnil) (arrow z (rect z bot top) A).

%abbrev let: tpe -> exp -> exp -> exp = [T] [ex] [ef] (app (fun z T ef _ z empty _ mnil) z ex).
%query 1 1 type-exp tnil (let _ empty (var (s z))) A.