%{
}%


%%%%%  Syntax  %%%%%

tp      : type.  %name tp A.
exp     : type.  %name exp M.

o       : tp.
p       : exp -> tp. % not used
arrow   : tp -> tp -> tp.

b       : exp.
lam     : tp -> (exp -> exp) -> exp.
app     : exp -> exp -> exp.




%%%%%  Natural Numbers  %%%%%

nat : type.  %name nat N.

0 : nat.
s : nat -> nat.



nat-eq : nat -> nat -> type.
nat-eq/i : nat-eq N N.



lt : nat -> nat -> type.

lt/z		: lt 0 (s _).
lt/s		: lt (s N1) (s N2)
		   <- lt N1 N2.




%%%%%  Contexts  %%%%%

isvar   : exp -> nat -> type.
%{
The assumption "isvar X I" indicates that the expression X is a variable
and carries order stamp I.
}%

%{
Isvar will be frozen shortly.  Make it depend on itself while we still can.
}%
-       : (isvar _ _ -> isvar _ _) -> type.


ctx     : type.  %name ctx G.

nil     : ctx.
cons    : ctx -> exp -> tp -> ctx.



precedes : exp -> exp -> type.

precedes/i      : precedes X Y
                   <- isvar X I
                   <- isvar Y J
                   <- lt I J.



ordered : ctx -> type.
bounded : ctx -> exp -> type.
%{
"ordered G" means that the assumptions are listed in increasing order by stamp.
"bounded G X" means that G is ordered and all assumptions are less than X.
}%

ordered/nil     : ordered nil.

ordered/cons    : ordered (cons G X _)
                   <- bounded G X.

bounded/nil     : bounded nil X
                   <- isvar X _.

bounded/cons    : bounded (cons G Y _) X
                   <- precedes Y X
                   <- bounded G Y.



lookup : ctx -> exp -> tp -> type.

lookup/hit      : lookup (cons G X A) X A.

lookup/miss     : lookup (cons G Y _) X A
                   <- lookup G X A.



append : ctx -> ctx -> ctx -> type.

append/nil      : append G nil G.

append/cons     : append G1 (cons G2 X A) (cons G X A)
                   <- append G1 G2 G.



%%%%%  Typing Rules (Explicit Context) %%%%%

of        : ctx -> exp -> tp -> type.

of/b      : of G b o.

of/var		: of G X A
		   <- lookup G X A.

of/lam		: of G (lam A ([x] M x)) (arrow A B)
		   <- ({x} of (cons G x A) (M x) B).

of/app		: of G (app M N) B
		   <- of G M (arrow A B)
		   <- of G N A.





%%%%%  Worlds  %%%%%

%block var	: block {x:exp}.

%block ovar	: some {i:nat}
		   block
		   {x:exp}
		   {d:isvar x i}.




%%%%%  Equality  %%%%%

ctx-eq : ctx -> ctx -> type.
ctx-eq/i : ctx-eq G G.

exp-eq : exp -> exp -> type.
exp-eq/i : exp-eq M M.

tp-eq : tp -> tp -> type.
tp-eq/i : tp-eq A A.



lt-resp : nat-eq N1 N1' -> nat-eq N2 N2' -> lt N1 N2 -> lt N1' N2' -> type.
%mode lt-resp +D1 +D2 +D3 -D.

-	: lt-resp nat-eq/i nat-eq/i D D.

%worlds () (lt-resp _ _ _ _).
%total {} (lt-resp _ _ _ _).



of-resp : ctx-eq G G' -> exp-eq M M' -> tp-eq A A' -> of G M A -> of G' M' A' -> type.
%mode of-resp +X1 +X2 +X3 +X4 -X5.

-       : of-resp ctx-eq/i exp-eq/i tp-eq/i D D.

%worlds (var | ovar) (of-resp _ _ _ _ _).
%total {} (of-resp _ _ _ _ _).




%%%%%  Reductio Ad Absurdum  %%%%%

false : type.


false-implies-of : false -> of G M A -> type.
%mode +{G:ctx} +{M:exp} +{A:tp} +{X1:false} -{X2:of G M A} (false-implies-of X1 X2).
%worlds (var | ovar) (false-implies-of _ _).
%total {} (false-implies-of _ _).


false-implies-tp-eq : false -> tp-eq A B -> type.
%mode +{A:tp} +{B:tp} +{X1:false} -{X2:tp-eq A B} (false-implies-tp-eq X1 X2).
%worlds (var | ovar) (false-implies-tp-eq _ _).
%total {} (false-implies-tp-eq _ _).


false-implies-bounded : false -> bounded G X -> type.
%mode +{G:ctx} +{X:exp} +{X1:false} -{X2:bounded G X} (false-implies-bounded X1 X2).
%worlds (var | ovar) (false-implies-bounded _ _).
%total {} (false-implies-bounded _ _).


false-implies-ordered : false -> ordered G -> type.
%mode +{G:ctx} +{X1:false} -{X2:ordered G} (false-implies-ordered X1 X2).
%worlds (var | ovar) (false-implies-ordered _ _).
%total {} (false-implies-ordered _ _).




%%%%%  Lt  %%%%%

lt-trans : lt N1 N2 -> lt N2 N3 -> lt N1 N3 -> type.
%mode lt-trans +D1 +D2 -D3.

-	: lt-trans lt/z (lt/s _) lt/z.

-	: lt-trans (lt/s D1) (lt/s D2) (lt/s D3)
	   <- lt-trans D1 D2 D3.

%worlds () (lt-trans _ _ _).
%total D (lt-trans D _ _).



lt-antisymm : lt N N -> false -> type.
%mode lt-antisymm +X1 -X2.

-	: lt-antisymm (lt/s D) D'
	   <- lt-antisymm D D'.

%worlds () (lt-antisymm _ _).
%total D (lt-antisymm D _).



lt-succ : {N} lt N (s N) -> type.
%mode lt-succ +X1 -X2.

-	: lt-succ 0 lt/z.

-	: lt-succ (s N) (lt/s D)
	   <- lt-succ N D.

%worlds () (lt-succ _ _).
%total N (lt-succ N _).




%%%%%  Ordered Variable Lemmas  %%%%%

isvar-fun : isvar X I -> isvar X J -> nat-eq I J -> type.
%mode isvar-fun +X1 +X2 -X3.

-	:  isvar-fun D D nat-eq/i.

%worlds (ovar) (isvar-fun _ _ _).
%total {} (isvar-fun _ _ _).



precedes-trans : precedes X Y -> precedes Y Z -> precedes X Z -> type.
%mode precedes-trans +X1 +X2 -X3.

-       : precedes-trans
           (precedes/i
              (DltIJ : lt I J)
              (DisvarY : isvar Y J)
              (DisvarX : isvar X I))
           (precedes/i
              (DltJ'K : lt J' K)
              (DisvarZ : isvar Z K)
              (DisvarY' : isvar Y J'))
           (precedes/i DltIK DisvarZ DisvarX)
           <- isvar-fun DisvarY' DisvarY
              (Deq : nat-eq J' J)
           <- lt-resp Deq nat-eq/i DltJ'K
              (DltJK : lt J K)
           <- lt-trans DltIJ DltJK
              (DltIK : lt I K).

%worlds (ovar) (precedes-trans _ _ _).
%total {} (precedes-trans _ _ _).



precedes-irreflex : precedes X X -> false -> type.
%mode precedes-irreflex +X1 -X2.

-       : precedes-irreflex
	   (precedes/i
	      (Dlt : lt I J)
	      (D2 : isvar X J)
	      (D1 : isvar X I))
	   Dfalse
           <- isvar-fun D1 D2 (Deq : nat-eq I J)
           <- lt-resp Deq nat-eq/i Dlt (Dlt' : lt J J)
           <- lt-antisymm Dlt' Dfalse.

%worlds (ovar) (precedes-irreflex _ _).
%total {} (precedes-irreflex _ _).



bounded-isvar : bounded G X -> isvar X I -> type.
%mode bounded-isvar +X1 -X2.

-       : bounded-isvar (bounded/nil D) D.

-       : bounded-isvar (bounded/cons _ (precedes/i _ D _)) D.

%worlds (ovar) (bounded-isvar _ _).
%total {} (bounded-isvar _ _).


isvar-not-b   : isvar b I -> false -> type.
%mode isvar-not-b +X1 -X2.
%worlds (ovar) (isvar-not-b _ _).
%total {} (isvar-not-b _ _).

isvar-not-lam : isvar (lam A M) I -> false -> type.
%mode isvar-not-lam +X1 -X2.
%worlds (ovar) (isvar-not-lam _ _).
%total {} (isvar-not-lam _ _).



isvar-not-app : isvar (app M N) I -> false -> type.
%mode isvar-not-app +X1 -X2.
%worlds (ovar) (isvar-not-app _ _).
%total {} (isvar-not-app _ _).




%%%%%  Explicit Context Lemmas  %%%%%

bounded-is-ordered : bounded G X
%%
		      -> ordered G
		      -> type.
%mode bounded-is-ordered +X1 -X2.

-       : bounded-is-ordered (bounded/nil _) ordered/nil.

-       : bounded-is-ordered (bounded/cons D _) (ordered/cons D).

%worlds (ovar) (bounded-is-ordered _ _).
%total {} (bounded-is-ordered _ _).



bounded-increase : bounded G X
                    -> precedes X Y
%%
                    -> bounded G Y
		    -> type.
%mode bounded-increase +X1 +X2 -X3.

-       : bounded-increase
           (bounded/nil _)
           (precedes/i _ D _)
           (bounded/nil D).

-       : bounded-increase
           (bounded/cons
              (Dbounded : bounded G Z)
              (DprecZX : precedes Z X))
           (DprecXY : precedes X Y)
           (bounded/cons Dbounded DprecZY)
           <- precedes-trans DprecZX DprecXY
              (DprecZY : precedes Z Y).

%worlds (ovar) (bounded-increase _ _ _).
%total {} (bounded-increase _ _ _).



append-bounded : append G1 G2 G
		  -> bounded G X
%%
		  -> bounded G1 X
		  -> type.
%mode append-bounded +X1 +X2 -X3.

-	: append-bounded append/nil D D.

-	: append-bounded
	   (append/cons
	      (Dappend : append G1 G2 G))
	   (bounded/cons
	      (Dbounded : bounded G Y)
	      (Dprecedes : precedes Y X))
	   Dbounded''
	   <- append-bounded Dappend Dbounded
	      (Dbounded' : bounded G1 Y)
	   <- bounded-increase Dbounded' Dprecedes
	      (Dbounded'' : bounded G1 X).

%worlds (ovar) (append-bounded _ _ _).
%total D (append-bounded D _ _).



extend-context : ordered G
%%
		  -> ({x} isvar x I -> bounded G x)
		  -> type.
%mode extend-context +X1 -X2.

-       : extend-context ordered/nil ([x] [d:isvar x 0] bounded/nil d).

-       : extend-context
           (ordered/cons (Dbounded : bounded G Y))
           ([x] [d:isvar x (s J)] bounded/cons Dbounded (precedes/i Dlt d Disvar))
           <- bounded-isvar Dbounded
              (Disvar : isvar Y J)
           <- lt-succ J (Dlt : lt J (s J)).

%worlds (ovar) (extend-context _ _).
%total {} (extend-context _ _).



ordered-car : ordered (cons G X A)
%%
	       -> isvar X I
	       -> type.
%mode ordered-car +X1 -X2.

-	: ordered-car
	   (ordered/cons
	      (Dbounded : bounded G X))
	   Disvar
	   <- bounded-isvar Dbounded (Disvar : isvar X I).

%worlds (ovar) (ordered-car _ _).
%total {} (ordered-car _ _).



ordered-cdr : ordered (cons G X A)
%%
	       -> ordered G
	       -> type.
%mode ordered-cdr +X1 -X2.

-	: ordered-cdr
	   (ordered/cons
	      (Dbounded : bounded G X))
	   Dordered
	   <- bounded-is-ordered Dbounded
	      (Dordered : ordered G).

%worlds (ovar) (ordered-cdr _ _).
%total {} (ordered-cdr _ _).



lookup-ordered : lookup G X A
		  -> ordered G
		  -> isvar X I
		  -> type.
%mode lookup-ordered +X1 +X2 -X3.

-	: lookup-ordered
	   lookup/hit
	   (Dordered : ordered (cons G X A))
	   Disvar
	   <- ordered-car Dordered (Disvar : isvar X I).

-	: lookup-ordered
	   (lookup/miss
	      (Dlookup : lookup G X A))
	   (Dordered : ordered (cons G Y B))
	   Disvar
	   <- ordered-cdr Dordered (Dordered' : ordered G)
	   <- lookup-ordered Dlookup Dordered' (Disvar : isvar X I).

%worlds (ovar) (lookup-ordered _ _ _).
%total D (lookup-ordered D _ _).



bounded-contra : bounded (cons G X A) X
%%
		  -> false
		  -> type.
%mode bounded-contra +X1 -X2.

-	: bounded-contra
	   (bounded/cons _ (Dprecedes : precedes X X))
	   Dfalse
	   <- precedes-irreflex Dprecedes Dfalse.

%worlds (ovar) (bounded-contra _ _).
%total {} (bounded-contra _ _).



lookup-bounded-contra : lookup G X A
			 -> bounded G X
%%
			 -> false
			 -> type.
%mode lookup-bounded-contra +X1 +X2 -X3.

-       : lookup-bounded-contra
	   lookup/hit
	   (Dbounded : bounded (cons G X A) X)
	   Dfalse
           <- bounded-contra Dbounded Dfalse.

-       : lookup-bounded-contra
	   (lookup/miss
	      (Dlookup : lookup G X A))
	   (bounded/cons
	      (Dbounded : bounded G Y)
	      (Dprecedes : precedes Y X))
	   Dfalse
           <- bounded-increase Dbounded Dprecedes (Dbounded' : bounded G X)
           <- lookup-bounded-contra Dlookup Dbounded' Dfalse.

%worlds (ovar) (lookup-bounded-contra _ _ _).
%total D (lookup-bounded-contra D _ _).



append-lookup-eq : ({x} append (cons G1 x A) (G2 x) (G x))
		    -> ({x} isvar x I -> ordered (G x))
		    -> ({x} lookup (G x) x (B x))
%%
		    -> ({x} tp-eq A (B x))
		    -> type.
%mode append-lookup-eq +X1 +X2 +X3 -X4.

-       : append-lookup-eq _ _ ([x] lookup/hit) ([_] tp-eq/i).

-       : append-lookup-eq
	   ([x]
	      append/cons
	      (Dappend x : append (cons G1 x A) (G2 x) (G x)))
	   ([x] [d:isvar x I]
	      Dordered x d : ordered (cons (G x) (Y x) (C x)))
	   ([x]
	      lookup/miss (Dlookup x : lookup (G x) x (B x)))
           Deq
	   <- ({x} {d:isvar x I}
		 ordered-cdr (Dordered x d) (Dordered' x d : ordered (G x)))
           <- append-lookup-eq Dappend Dordered' Dlookup (Deq : {x} tp-eq A (B x)).

-       : append-lookup-eq
	   ([x] append/nil)
	   ([x] [d:isvar x I]
	      ordered/cons (Dbounded x d : bounded G1 x))
	   ([x]
	      lookup/miss (Dlookup x : lookup G1 x (B x)))
           Deq
           <- ({x} {d:isvar x I}
                 lookup-bounded-contra (Dlookup x) (Dbounded x d) Dfalse)
           <- ({x} false-implies-tp-eq Dfalse (Deq x)).

-	: append-lookup-eq
	   ([x]
	      append/cons
	      (Dappend x : append (cons G1 x A) (G2 x) (G x)))
	   ([x] [d:isvar x I]
	      ordered/cons (Dbounded x d : bounded (G x) x))
	   ([x] lookup/hit)
	   Deq
	   <- ({x} {d:isvar x I}
		 append-bounded (Dappend x) (Dbounded x d)
		 (Dbounded' x d : bounded (cons G1 x A) x))
	   <- ({x} {d:isvar x I}
		 bounded-contra (Dbounded' x d) Dfalse)
	   <- ({x} false-implies-tp-eq Dfalse (Deq x)).

%worlds (ovar) (append-lookup-eq _ _ _ _).
%total D (append-lookup-eq D _ _ _).



%% Lookup is preserved under deletion of other variables.
lookup-pdv : ({x} append (cons G1 x A) (G2 x) (G x))
               -> append G1 (G2 M) G'
               -> ({x} lookup (G x) Y (B x))
%%
               -> lookup G' Y (B M)
	       -> type.
%mode lookup-pdv +X1 +X2 +X3 -X4.

-       : lookup-pdv
	   ([x] append/cons
	      (Dappend x : append (cons G1 x A) (G2 x) (G x)))
	   (append/cons
	      (Dappend' : append G1 (G2 M) G'))
	   ([x] lookup/hit)
	   %%
           lookup/hit.

-       : lookup-pdv
	   ([x] append/cons
	      (Dappend x : append (cons G1 x A) (G2 x) (G x)))
	   (append/cons
	      (Dappend' : append G1 (G2 M) G'))
	   ([x]
	      lookup/miss
	      (Dlookup x : lookup (G x) Y (B x)))
	   %%
           (lookup/miss Dlookup')
           <- lookup-pdv Dappend Dappend' Dlookup Dlookup'.

-       : lookup-pdv
	   ([x] append/nil)
	   append/nil
	   ([x] lookup/miss
	      (Dlookup x : lookup _ _ (B x)))
	   %%
           (Dlookup M).

%worlds (ovar) (lookup-pdv _ _ _ _).
%total D (lookup-pdv D _ _ _).




%%%%%  Weakening  %%%%%

weaken-lookup-gen : append G1 G2 G
                     -> append (cons G1 X A) G2 G'
                     -> lookup G Y B
%%
                     -> lookup G' Y B
		     -> type.
%mode weaken-lookup-gen +X1 +X2 +X3 -X4.

-       : weaken-lookup-gen (append/cons _) (append/cons _) lookup/hit lookup/hit.

-       : weaken-lookup-gen (append/cons Dappend) (append/cons Dappend') (lookup/miss Dlookup)
           (lookup/miss Dlookup')
           <- weaken-lookup-gen Dappend Dappend' Dlookup Dlookup'.

-       : weaken-lookup-gen append/nil append/nil Dlookup (lookup/miss Dlookup).

%worlds (var) (weaken-lookup-gen _ _ _ _).
%total D (weaken-lookup-gen D _ _ _).



weaken-of-gen : append G1 G2 G
                  -> append (cons G1 X A) G2 G'
                  -> of G M B
%%
                  -> of G' M B
		  -> type.
%mode weaken-of-gen +X1 +X2 +X3 -X4.

-b      : weaken-of-gen _ _
           of/b
           of/b.

-var    : weaken-of-gen Dappend Dappend'
           (of/var Dlookup)
           (of/var Dlookup')
           <- weaken-lookup-gen Dappend Dappend' Dlookup Dlookup'.

-lam    : weaken-of-gen Dappend Dappend'
           (of/lam
              (DofM : {y} of (cons G y B) (M y) C))
           (of/lam DofM'')
           <- ({y}
                 weaken-of-gen (append/cons Dappend) (append/cons Dappend') (DofM y)
		 (DofM'' y : of (cons G' y B) (M y) C)).

-app    : weaken-of-gen Dappend Dappend'
           (of/app DofM2 DofM1)
           (of/app DofM2' DofM1')
           <- weaken-of-gen Dappend Dappend' DofM1 DofM1'
           <- weaken-of-gen Dappend Dappend' DofM2 DofM2'.

%worlds (var) (weaken-of-gen _ _ _ _).
%total D (weaken-of-gen _ _ D _).



weaken1-of : of G M B
%%
	       -> of (cons G X A) M B
	       -> type.
%mode +{G:ctx} +{X:exp} +{M:exp} +{B:tp} +{A:tp} +{X1:of G M B}
   -{X2:of (cons G X A) M B} (weaken1-of X1 X2).

-       : weaken1-of Dof Dof'
           <- weaken-of-gen append/nil append/nil Dof Dof'.

%worlds (var) (weaken1-of _ _).
%total {} (weaken1-of _ _).



weaken-of : append G1 G2 G
	      -> of G1 M A
%%
	      -> of G M A
	      -> type.
%mode weaken-of +X1 +X2 -X3.

-       : weaken-of append/nil D D.

-       : weaken-of (append/cons Dappend) Dof Dof''
           <- weaken-of Dappend Dof Dof'
           <- weaken1-of Dof' Dof''.

%worlds (var) (weaken-of _ _ _).
%total D (weaken-of D _ _).



%%%%%  Values  & Stacks %%%%%

val      : type.  %name val V.
vctx     : type.  %name vctx H.

v        : val.
clo      : vctx -> (exp -> exp) -> val.
bin      : (exp -> val) -> val.
vnil     : vctx.
vcons    : vctx -> exp -> val -> vctx.

val-eq : val -> val -> type.
val-eq/i : val-eq A A.

false-implies-val-eq : false -> val-eq A B -> type.
%mode +{A:val} +{B:val} +{X1:false} -{X2:val-eq A B} (false-implies-val-eq X1 X2).
%worlds (var | ovar) (false-implies-val-eq _ _).
%total {} (false-implies-val-eq _ _).

vordered : vctx -> type.
vbounded : vctx -> exp -> type.
%{
"ordered G" means that the assumptions are listed in increasing order by stamp.
"bounded G X" means that G is ordered and all assumptions are less than X.
}%

vordered/nil    : vordered vnil.

vordered/cons   : vordered (vcons H X _)
                   <- vbounded H X.

vbounded/nil    : vbounded vnil X
                   <- isvar X _.

vbounded/cons   : vbounded (vcons H Y _) X
                   <- precedes Y X
                   <- vbounded H Y.



vlookup : vctx -> exp -> val -> type.

vlookup/hit     : vlookup (vcons H X V) X V.

vlookup/miss    : vlookup (vcons H Y _) X V
                   <- vlookup H X V.



vappend : vctx -> vctx -> vctx -> type.

vappend/nil      : vappend H vnil H.

vappend/cons     : vappend H1 (vcons H2 X V) (vcons H X V)
                   <- vappend H1 H2 H.


%%%%%  Explicit Stack Lemmas  %%%%%

vbounded-isvar : vbounded H X -> isvar X I -> type.
%mode vbounded-isvar +X1 -X2.

-       : vbounded-isvar (vbounded/nil D) D.

-       : vbounded-isvar (vbounded/cons _ (precedes/i _ D _)) D.

%worlds (ovar) (vbounded-isvar _ _).
%total {} (vbounded-isvar _ _).

vbounded-is-vordered : vbounded H X
%%
		      -> vordered H
		      -> type.
%mode vbounded-is-vordered +X1 -X2.

-       : vbounded-is-vordered (vbounded/nil _) vordered/nil.

-       : vbounded-is-vordered (vbounded/cons D _) (vordered/cons D).

%worlds (ovar) (vbounded-is-vordered _ _).
%total {} (vbounded-is-vordered _ _).



vbounded-increase : vbounded H X
                    -> precedes X Y
%%
                    -> vbounded H Y
		    -> type.
%mode vbounded-increase +X1 +X2 -X3.

-       : vbounded-increase
           (vbounded/nil _)
           (precedes/i _ D _)
           (vbounded/nil D).

-       : vbounded-increase
           (vbounded/cons
              (Dvbounded : vbounded H Z)
              (DprecZX : precedes Z X))
           (DprecXY : precedes X Y)
           (vbounded/cons Dvbounded DprecZY)
           <- precedes-trans DprecZX DprecXY
              (DprecZY : precedes Z Y).

%worlds (ovar) (vbounded-increase _ _ _).
%total {} (vbounded-increase _ _ _).



vappend-vbounded : vappend H1 H2 H
		  -> vbounded H X
%%
		  -> vbounded H1 X
		  -> type.
%mode vappend-vbounded +X1 +X2 -X3.

-	: vappend-vbounded vappend/nil D D.

-	: vappend-vbounded
	   (vappend/cons
	      (Dvappend : vappend H1 H2 H))
	   (vbounded/cons
	      (Dvbounded : vbounded H Y)
	      (Dprecedes : precedes Y X))
	   Dvbounded''
	   <- vappend-vbounded Dvappend Dvbounded
	      (Dvbounded' : vbounded H1 Y)
	   <- vbounded-increase Dvbounded' Dprecedes
	      (Dvbounded'' : vbounded H1 X).

%worlds (ovar) (vappend-vbounded _ _ _).
%total D (vappend-vbounded D _ _).



extend-stack : vordered H
%%
		  -> ({x} isvar x I -> vbounded H x)
		  -> type.
%mode extend-stack +X1 -X2.

-       : extend-stack vordered/nil ([x] [d:isvar x 0] vbounded/nil d).

-       : extend-stack
           (vordered/cons (Dvbounded : vbounded H Y))
           ([x] [d:isvar x (s J)] vbounded/cons Dvbounded (precedes/i Dlt d Disvar))
           <- vbounded-isvar Dvbounded
              (Disvar : isvar Y J)
           <- lt-succ J (Dlt : lt J (s J)).

%worlds (ovar) (extend-stack _ _).
%total {} (extend-stack _ _).



vordered-car : vordered (vcons H X V)
%%
	       -> isvar X I
	       -> type.
%mode vordered-car +X1 -X2.

-	: vordered-car
	   (vordered/cons
	      (Dvbounded : vbounded H X))
	   Disvar
	   <- vbounded-isvar Dvbounded (Disvar : isvar X I).

%worlds (ovar) (vordered-car _ _).
%total {} (vordered-car _ _).



vordered-cdr : vordered (vcons H X V)
%%
	       -> vordered H
	       -> type.
%mode vordered-cdr +X1 -X2.

-	: vordered-cdr
	   (vordered/cons
	      (Dvbounded : vbounded H X))
	   Dvordered
	   <- vbounded-is-vordered Dvbounded
	      (Dvordered : vordered H).

%worlds (ovar) (vordered-cdr _ _).
%total {} (vordered-cdr _ _).



vlookup-vordered : vlookup H X A
		  -> vordered H
		  -> isvar X I
		  -> type.
%mode vlookup-vordered +X1 +X2 -X3.

-	: vlookup-vordered
	   vlookup/hit
	   (Dvordered : vordered (vcons H X T))
	   Disvar
	   <- vordered-car Dvordered (Disvar : isvar X I).

-	: vlookup-vordered
	   (vlookup/miss
	      (Dvlookup : vlookup H X A))
	   (Dvordered : vordered (vcons H Y B))
	   Disvar
	   <- vordered-cdr Dvordered (Dvordered' : vordered H)
	   <- vlookup-vordered Dvlookup Dvordered' (Disvar : isvar X I).

%worlds (ovar) (vlookup-vordered _ _ _).
%total D (vlookup-vordered D _ _).



vbounded-contra : vbounded (vcons H X V) X
%%
		  -> false
		  -> type.
%mode vbounded-contra +X1 -X2.

-	: vbounded-contra
	   (vbounded/cons _ (Dprecedes : precedes X X))
	   Dfalse
	   <- precedes-irreflex Dprecedes Dfalse.

%worlds (ovar) (vbounded-contra _ _).
%total {} (vbounded-contra _ _).



vlookup-vbounded-contra : vlookup H X A
			 -> vbounded H X
%%
			 -> false
			 -> type.
%mode vlookup-vbounded-contra +X1 +X2 -X3.

-       : vlookup-vbounded-contra
	   vlookup/hit
	   (Dvbounded : vbounded (vcons H X V) X)
	   Dfalse
           <- vbounded-contra Dvbounded Dfalse.

-       : vlookup-vbounded-contra
	   (vlookup/miss
	      (Dvlookup : vlookup H X A))
	   (vbounded/cons
	      (Dvbounded : vbounded H Y)
	      (Dprecedes : precedes Y X))
	   Dfalse
           <- vbounded-increase Dvbounded Dprecedes (Dvbounded' : vbounded H X)
           <- vlookup-vbounded-contra Dvlookup Dvbounded' Dfalse.

%worlds (ovar) (vlookup-vbounded-contra _ _ _).
%total D (vlookup-vbounded-contra D _ _).



vappend-vlookup-eq : ({x} vappend (vcons H1 x V) (H2 x) (H x))
		    -> ({x} isvar x I -> vordered (H x))
		    -> ({x} vlookup (H x) x (B x))
%%
		    -> ({x} val-eq V (B x))
		    -> type.
%mode vappend-vlookup-eq +X1 +X2 +X3 -X4.

-       : vappend-vlookup-eq _ _ ([x] vlookup/hit) ([_] val-eq/i).

-       : vappend-vlookup-eq
	   ([x]
	      vappend/cons
	      (Dvappend x : vappend (vcons H1 x A) (H2 x) (H x)))
	   ([x] [d:isvar x I]
	      Dvordered x d : vordered (vcons (H x) (Y x) (C x)))
	   ([x]
	      vlookup/miss (Dvlookup x : vlookup (H x) x (B x)))
           Deq
	   <- ({x} {d:isvar x I}
		 vordered-cdr (Dvordered x d) (Dvordered' x d : vordered (H x)))
           <- vappend-vlookup-eq Dvappend Dvordered' Dvlookup (Deq : {x} val-eq A (B x)).

-       : vappend-vlookup-eq
	   ([x] vappend/nil)
	   ([x] [d:isvar x I]
	      vordered/cons (Dvbounded x d : vbounded H1 x))
	   ([x]
	      vlookup/miss (Dvlookup x : vlookup H1 x (B x)))
           Deq
           <- ({x} {d:isvar x I}
                 vlookup-vbounded-contra (Dvlookup x) (Dvbounded x d) Dfalse)
           <- ({x} false-implies-val-eq Dfalse (Deq x)).

-	: vappend-vlookup-eq
	   ([x]
	      vappend/cons
	      (Dvappend x : vappend (vcons H1 x A) (H2 x) (H x)))
	   ([x] [d:isvar x I]
	      vordered/cons (Dvbounded x d : vbounded (H x) x))
	   ([x] vlookup/hit)
	   Deq
	   <- ({x} {d:isvar x I}
		 vappend-vbounded (Dvappend x) (Dvbounded x d)
		 (Dvbounded' x d : vbounded (vcons H1 x A) x))
	   <- ({x} {d:isvar x I}
		 vbounded-contra (Dvbounded' x d) Dfalse)
	   <- ({x} false-implies-val-eq Dfalse (Deq x)).

%worlds (ovar) (vappend-vlookup-eq _ _ _ _).
%total D (vappend-vlookup-eq D _ _ _).



%% Vlookup is preserved under deletion of other variables.
vlookup-pdv : ({x} vappend (vcons H1 x A) (H2 x) (H x))
               -> vappend H1 (H2 M) H'
               -> ({x} vlookup (H x) Y (B x))
%%
               -> vlookup H' Y (B M)
	       -> type.
%mode vlookup-pdv +X1 +X2 +X3 -X4.

-       : vlookup-pdv
	   ([x] vappend/cons
	      (Dvappend x : vappend (vcons H1 x A) (H2 x) (H x)))
	   (vappend/cons
	      (Dvappend' : vappend H1 (H2 M) H'))
	   ([x] vlookup/hit)
	   %%
           vlookup/hit.

-       : vlookup-pdv
	   ([x] vappend/cons
	      (Dvappend x : vappend (vcons H1 x A) (H2 x) (H x)))
	   (vappend/cons
	      (Dvappend' : vappend H1 (H2 M) H'))
	   ([x]
	      vlookup/miss
	      (Dvlookup x : vlookup (H x) Y (B x)))
	   %%
           (vlookup/miss Dvlookup')
           <- vlookup-pdv Dvappend Dvappend' Dvlookup Dvlookup'.

-       : vlookup-pdv
	   ([x] vappend/nil)
	   vappend/nil
	   ([x] vlookup/miss
	      (Dvlookup x : vlookup _ _ (B x)))
	   %%
           (Dvlookup M).

%worlds (ovar) (vlookup-pdv _ _ _ _).
%total D (vlookup-pdv D _ _ _).



%%%%%  Evaluation Rules (Explicit Stack)  %%%%%

ev      : vctx -> exp -> val -> type.
evapp   : val -> val -> (exp -> val) -> type.

evapp/clo : evapp (clo H M) V' V
             <- {x} ev (vcons H x V') (M x) (V x).

evapp/bin : evapp (bin VM) VN ([x] (bin (V x)))
             <- {x} evapp (VM x) VN (V x).

ev/b    : ev H b v.

ev/var  : ev H X V
     <- vlookup H X V.

ev/lam  : ev H (lam A ([x] M x)) (clo H M).

ev/app  : ev H (app M N) (bin ([x] V x))
     <- ev H M VM
     <- ev H N VN
     <- evapp VM VN ([x] V x).


%query 1 1 ev vnil b V.
%query 1 1 ev vnil (app (lam o ([x] x)) b) V.
%query 1 1 ev vnil (lam o ([x] (lam o ([y] y)))) V.
%query 1 1 ev vnil (app (lam o ([x] (lam o ([y] y)))) b) V.
%query 1 1 ev vnil (app (lam o ([x] (lam o ([y] x)))) b) V.
%query 1 1 ev vnil (app (lam (arrow o o) ([x] (lam o ([y] x)))) (lam o ([x] x))) V.
%query 1 1 ev vnil (app (lam (arrow o o) ([x] (lam o ([y] y)))) (app (lam o ([x] (lam o ([y] x)))) b)) V.
%query 0 * ev vnil (app b b) V.
%query 1 1 ev vnil (app (app (lam o ([x] (lam o ([y] y)))) b) b) V.
%query 1 1 ev vnil (app (app (app (lam o ([x] (lam o ([y] (lam o [z] y))))) b) b) b) V.

%%%%%  Value Typing (Explicit Context & Stack)  %%%%%

wfv      : val -> ctx -> tp -> type.
wfe      : vctx -> ctx -> type.

wfv/v    : wfv v G o.

wfv/clo  : wfv (clo H ([x] M x)) G (arrow A B)
      <- wfe H G'
      <- ({x} of (cons G' x A) (M x) B)
      <- ordered G'.

wfv/bin  : wfv (bin V) G A
            <- {x}{d:isvar x I} wfv (V x) G A.

wfe/nil  : wfe vnil nil.

wfe/cons : wfe (vcons H X V) (cons G X A)
      <- wfv V G A
      <- wfe H G.

1exp = (app (lam o ([x] (lam o ([y] x)))) b).
%define 1tp = A
%solve 1of : of nil 1exp A.
%define 1clo = V
%solve  1ev : ev vnil 1exp V.
%query 1 1 wfv 1clo nil A.

false-implies-wfv : false -> wfv V G A -> type.
%mode +{V:val} +{G:ctx} +{A:tp} +{X1:false} -{X2:wfv V G A} (false-implies-wfv X1 X2).
%worlds (var | ovar) (false-implies-wfv _ _).
%total {} (false-implies-wfv _ _).

%%%%%  Safety  %%%%%

bounded-to-vbounded : wfe H G -> bounded G X -> vbounded H X -> type.
%mode bounded-to-vbounded +X1 +X2 -X3.

bounded2v/nil  : bounded-to-vbounded wfe/nil (bounded/nil D) (vbounded/nil D).

bounded2v/cons : bounded-to-vbounded (wfe/cons WE WV) (bounded/cons BG P) (vbounded/cons HG P)
            <- bounded-to-vbounded WE BG HG.

%worlds (ovar) (bounded-to-vbounded _ _ _).
%total A (bounded-to-vbounded A _ _).

ordered-to-vordered : wfe H G -> ordered G -> vordered H -> type.
%mode ordered-to-vordered +X1 +X2 -X3.

ordered2v/nil  : ordered-to-vordered wfe/nil ordered/nil vordered/nil.

ordered2v/cons : ordered-to-vordered (wfe/cons WE WV) (ordered/cons GB) (vordered/cons HB)
            <- bounded-to-vbounded WE GB HB.

%worlds (ovar) (ordered-to-vordered _ _ _).
%total {} (ordered-to-vordered _ _ _).

extend-env : wfe H G
              -> ordered G
%%
		  -> ({x} isvar x I -> bounded G x)
		  -> ({x} isvar x I -> vbounded H x)
		  -> type.
%mode extend-env +X1 +X2 -X3 -X4.

-       : extend-env wfe/nil ordered/nil ([x] [d:isvar x 0] bounded/nil d) ([x] [d:isvar x 0] vbounded/nil d).

-       : extend-env
           (wfe/cons WE WV)
           (ordered/cons Dbounded)
           ([x] [d:isvar x (s J)] bounded/cons Dbounded (precedes/i Dlt d Disvar))
           ([x] [d:isvar x (s J)] vbounded/cons Dvbounded (precedes/i Dlt d Disvar))
           <- bounded-to-vbounded WE Dbounded Dvbounded
           <- bounded-isvar Dbounded
              (Disvar : isvar Y J)
           <- lt-succ J (Dlt : lt J (s J)).

%worlds (ovar) (extend-env _ _ _ _).
%total {} (extend-env _ _ _ _).

extend-wfv  :  {X}{A} wfv V G T
%%
               -> wfv V (cons G X A) T
        -> type.
%mode extend-wfv +X1 +X2 +X3 -X4.

-      : extend-wfv _ _ wfv/v wfv/v.

-      : extend-wfv _ _ (wfv/clo OG T WE) (wfv/clo OG T WE).

-      : extend-wfv X A (wfv/bin W) (wfv/bin W')
    <- {x}{d:isvar x I} extend-wfv X A (W x d) (W' x d).

%worlds (var | ovar) (extend-wfv _ _ _ _).
%total W (extend-wfv _ _ W _).

change-wfv  :  wfv V G' T -> {G}
%%
               wfv V G T
        -> type.
%mode change-wfv +X1 +X2 -X3.

-      : change-wfv wfv/v _ wfv/v.

-      : change-wfv (wfv/clo OG T WE) _ (wfv/clo OG T WE).

-      : change-wfv (wfv/bin W) G (wfv/bin W')
    <- {x}{d:isvar x I} change-wfv (W x d) G (W' x d).

%worlds (var | ovar) (change-wfv _ _ _).
%total W (change-wfv W _ _).

restrict-wfv : ({x:exp} isvar x I -> wfv (V x) (cons G x AX) A)
                -> {G'}
%%
                ({x:exp} isvar x I -> wfv (V x) G' A)
        -> type.
%mode restrict-wfv +X1 +X2 -X3.

-      : restrict-wfv ([x][d:isvar x I] wfv/v) _ ([x][d:isvar x I] wfv/v).

-      : restrict-wfv
          ([x][d:isvar x I] (wfv/clo (OG x d) ([y] (T x y)) (WE x d)))
          _
          ([x][d:isvar x I] (wfv/clo (OG x d) ([y] (T x y)) (WE x d))).

-      : restrict-wfv ([x][d:isvar x I] (wfv/bin (W x d))) G' ([x][d:isvar x I](wfv/bin (W' x d)))
    <- {y}{e:isvar y J} restrict-wfv ([x][d:isvar x I](W x d y e)) G' ([x][d:isvar x I](W' x d y e)).

%worlds (ovar) (restrict-wfv _ _ _).
%total W (restrict-wfv W _ _).

lookup-safe : wfe H G
               -> lookup G X A
               -> vlookup H X V
               -> ordered G
               -> vordered H
%%
               -> wfv V G A
         -> type.
%mode lookup-safe +X1 +X2 +X3 +X4 +X5 -X6.

-       : lookup-safe (wfe/cons WE WV) lookup/hit vlookup/hit OG OH WV'
     <- extend-wfv _ _ WV WV'.

-       : lookup-safe (wfe/cons WE WV) (lookup/miss LG) (vlookup/miss LH) (ordered/cons BG) (vordered/cons BH) WV''
     <- bounded-is-ordered BG OG
     <- vbounded-is-vordered BH OH
     <- lookup-safe WE LG LH OG OH WV'
     <- extend-wfv _ _ WV' WV''.

-       : lookup-safe (wfe/cons WE (WV: wfv _ _ A)) lookup/hit (vlookup/miss LH) OG (vordered/cons BH) W'
     <- vlookup-vbounded-contra LH BH CONTRA
     <- false-implies-wfv CONTRA (W': wfv _ _ A).

-       : lookup-safe (wfe/cons WE WV) ((lookup/miss LG): lookup _ _ A) vlookup/hit (ordered/cons BG) OH W'
     <- lookup-bounded-contra LG BG CONTRA
     <- false-implies-wfv CONTRA (W': wfv _ _ A).

%worlds (ovar) (lookup-safe _ _ _ _ _ _).
%total W (lookup-safe W _ _ _ _ _).

ev-safe     : of G M A
               -> wfe H G
               -> ordered G
               -> vordered H
               -> ev H M V
%%
               -> wfv V G A
    -> type.
%mode ev-safe +X1 +X2 +X3 +X4 +X5 -X6.

evapp-safe  : wfv VFUN G (arrow A1 A2)
               -> wfv VARG G A1
               -> evapp VFUN VARG V
%%
               -> wfv (bin V) G A2
    -> type.
%mode evapp-safe +X1 +X2 +X3 -X4.

-   : ev-safe (of/b: of G _ o) WE OG OH ((ev/var LH): ev H _ V) W
 <- vlookup-vordered LH OH D
 <- isvar-not-b D CONTRA
 <- false-implies-wfv CONTRA (W: wfv V G o).

-   : ev-safe ((of/var LG): of G _ A) WE OG OH ev/b W
 <- lookup-ordered LG OG D
 <- isvar-not-b D CONTRA
 <- false-implies-wfv CONTRA (W: wfv v G A).

-   : ev-safe ((of/lam T): of G _ (arrow A1 A2)) WE OG OH ((ev/var LH): ev H _ V) W
 <- vlookup-vordered LH OH D
 <- isvar-not-lam D CONTRA
 <- false-implies-wfv CONTRA (W: wfv V G (arrow A1 A2)).

-   : ev-safe ((of/var LG): of G _ A) WE OG OH (ev/lam: ev _ _ (clo H M)) W
 <- lookup-ordered LG OG D
 <- isvar-not-lam D CONTRA
 <- false-implies-wfv CONTRA (W: wfv (clo H M) G A).

-   : ev-safe ((of/app TARG TFUN): of G _ A) WE OG OH ((ev/var LH): ev H _ V) W
 <- vlookup-vordered LH OH D
 <- isvar-not-app D CONTRA
 <- false-implies-wfv CONTRA (W: wfv V G A).

-   : ev-safe ((of/var LG): of G _ A) WE OG OH ((ev/app _ _ _):  ev _ _ (bin V)) W
 <- lookup-ordered LG OG D
 <- isvar-not-app D CONTRA
 <- false-implies-wfv CONTRA (W: wfv (bin V) G A).

-   : ev-safe of/b WE _ _ ev/b wfv/v.

-   : ev-safe (of/var LG) WE OG OH (ev/var LH) W
 <- lookup-safe WE LG LH OG OH W.

-   : ev-safe (of/lam T) WE OG OH ev/lam (wfv/clo OG T WE).

-   : evapp-safe (wfv/clo (OG: ordered G) TFUN WE) (WARG: wfv _ G' _) (evapp/clo EV) (wfv/bin W')
 <- ordered-to-vordered WE OG OH
 <- extend-env WE OG FG FH
 <- change-wfv WARG G WARG'
 <- ({x}{d:isvar x I} ev-safe (TFUN x) (wfe/cons WE WARG') (ordered/cons (FG x d)) (vordered/cons (FH x d)) (EV x) (W x d))
 <- restrict-wfv W G' W'.

-   : evapp-safe (wfv/bin W) WARG (evapp/bin EV) (wfv/bin W')
 <- ({x}{d:isvar x I} evapp-safe (W x d) WARG (EV x) (W' x d)).

-   : ev-safe (of/app TARG TFUN) WE OG OH (ev/app EVAPP EVARG EVFUN) W
 <- ev-safe TARG WE OG OH EVARG WARG
 <- ev-safe TFUN WE OG OH EVFUN WFUN
 <- evapp-safe WFUN WARG EVAPP W.

%worlds (ovar) (ev-safe _ _ _ _ _ _) (evapp-safe _ _ _ _).
%total  {(A2 B2) (A1 B1)}  (ev-safe A1 _ _ _ A2 _) (evapp-safe B1 _ B2 _).
