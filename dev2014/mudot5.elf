%{ ------- arithmetic ----- }%

nat: type.
z: nat.
s: nat -> nat.

add : nat -> nat -> nat -> type.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.

%mode add +N1 +N2 -N3.

lte : nat -> nat -> type.
lte/z : lte z N.
lte/s : lte (s N1) (s N2)
   <- lte N1 N2.

%mode lte +N1 +N2.


eq : nat -> nat -> type.
eq/z : eq z z.
eq/s : eq (s N1) (s N2)
   <- eq N1 N2.

% %mode eq +N1 +N2.


ne : nat -> nat -> type.
ne/z1 : ne z (s N).
ne/z2 : ne (s N) z.
ne/s : ne (s N1) (s N2)
   <- ne N1 N2.

%mode ne +N1 +N2.

eq-refl: {N:nat} eq N N -> type.
%mode eq-refl +N -E1.

- : eq-refl z eq/z.
- : eq-refl (s N) (eq/s E) <- eq-refl N E.

%worlds () (eq-refl _ _).
%total {A} (eq-refl A _).


sub-eq: eq A1 A2 -> eq C1 C2 -> add A1 B1 C1 -> add A2 B2 C2 -> eq B1 B2 -> type.
%mode sub-eq +E1 +E2 +A1 +A2 -E3.

- : sub-eq eq/z E add/z add/z E.
- : sub-eq (eq/s E1) (eq/s E2) (add/s A1) (add/s A2) E3
  <- sub-eq E1 E2 A1 A2 E3.

%worlds () (sub-eq _ _ _ _ _).
%total {A} (sub-eq A _ _ _ _).

add-inc: add A B C -> add A (s B) (s C) -> type.
%mode add-inc +E1 -E2.

- : add-inc add/z add/z.
- : add-inc (add/s A1) (add/s A2)
  <- add-inc A1 A2.

%worlds () (add-inc _ _).
%total {A} (add-inc A _).



%{ ------- language ----- }%

% sorts
exp: type.

tpe: type.
val: type.

tenv: type.

% members

dec: type.
rect: tpe -> tpe -> dec.

% types

top  : tpe.
arrow: tpe -> tpe -> tpe.
tsel : tpe.         % x.T
bind : dec -> tpe.     % { this_n => A }


tcons : dec -> tenv.
tnil : tenv.

stp: tenv -> tpe -> tenv -> tpe -> type.

sdc: tenv -> dec -> tenv -> dec -> type.

sdc/rect: sdc G1 (rect TA1 TB1) G2 (rect TA2 TB2) 
          <- stp G1 TA2 G2 TA1 % swap G1 G2?
          <- stp G1 TB1 G2 TB2
          <- stp G1 TA1 G2 TB1
          <- stp G1 TA2 G2 TB2
          .

stp/top: stp tnil T tnil top.
stp/topc: stp (tcons D1) T (tcons D2) top.

stp/fun: stp tnil (arrow TA1 TB1) tnil (arrow TA2 TB2) 
          <- stp tnil TA2 tnil TA1
          <- stp tnil TB1 tnil TB2 
          .

stp/func: stp (tcons D1) (arrow TA1 TB1) (tcons D2) (arrow TA2 TB2) 
          <- stp (tcons D1) TA2 (tcons D2) TA1
          <- stp (tcons D1) TB1 (tcons D2) TB2 
          .



stp/sel1: stp (tcons (rect TA1 TB1)) tsel (tcons (rect TA2 TB2)) T2 
          <- stp (tcons (rect TA1 TB1)) TB1 (tcons (rect TA2 TB2)) T2
          .

stp/sel2: stp (tcons (rect TA1 TB1)) T1 (tcons (rect TA2 TB2)) tsel
          % <- sdc (tcons (rect TA1 TB1)) (rect TA1 TB1) (tcons (rect TA2 TB2)) (rect TA2 TB2)
          <- stp (tcons (rect TA1 TB1)) T1 (tcons (rect TA2 TB2)) TB2       % XXX trans: TA1 must be new lower thing!
          <- stp (tcons (rect TA1 TB1)) T1 (tcons (rect TA1 TB1)) TA1       % XXX trans: TA1 must be new lower thing -> TA0!
          .

stp/selx: stp (tcons (rect TA1 TB1)) tsel (tcons (rect TA2 TB2)) tsel
          <- stp (tcons (rect TA1 TB1)) TB1 (tcons (rect TA2 TB2)) TB2
          .

stp/bind: stp tnil (bind D1) tnil (bind D2)
          <- sdc (tcons D1) D1 (tcons D2) D2
          .


% case tsel2-any

stp-magic: stp (tcons (rect TA1 TB1)) T1 (tcons (rect TA2 TB2)) T2 ->   % D1 < D2 |- TA2 < TA1
           stp (tcons (rect TA1 TB1)) TX (tcons (rect TA2 TB2)) TA2 ->  % D1 < D2 |- TX < TA2
           stp (tcons (rect TA1 TB1)) TX (tcons (rect TA1 TB1)) TA1 ->  % D1 < D2 |- TX < TA2
           type.
%mode stp-magic +SBT1 +SBT2 -SBT3.
%worlds () (stp-magic _ _ _).
%trustme
%total N (stp-magic N _ _).

% case tsel1-tselx (asymmmetric)

stp-magic2: stp (tcons (rect L1 U1)) U1 (tcons (rect L2 U2)) T1 ->   % D1 < D2 |- U1 < T1  U1 < U2 
            stp (tcons (rect L2 U2)) U2 (tcons (rect L3 U3)) U3 ->   % D2 < D3 |- U2 < U3
            stp (tcons (rect L1 U1)) U1 (tcons (rect L3 U3)) T1 ->   % D1 < D3 |- U1 < T1
            type.
%mode stp-magic2 +SBT1 +SBT2 -SBT3.
%worlds () (stp-magic2 _ _ _).
%trustme
%total N (stp-magic2 N _ _).




%% combined trans + weakening lemma
%
%  -- ignore size for the moment, need to factor in size of N0 (weakening deriv)
%  -- will need to fill in symmetric version, too (any trouble expected?)
%

stp-trans-weaken: stp G1 T1 G2 T2 -> stp G2 T2 G3 T3 -> stp G1 T1 G3 T3 -> type.
%mode stp-trans-weaken +SBT1 +SBT2 -SBT3.

stp-trans-weaken2: stp G1 T2 G2 T1 -> stp G2 T3 G3 T2 -> stp G1 T3 G3 T1 -> type.
%mode stp-trans-weaken2 +SBT1 +SBT2 -SBT3.

sdc-trans-weaken: sdc G1 T1 G2 T2 -> sdc G2 T2 G3 T3 -> sdc G1 T1 G3 T3 -> type.
%mode sdc-trans-weaken +SBT1 +SBT2 -SBT3.

%worlds () (sdc-trans-weaken _ _ _).
%trustme
%total N (sdc-trans-weaken N _ _).



-/top : stp-trans-weaken S1 stp/top stp/top.
-/topc : stp-trans-weaken S1 stp/topc stp/topc.

-/top2 : stp-trans-weaken2 stp/top S1 stp/top.
-/topc2 : stp-trans-weaken2 stp/topc S1 stp/topc.


-/fun-fun  : stp-trans-weaken
            (stp/fun SBT2 SBT1)
            (stp/fun SBT4 SBT3)
            (stp/fun SBT6 SBT5)
            <- stp-trans-weaken2 SBT1 SBT3 SBT5 
            <- stp-trans-weaken SBT2 SBT4 SBT6
            .

-/fun-fun--X2  : stp-trans-weaken2
            (stp/fun SBT2 SBT1)
            (stp/fun SBT4 SBT3)
            (stp/fun SBT6 SBT5)
            <- stp-trans-weaken SBT1 SBT3 SBT5
            <- stp-trans-weaken2 SBT2 SBT4 SBT6
            .

-/func-func  : stp-trans-weaken
            (stp/func SBT2 SBT1)
            (stp/func SBT4 SBT3)
            (stp/func SBT6 SBT5)
            <- stp-trans-weaken2 SBT1 SBT3 SBT5
            <- stp-trans-weaken SBT2 SBT4 SBT6
            .
-/func-func--X2  : stp-trans-weaken2
            (stp/func SBT2 SBT1)
            (stp/func SBT4 SBT3)
            (stp/func SBT6 SBT5)
            <- stp-trans-weaken SBT1 SBT3 SBT5
            <- stp-trans-weaken2 SBT2 SBT4 SBT6
            .

-/tsel1 :   stp-trans-weaken
            (stp/sel1 ST_U1)
            SBT2
            (stp/sel1 ST_U1')
            <- stp-trans-weaken ST_U1 SBT2 ST_U1'
            .
%{
-/tsel1--X2 : stp-trans-weaken2
            SBT2
            (stp/sel1 ST_U1)
            (stp/sel1 ST_U1')
            <- stp-trans-weaken2 SBT2 ST_U1 ST_U1'x
            .
}%

-/tsel2 :   stp-trans-weaken
            SBT1
            (stp/sel2 ST_1L ST_2U)
            (stp/sel2 ST_1L'' ST_2U')
            <- stp-trans-weaken SBT1 ST_1L ST_1L'
            <- stp-trans-weaken SBT1 ST_2U ST_2U'
            <- stp-magic SBT1 ST_1L' ST_1L''
            .

-/tsel2-tsel1 : stp-trans-weaken
            (stp/sel2 ST_1L ST_1U)
            (stp/sel1 ST_U2)
            OUT
            <- stp-trans-weaken ST_1U ST_U2 OUT
            .


-/tsel1-tselx : stp-trans-weaken
            ((stp/selx ST0): stp (tcons (rect L1 U1)) tsel (tcons (rect L2 U2)) tsel)
            (stp/sel1 ST_U1)
            (stp/sel1 ST_U1')
            <- stp-trans-weaken ST0 ST_U1 ST_U1'
            .

-/tsel1-tselx--X2 : stp-trans-weaken2
            (stp/sel1 (ST_U1: stp (tcons (rect L1 U1)) U1 (tcons (rect L2 U2)) T1))
            (stp/selx (ST0:   stp (tcons (rect L2 U2)) U2 (tcons (rect L3 U3)) U3))
            (stp/sel1 ST_U1')
            % <- stp-trans-weaken2 ST_U1 ST0 ST_U1'x
            <- stp-magic2 ST_U1 ST0 ST_U1'
            .

-/tsel2-tselx : stp-trans-weaken
            (stp/sel2 ST_1L ST_U1)
            ((stp/selx ST0): stp (tcons (rect L1 U1)) tsel (tcons (rect L2 U2)) tsel)
            (stp/sel2 ST_1L ST_U1')
            <- stp-trans-weaken ST_U1 ST0 ST_U1'
            .


-/tselx-tselx : stp-trans-weaken
            (stp/selx SBT1)
            (stp/selx SBT2)
            (stp/selx SBT3)
            <- stp-trans-weaken SBT1 SBT2 SBT3
            .

-/tselx-tselx--X2 : stp-trans-weaken2
            (stp/selx SBT1)
            (stp/selx SBT2)
            (stp/selx SBT3)
            <- stp-trans-weaken SBT1 SBT2 SBT3  %%% FIXME ???
            .


-/tbind-bind : stp-trans-weaken
            (stp/bind S1)
            (stp/bind S2)
            (stp/bind S3)
            <- sdc-trans-weaken S1 S2 S3
            .

-/tbind-bind--X2 : stp-trans-weaken2
            (stp/bind S1)
            (stp/bind S2)
            (stp/bind S3)
            <- sdc-trans-weaken S2 S1 S3
            .


%worlds () (stp-trans-weaken _ _ _)(stp-trans-weaken2 _ _ _).

%covers stp-trans-weaken +A +B -C.

%covers stp-trans-weaken2 +A +B -C.


%total [(A A') (B B')] (stp-trans-weaken A B _ )(stp-trans-weaken2 A' B' _).


