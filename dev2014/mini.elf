%{ ------- language ----- }%

tpe: type.
dec: type.
topt: type.

top: tpe.
tbind: dec -> tpe.
tsel: tpe.

tnone: topt.
tsome: tpe -> topt.

rect: topt -> tpe -> dec.

%{ ------- environments ----- }%

% environments
tenv  : type.
tnil  : tenv.
tcons : dec -> tenv.

tlookup: tenv -> dec -> type.
tl  : tlookup (tcons D) D.

%{ ------- subtyping ------ }%

has-lower : dec -> tpe -> type.
has-lower/yes : has-lower (rect (tsome S) U) S.

has-upper : dec -> tpe -> type.
has-upper/yes : has-upper (rect _ U) U.

wf-tp : tenv -> tpe -> type.
wf-dc : tenv -> dec -> type.
sub-tp : tenv -> tpe -> tpe -> type.
sub-dc : tenv -> dec -> dec -> type.

sub-env : tenv -> tenv -> type.
sub-env/tnil  : sub-env (tcons D) tnil.
sub-env/tcons : sub-env (tcons D1) (tcons D2)
            <- sub-dc (tcons D1) D1 D2.

sub-tp/top : sub-tp G T top
          <- wf-tp G top % redundant, but helps reduce regularity
          <- wf-tp G T.
sub-tp/tsel1 : sub-tp G tsel T
            <- tlookup G D
            <- wf-dc G D
            <- wf-tp G tsel % redundant, but helps reduce regularity
            <- has-upper D U
            <- sub-tp G U T
            .
sub-tp/tsel2 : sub-tp G T tsel
            <- tlookup G D
            <- wf-dc G D
            <- wf-tp G tsel % redundant, but helps reduce regularity
            <- has-lower D S
            <- sub-tp G T S
            % redundant, but helps weak/trans termination
            <- has-upper D U
            <- sub-tp G T U
            .
sub-tp/tbind : sub-tp G (tbind D1) (tbind D2)
            <- wf-tp G (tbind D1) % redundant but helps reduce regularity
            <- wf-tp G (tbind D2)
            <- sub-env (tcons D1) (tcons D2)
            % equivalent to sub-dc (tcons D1) D1 D2
            % but helps with termination
            .

sub-dc/ss : sub-dc G (rect (tsome S1) U1) (rect (tsome S2) U2)
         <- sub-tp G S2 S1
         <- sub-tp G U1 U2
         <- sub-tp G S1 U1
         <- sub-tp G S2 U2
         <- sub-tp G S2 U1 % redundant, but helps weak/trans termination
         <- wf-dc G (rect (tsome S1) U1)  % redundant, but helps reduce regularity
         <- wf-dc G (rect (tsome S2) U2). % redundant, but helps reduce regularity
sub-dc/sn : sub-dc G (rect (tsome S1) U1) (rect tnone U2)
         <- sub-tp G U1 U2
         <- sub-tp G S1 U1
         <- wf-dc G (rect (tsome S1) U1)  % redundant, but helps reduce regularity
         <- wf-dc G (rect tnone U2). % redundant, but helps reduce regularity

sub-dc/nn : sub-dc G (rect tnone U1) (rect tnone U2)
         <- sub-tp G U1 U2
         <- wf-dc G (rect tnone U1)  % redundant, but helps reduce regularity
         <- wf-dc G (rect tnone U2). % redundant, but helps reduce regularity

wf-tp/top : wf-tp G top.
wf-tp/tbind : wf-tp G (tbind D)
           <- wf-dc (tcons D) D.
wf-tp/tsel : wf-tp G tsel
          <- tlookup G D
          <- wf-dc G D.

wf-dc/s : wf-dc G (rect (tsome S) U)
       <- sub-tp G S U.
wf-dc/n : wf-dc G (rect tnone U)
       <- wf-tp G U.

%%% PROOFS %%%

%{ ------- uniqueness ------ }%

same: tpe -> tpe -> type.
ident: same T T.

samed: dec -> dec -> type.
identd: samed T T.

sameopt : topt -> topt -> type.
identopt: sameopt T T.

sametenv: tenv -> tenv -> type.
identtenv: sametenv G G.

false: type.

tlookup-eq : tlookup G D1 -> tlookup G D2 -> samed D1 D2 -> type.
%mode tlookup-eq +A +B -C.

- : tlookup-eq tl tl identd.

%worlds () (tlookup-eq _ _ _).
%total A (tlookup-eq A _ _).

eq-sub-tp-low : same T1 T1' -> sub-tp G T1 T2 -> sub-tp G T1' T2 -> type.
%mode eq-sub-tp-low +A +B -C.

- : eq-sub-tp-low ident BT BT.

%worlds () (eq-sub-tp-low _ _ _).
%total A (eq-sub-tp-low A _ _).
%reduces C <= B (eq-sub-tp-low _ B C).

eq-sub-tp-high : same T2 T2' -> sub-tp G T1 T2 -> sub-tp G T1 T2' -> type.
%mode eq-sub-tp-high +A +B -C.

- : eq-sub-tp-high ident BT BT.

%worlds () (eq-sub-tp-high _ _ _).
%total A (eq-sub-tp-high A _ _).
%reduces C <= B (eq-sub-tp-high _ B C).

eq-sub-dc-low : samed D1 D1' -> sub-dc G D1 D2 -> sub-dc G D1' D2 -> type.
%mode eq-sub-dc-low +A +B -C.

- : eq-sub-dc-low identd BD BD.

%worlds () (eq-sub-dc-low _ _ _).
%total A (eq-sub-dc-low A _ _).
%reduces C <= B (eq-sub-dc-low _ B C).

eq-sub-dc-high : samed D2 D2' -> sub-dc G D1 D2 -> sub-dc G D1 D2' -> type.
%mode eq-sub-dc-high +A +B -C.

- : eq-sub-dc-high identd BD BD.

%worlds () (eq-sub-dc-high _ _ _).
%total A (eq-sub-dc-high A _ _).
%reduces C <= B (eq-sub-dc-high _ B C).

upper-eq : samed D D' -> has-upper D U -> has-upper D' U' -> same U U' -> type.
%mode upper-eq +A +B +C -D.

- : upper-eq identd has-upper/yes has-upper/yes ident.

%worlds () (upper-eq _ _ _ _).
%total A (upper-eq A _ _ _).

%{ ------- regularity ------ }%

extract-wfd : sub-dc G T1 T2 -> wf-dc G T1 -> wf-dc G T2 -> type.
%mode extract-wfd +A -B -C.
extract-wf : sub-tp G T1 T2 -> wf-tp G T1 -> wf-tp G T2 -> type.
%mode extract-wf +A -B -C.

- : extract-wf (sub-tp/top W WT) W WT.

- : extract-wf (sub-tp/tsel1 B H W1 D L)
     W1
     W2
 <- extract-wf B _ W2.

- : extract-wf (sub-tp/tsel2 _ _ B H W2 D L)
     W1
     W2
 <- extract-wf B W1 _.

- : extract-wf (sub-tp/tbind (sub-env/tcons BD) W2 W1)
     W1
     W2.

- : extract-wfd (sub-dc/ss W2 W1 _ B2 B1 BU BS)
     W1
     W2.

- : extract-wfd (sub-dc/sn W2 W1 B1 BU)
     W1
     W2.

- : extract-wfd (sub-dc/nn W2 W1 BU)
     W1
     W2.

%worlds () (extract-wf _ _ _) (extract-wfd _ _ _).
%total (A B) (extract-wf A _ _) (extract-wfd B _ _).

% copies of extract-wf for separate reduce clauses
extract-wf1 : sub-tp G T1 T2 -> wf-tp G T1 -> type.
%mode extract-wf1 +A -B.

- : extract-wf1 (sub-tp/top W WT) W.

- : extract-wf1 (sub-tp/tsel1 B H W1 D L)
     W1.

- : extract-wf1 (sub-tp/tsel2 _ _ B H W2 D L)
     W1
 <- extract-wf1 B W1.


- : extract-wf1 (sub-tp/tbind (sub-env/tcons BD) W2 W1)
     W1.

%worlds () (extract-wf1 _ _).
%total A (extract-wf1 A _).
%reduces W1 < B (extract-wf1 B W1).

extract-wf2 : sub-tp G T1 T2 -> wf-tp G T2 -> type.
%mode extract-wf2 +A -B.

- : extract-wf2 (sub-tp/top W WT) WT.

- : extract-wf2 (sub-tp/tsel1 B H W1 D L)
     W2
 <- extract-wf2 B W2.

- : extract-wf2 (sub-tp/tsel2 _ _ B H W2 D L)
     W2.

- : extract-wf2 (sub-tp/tbind (sub-env/tcons BD) W2 W1)
     W2.

%worlds () (extract-wf2 _ _).
%total A (extract-wf2 A _).
%reduces W2 < B (extract-wf2 B W2).

%{ ------- transitivity & weakening ------ }%

has-upper-eq : has-upper (rect OS U) U' -> same U U' -> type.
%mode has-upper-eq +A -B.

- : has-upper-eq has-upper/yes ident.

%worlds () (has-upper-eq _ _).
%total A (has-upper-eq A _).

has-lower-eq : has-lower (rect (tsome S) U) S' -> same S S' -> type.
%mode has-lower-eq +A -B.

- : has-lower-eq has-lower/yes ident.

%worlds () (has-lower-eq _ _).
%total A (has-lower-eq A _).

tlookup-upper-eq : tlookup (tcons (rect OS U)) (rect OS' U') -> same U U' -> type.
%mode tlookup-upper-eq +A -B.

- : tlookup-upper-eq tl ident.

%worlds () (tlookup-upper-eq _ _).
%total A (tlookup-upper-eq A _).

tlookup-lower-eq : tlookup (tcons (rect (tsome S) U)) (rect (tsome S') U') -> same S S' -> type.
%mode tlookup-lower-eq +A -B.

- : tlookup-lower-eq tl ident.

%worlds () (tlookup-lower-eq _ _).
%total A (tlookup-lower-eq A _).

eq-dec-has-upper : samed D D' -> has-upper D U -> has-upper D' U -> type.
%mode eq-dec-has-upper +A +B -C.

- : eq-dec-has-upper identd has-upper/yes has-upper/yes.

%worlds () (eq-dec-has-upper _ _ _).
%total A (eq-dec-has-upper A _ _).

trans-same : same T1 T2 -> same T2 T3 -> same T1 T3 -> type.
%mode trans-same +A +B -C.

- : trans-same ident ident ident.

%worlds () (trans-same _ _ _).
%total {} (trans-same _ _ _).

sym-same : same T1 T2 -> same T2 T1 -> type.
%mode sym-same +A -B.

- : sym-same ident ident.

%worlds () (sym-same _ _).
%total {} (sym-same _ _).

sub-lookup  : sub-env G1 G2 -> tlookup G2 D2 -> tlookup G1 D1 -> sub-dc (tcons D1) D1 D2 -> type.
%mode sub-lookup +SE +L2 -L1 -BD.

- : sub-lookup (sub-env/tcons BD) L2 tl BD.

%worlds () (sub-lookup _ _ _ _).
%total SE (sub-lookup SE _ _ _).

weak-wf-tp  : sub-env G1 G2 -> wf-tp G2 T -> wf-tp G1 T -> type.
%mode weak-wf-tp +BE +A2 -A1.
weak-wf-dc  : sub-env G1 G2 -> wf-dc G2 D -> wf-dc G1 D -> type.
%mode weak-wf-dc +BE +A2 -A1.
weak-sub-tp : sub-env G1 G2 -> sub-tp G2 TA TB -> sub-tp G1 TA TB -> type.
%mode weak-sub-tp +BE +A2 -A1.
weak-sub-dc : sub-env G1 G2 -> sub-dc G2 DA DB -> sub-dc G1 DA DB -> type.
%mode weak-sub-dc +BE +A2 -A1.
trans-sub-tp: wf-tp G T2 -> sub-tp G T1 T2 -> sub-tp G T2 T3 -> sub-tp G T1 T3 -> type.
%mode trans-sub-tp +W2 +A12 +A23 -A13.
trans-sub-dc: wf-dc G T2 -> sub-dc G D1 D2 -> sub-dc G D2 D3 -> sub-dc G D1 D3 -> type.
%mode trans-sub-dc +WD2 +A12 +A23 -A13.

- : weak-wf-tp _ wf-tp/top wf-tp/top.
- : weak-wf-tp _ (wf-tp/tbind WD) (wf-tp/tbind WD).
- : weak-wf-tp (sub-env/tcons BD) (wf-tp/tsel WD L) (wf-tp/tsel WD' tl)
 <- extract-wfd BD WD' _.

- : weak-wf-dc SE (wf-dc/s BSU) (wf-dc/s BSU')
 <- weak-sub-tp SE BSU BSU'.

- : weak-wf-dc SE (wf-dc/n WU) (wf-dc/n WU')
 <- weak-wf-tp SE WU WU'.

- : weak-sub-tp SE (sub-tp/top W WT) (sub-tp/top W' WT')
 <- weak-wf-tp SE W W'
 <- weak-wf-tp SE WT WT'.

- : weak-sub-tp (sub-env/tcons (sub-dc/ss WD2 WD1 BSU B2 B1 BU BS)) (sub-tp/tsel1 B H W D L) (sub-tp/tsel1 B' has-upper/yes W' (wf-dc/s B1) tl)
 <- weak-wf-tp (sub-env/tcons (sub-dc/ss WD2 WD1 BSU B2 B1 BU BS)) W W'
 <- weak-sub-tp (sub-env/tcons (sub-dc/ss WD2 WD1 BSU B2 B1 BU BS)) B BM
 <- tlookup-upper-eq L EQU'
 <- has-upper-eq H EQU
 <- trans-same EQU' EQU EQU''
 <- eq-sub-tp-high EQU'' BU BU'
 <- extract-wf2 BU' W2
 <- trans-sub-tp W2 BU' BM B'.
- : weak-sub-tp (sub-env/tcons (sub-dc/sn WD2 WD1 B1 BU)) (sub-tp/tsel1 B H W D L) (sub-tp/tsel1 B' has-upper/yes W' (wf-dc/s B1) tl)
 <- weak-wf-tp (sub-env/tcons (sub-dc/sn WD2 WD1 B1 BU)) W W'
 <- weak-sub-tp (sub-env/tcons (sub-dc/sn WD2 WD1 B1 BU)) B BM
 <- tlookup-upper-eq L EQU'
 <- has-upper-eq H EQU
 <- trans-same EQU' EQU EQU''
 <- eq-sub-tp-high EQU'' BU BU'
 <- extract-wf2 BU' W2
 <- trans-sub-tp W2 BU' BM B'.
- : weak-sub-tp (sub-env/tcons (sub-dc/nn WD2 WD1 BU)) (sub-tp/tsel1 B H W D L) (sub-tp/tsel1 B' has-upper/yes W' (wf-dc/n W1) tl)
 <- weak-wf-tp (sub-env/tcons (sub-dc/nn WD2 WD1 BU)) W W'
 <- extract-wf BU W1 _
 <- weak-sub-tp (sub-env/tcons (sub-dc/nn WD2 WD1 BU)) B BM
 <- tlookup-upper-eq L EQU'
 <- has-upper-eq H EQU
 <- trans-same EQU' EQU EQU''
 <- eq-sub-tp-high EQU'' BU BU'
 <- extract-wf2 BU' W2
 <- trans-sub-tp W2 BU' BM B'.

- : weak-sub-tp (sub-env/tcons (sub-dc/ss WD2 WD1 BSU B2 B1 BU BS)) (sub-tp/tsel2 BUX HUX B H W D L) (sub-tp/tsel2 BUX' has-upper/yes B' has-lower/yes W' (wf-dc/s B1) tl)
 <- weak-wf-tp (sub-env/tcons (sub-dc/ss WD2 WD1 BSU B2 B1 BU BS)) W W'
 <- weak-sub-tp (sub-env/tcons (sub-dc/ss WD2 WD1 BSU B2 B1 BU BS)) B BM
 <- tlookup-lower-eq L EQS'
 <- has-lower-eq H EQS
 <- trans-same EQS' EQS EQS''
 <- eq-sub-tp-low EQS'' BS BS'
 <- extract-wf1 BS' W2
 <- trans-sub-tp W2 BM BS' B'
 <- eq-sub-tp-low EQS'' BSU BSU'
 <- trans-sub-tp W2 BM BSU' BUX'.

- : weak-sub-tp SE (sub-tp/tbind BD (wf-tp/tbind WD2) (wf-tp/tbind WD1)) (sub-tp/tbind BD (wf-tp/tbind WD2) (wf-tp/tbind WD1)).

- : weak-sub-dc SE (sub-dc/ss WD2 WD1 BSU B2 B1 BU BS) (sub-dc/ss WD2' WD1' BSU' B2' B1' BU' BS')
 <- weak-sub-tp SE BS BS'
 <- weak-sub-tp SE BU BU'
 <- weak-sub-tp SE B1 B1'
 <- weak-sub-tp SE B2 B2'
 <- weak-sub-tp SE BSU BSU'
 <- weak-wf-dc SE WD1 WD1'
 <- weak-wf-dc SE WD2 WD2'.


- : weak-sub-dc SE (sub-dc/sn WD2 WD1 B1 BU) (sub-dc/sn WD2' WD1' B1' BU')
 <- weak-sub-tp SE BU BU'
 <- weak-sub-tp SE B1 B1'
 <- weak-wf-dc SE WD1 WD1'
 <- weak-wf-dc SE WD2 WD2'.

- : weak-sub-dc SE (sub-dc/nn WD2 WD1 BU) (sub-dc/nn WD2' WD1' BU')
 <- weak-sub-tp SE BU BU'
 <- weak-wf-dc SE WD1 WD1'
 <- weak-wf-dc SE WD2 WD2'.

-/top : trans-sub-tp _ B12 (sub-tp/top W2 WT3) (sub-tp/top W1 WT3)
 <- extract-wf B12 W1 _.

-/tsel1 : trans-sub-tp W (sub-tp/tsel1 B H WS D L) B23 (sub-tp/tsel1 B' H WS D L)
 <- trans-sub-tp W B B23 B'.

-/tsel2 : trans-sub-tp W B12 (sub-tp/tsel2 BUX HUX B H WS D L) (sub-tp/tsel2 BUX' HUX B' H WS D L)
 <- trans-sub-tp W B12 B B'
 <- trans-sub-tp W B12 BUX BUX'.

-/tsel2-tsel1 : trans-sub-tp W (sub-tp/tsel2 BUX12 HUX12 B12 H12 _ D12 L12) (sub-tp/tsel1 B23 H23 _ D23 L23) OUT
 <- tlookup-upper-eq L12 EQU'
 <- has-upper-eq HUX12 EQU
 <- trans-same EQU' EQU EQU''
 <- tlookup-eq L23 L12 EQL
 <- eq-dec-has-upper EQL H23 H23'
 <- has-upper-eq H23' EQU3
 <- sym-same EQU3 EQU3'
 <- trans-same EQU3' EQU'' EQU'''
 <- eq-sub-tp-low EQU''' B23 B23'
 <- trans-sub-tp W BUX12 B23' OUT.

-/tbind-tbind : trans-sub-tp (wf-tp/tbind W) (sub-tp/tbind (sub-env/tcons D12) W2 W1) (sub-tp/tbind (sub-env/tcons D23) W3 W2') (sub-tp/tbind (sub-env/tcons D13) W3 W1)
 <- weak-sub-dc (sub-env/tcons D12) D23 D23'
 <- trans-sub-dc W D12 D23' D13.

- : trans-sub-dc (wf-dc/s WB2) (sub-dc/ss WD2 WD1 BS2U1 B2 B1 BU12 BS21) (sub-dc/ss WD3 WD2' BS3U2 B3 B2' BU23 BS32) (sub-dc/ss WD3 WD1 BS3U1 B3 B1 BU13 BS31)
 <- extract-wf WB2 WS2 WU2
 <- trans-sub-tp WU2 BU12 BU23 BU13
 <- trans-sub-tp WS2 BS32 BS21 BS31
 <- trans-sub-tp WS2 BS32 BS2U1 BS3U1.


- : trans-sub-dc (wf-dc/n WU2) (sub-dc/ss WD2 WD1 BS2U1 B2 B1 BU12 BS21) (sub-dc/sn WD3 WD2' B2' BU23) (sub-dc/sn WD3 WD1 B1 BU13)
 <- trans-sub-tp WU2 BU12 BU23 BU13.

- : trans-sub-dc (wf-dc/n WU2) (sub-dc/sn WD2 WD1 B1 BU12) (sub-dc/nn WD3 WD2' BU23) (sub-dc/sn WD3 WD1 B1 BU13)
 <- trans-sub-tp WU2 BU12 BU23 BU13.

- : trans-sub-dc (wf-dc/n WU2) (sub-dc/nn WD2 WD1 BU12) (sub-dc/nn WD3 WD2' BU23) (sub-dc/nn WD3 WD1 BU13)
 <- trans-sub-tp WU2 BU12 BU23 BU13.

%worlds ()
(weak-wf-tp _ _ _)
(weak-wf-dc _ _ _)
(weak-sub-tp _ _ _)
(weak-sub-dc _ _ _)
(trans-sub-tp _ _ _ _)
(trans-sub-dc _ _ _ _)
.
%total {(SW SWD SB SBD ST SD) (W WD B BD T1 D1) (W WD B BD T2 D2)}
(weak-wf-tp SW W _)
(weak-wf-dc SWD WD _)
(weak-sub-tp SB B _)
(weak-sub-dc SBD BD _)
(trans-sub-tp ST T1 T2 _)
(trans-sub-dc SD D1 D2 _)
.
