% echo "set unsafe true 
% loadFile test5.elf" |/Volumes/Twelf\ for\ OS\ X\ \(Intel\)/Twelf/bin/twelf-server

% STLC: big step preservation
% - add store
% + add subtyping
% - add env to subtyping
% - add type members
% - add value members
% - add paths
% - add self types

% arithmetic


nat: type.
z: nat.
s: nat -> nat.

add : nat -> nat -> nat -> type.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.

%mode add +N1 +N2 -N3.

lte : nat -> nat -> type.
lte/z : lte z N.
lte/s : lte (s N1) (s N2) 
   <- lte N1 N2.

%mode lte +N1 +N2.


ne : nat -> nat -> type.
ne/z : ne z (s N).
ne/z : ne (s N) z.
ne/s : ne (s N1) (s N2) 
   <- ne N1 N2.

%mode ne +N1 +N2.


%query 0 * lte (s (s z)) (s z).
%query 1 * lte (s (s z)) (s (s z)).



%{ ------- language ----- }%

% sorts
cst: type.
op: type.

exp: type.
% stm: type.

tpe: type.
val: type.

venv: type.
tenv: type.


% constants
ncst: nat -> cst.
fcst: cst.
tcst: cst.

% operators
plus  : op.
equal : op.

% expressions
cste: cst -> exp.
var: nat -> exp.
prm: op -> exp -> exp -> exp.
fun: exp -> tpe -> exp.
app: exp -> exp -> exp.

% types
int  : tpe.
bool : tpe.
top  : tpe.
bot  : tpe.
arrow: tpe -> tpe -> tpe.

% values
cstv: cst -> val.
clos: exp -> venv -> val.

% environments
vnil  : venv.
vcons : val -> venv -> venv.
tnil  : tenv.
tcons : tpe -> tenv -> tenv.


%{ ------- subtyping ------ }%

sub-tp : tpe -> tpe -> type.

sub-tp/int  : sub-tp int int.
sub-tp/bool : sub-tp bool bool.
sub-tp/top  : sub-tp T top.
sub-tp/bot  : sub-tp bot T.

sub-tp/fun  : sub-tp (arrow T1 T2) (arrow T3 T4)
              <- sub-tp T3 T1
              <- sub-tp T2 T4.

%% Subtyping is reflexive

sub-tp-refl : 
  %% Input
  {T:tpe}
  %% Output
  sub-tp T T ->
  type.
%mode sub-tp-refl +T -SBT.

-/int : sub-tp-refl int sub-tp/int.
-/bool: sub-tp-refl bool sub-tp/bool.
-/bot : sub-tp-refl bot sub-tp/bot.
-/top : sub-tp-refl top sub-tp/top.
-/fun : sub-tp-refl (arrow T1 T2) (sub-tp/fun SBT2 SBT1)
   <- sub-tp-refl T1 SBT1
   <- sub-tp-refl T2 SBT2.

%worlds () (sub-tp-refl _ _).       
%total T (sub-tp-refl T _).       


%% Subtyping is transitive

sub-tp-trans-aux :
  %% Inputs
  {T2:tpe}
  sub-tp T1 T2 ->
  sub-tp T2 T3 ->
  %% Output
  sub-tp T1 T3 ->
  type.
%mode sub-tp-trans-aux +T2 +SBT1 +SBT2 -SBT3.

-/int    : sub-tp-trans-aux int sub-tp/int SBT SBT.
-/bool   : sub-tp-trans-aux bool sub-tp/bool SBT SBT.
-/top    : sub-tp-trans-aux top sub-tp/top sub-tp/top sub-tp/top.
-/bot    : sub-tp-trans-aux _ sub-tp/bot _ sub-tp/bot.
-/fun-top : sub-tp-trans-aux (arrow T1 T2) (sub-tp/fun SBT2 SBT1) 
              (sub-tp/top) (sub-tp/top).

-/fun-fun  : sub-tp-trans-aux
      (arrow T1 T2)
      (sub-tp/fun SBT2 SBT1)
            (sub-tp/fun SBT4 SBT3)
            (sub-tp/fun SBT6 SBT5)  
      <- sub-tp-trans-aux T1 SBT3 SBT1 SBT5
      <- sub-tp-trans-aux T2 SBT2 SBT4 SBT6.


%worlds () (sub-tp-trans-aux _ _ _ _).
%total T2 (sub-tp-trans-aux T2 _ _ _).

%% Just a corrollary to sub-tp-trans-aux that doesn't require us to provide
%% T2 as an additional argument.

sub-tp-trans :
  %% Inputs
  sub-tp T1 T2 ->
  sub-tp T2 T3 ->
  %% Output
  sub-tp T1 T3 ->
  type.
%mode sub-tp-trans +SBT1 +SBT2 -SBT3.

-/i : sub-tp-trans SBT1 SBT2 SBT3
       <- sub-tp-trans-aux _ SBT1 SBT2 SBT3.

%worlds () (sub-tp-trans _ _ _).
%total {} (sub-tp-trans _ _ _).




%{ ------- eval-op / primitives ----- }%

% typeof

typeof     : cst -> tpe -> type.
-/n        : typeof (ncst N) int.
-/t        : typeof (tcst) bool.
-/f        : typeof (fcst) bool.

%mode typeof *A *B.

% eval-op

eval-cst-op : op -> cst -> cst -> cst -> type.
e/plus     : eval-cst-op plus (ncst N1) (ncst N2) (ncst N3) <- add N1 N2 N3.
e/eqt      : eval-cst-op equal (ncst N1) (ncst N2) (tcst) <- lte N1 N2 <- lte N2 N1.
e/eqf      : eval-cst-op equal (ncst N1) (ncst N2) (fcst) <- ne N1 N2.

eval-op    : op -> val -> val -> val -> type.
ev/v       : eval-op O (cstv C1) (cstv C2) (cstv C3) <- eval-cst-op O C1 C2 C3.

%mode eval-cst-op +O +V1 +V2 -V3.
%mode eval-op +O +V1 +V2 -V3.


% type-op

type-op    : op -> tpe -> tpe -> tpe -> type.
t/plus     : type-op plus int int int.
t/eq       : type-op equal int int bool.


% eval-cst-op/safe

eval-cst-op-safe : type-op OP T1 T2 T3 -> eval-cst-op OP C1 C2 C3 -> typeof C3 T3 -> type.
%mode eval-cst-op-safe +LTE1 +LTE2 -LTE3.

-plus   : eval-cst-op-safe t/plus (e/plus _) -/n.
-eqt    : eval-cst-op-safe t/eq (e/eqt _ _) -/t.
-eqf    : eval-cst-op-safe t/eq (e/eqf _) -/f.

%worlds () (eval-cst-op-safe _ _ _).
%total LTE1 (eval-cst-op-safe LTE1 _ _). % induction on first arg (not used here)



%{ ------- environments ----- }%

vlookup : venv -> exp -> val -> type.
vl/hit  : vlookup (vcons V G) (var z) V.
vl/miss : vlookup (vcons _ G) (var (s N)) V <- vlookup G (var N) V.

vbind : venv -> val -> exp -> venv -> type.
vl/n  : vbind vnil V (var z) (vcons V vnil).
vl/c  : vbind (vcons V G1) V2 (var (s N)) (vcons V2 (vcons V G1)) <- vbind G1 V (var N) _.

vfresh : venv -> exp -> type.
vf/n   : vfresh vnil (var z).
vf/c   : vfresh (vcons _ G) (var (s N)) <- vfresh G (var N).


tlookup: tenv -> exp -> tpe -> type.
tl/hit  : tlookup (tcons V G) (var z) V.
tl/miss : tlookup (tcons _ G) (var (s N)) V <- tlookup G (var N) V.

tbind : tenv -> tpe -> exp -> tenv -> type.
tl/n  : tbind tnil V (var z) (tcons V tnil).
tl/c  : tbind (tcons V G1) V2 (var (s N)) (tcons V2 (tcons V G1)) <- tbind G1 V (var N) _.

tfresh : tenv -> exp -> type.
tf/n   : tfresh tnil (var z).
tf/c   : tfresh (tcons _ G) (var (s N)) <- tfresh G (var N).


%mode vbind +G +V -E -G2.
%mode tbind +G +V -E -G2.

%mode vlookup +G +E -V.
%mode tlookup +G +E -T.

%mode vfresh +G -X.
%mode tfresh +G -X.


%{ ------- eval-exp / type-exp ----- }%

eval-exp   : venv -> exp -> val -> type.
% e/cst      : eval-exp G (cste C) (cstv C).
% e/prim     : eval-exp G (prm OP E1 E2) V3
%             <- eval-exp G E1 V1 
%             <- eval-exp G E2 V2
%             <- eval-op OP V1 V2 V3.

e/var      : eval-exp G X V <- vlookup G X V.
e/fun      : eval-exp G (fun R T) (clos R G).


e/app      : eval-exp G (app E1 E2) V3
            <- eval-exp G E1 (clos R G1)
            <- eval-exp G E2 V2
            <- eval-exp (vcons V2 G1) R V3.



type-exp   : tenv -> exp -> tpe -> type.
t/cst      : type-exp G (cste C) T <- typeof C T.
t/var      : type-exp G X T <- tlookup G X T.
t/fun      : type-exp G (fun R T1) (arrow T1 T2) 
                <- type-exp (tcons T1 G) R T2.

t/prim      : type-exp G (prm OP E1 E2) T3
            <- type-exp G E1 T1 
            <- type-exp G E2 T1
            <- type-op OP T1 T2 T3.

t/app       : type-exp G (app E1 E2) T2
            <- type-exp G E1 (arrow T1 T2) 
            <- type-exp G E2 T1.

t/sub       : type-exp G E T2
            <- type-exp G E T1
            <- sub-tp T1 T2.


%{ ------- suptyping inversion ----- }%

invert-app : 
  %% Input
  type-exp G (app E1 E2) T ->
  %% Output
  type-exp G E1 (arrow T1 T2) ->
  type-exp G E2 T1 ->
  sub-tp T2 T -> 
  type.
%mode invert-app +WFE1 -WFE2 -WFE3 -SBT.

-     : invert-app (t/app TS1 TS) TS TS1 SB <- sub-tp-refl _ SB.
-     : invert-app (t/sub SB1 TS) L L2 SB2 
            <- invert-app TS L L2 SB 
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-app _ _ _ _).
%total WFE (invert-app WFE _ _ _).


invert-fun :
  %% Input
  type-exp G (fun R T1) T ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  sub-tp (arrow T3 T4) T ->
  type.
%mode invert-fun +WFE1 -WFE2 -SBT1.

-     : invert-fun (t/fun TS) TS SB <- sub-tp-refl _ SB.
-     : invert-fun (t/sub SB1 TS) L SB2 
            <- invert-fun TS L SB 
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-fun _ _ _).
%total WFE (invert-fun WFE _ _). 


invert-var :
  %% Input
  type-exp G (var N) T ->
  %% Output
  tlookup G (var N) T1 ->
  sub-tp T1 T ->
  type.
%mode invert-var +WFE1 -WFE2 -SBT1.

-     : invert-var (t/var L) L SB <- sub-tp-refl T SB.
-     : invert-var (t/sub SB1 TS) L SB2 
            <- invert-var TS L SB 
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-var _ _ _).
%total WFE (invert-var WFE _ _). 




%{ ------- well-formedness / typing for values and environment ----- }%

wf-val   : val -> tpe -> type.
wf-env   : venv -> tenv -> type.

% wfv/c    : wf-val (cstv C) T <- typeof C T.
wfv/f    : wf-val (clos R H) (arrow T1 T2) 
            <- wf-env H G
            <- type-exp (tcons T1 G) R T2.
wfv/sub  : wf-val V T
            <- wf-val V T1
            <- sub-tp T1 T.


wfe/n    : wf-env vnil tnil. 
wfe/c    : wf-env (vcons V H) (tcons T G) <- wf-val V T <- wf-env H G.



invert-wf-fun :
  %% Input
  wf-val (clos R H) T ->
  %% Output
  type-exp (tcons T3 G) R T4 ->
  wf-env H G ->
  sub-tp (arrow T3 T4) T ->
  type.
%mode invert-wf-fun +WFE1 -WFE2 -WFE3 -SBT1.

-     : invert-wf-fun (wfv/f (TS: type-exp (tcons T1 G) R T2) WE) TS WE SB
            <- sub-tp-refl (arrow T1 T2) SB.
-     : invert-wf-fun (wfv/sub SBA1 TS) L L1 SBA2
            <- invert-wf-fun TS L L1 SBA 
            <- sub-tp-trans SBA SBA1 SBA2.
%worlds () (invert-wf-fun _ _ _ _).
%total WFE (invert-wf-fun WFE _ _ _). 


%{ ------- type preservation ----- }%


% lookup safe

lookup-safe: wf-env H G -> tlookup G X T -> vlookup H X V -> wf-val V T -> type.
%mode lookup-safe +A +B +C -D.

-      : lookup-safe (wfe/c G V) tl/hit vl/hit V.  
-      : lookup-safe (wfe/c G V) (tl/miss A) (vl/miss B) Z
         <- lookup-safe G A B Z.

%worlds () (lookup-safe _ _ _ _).
%total A (lookup-safe A _ _ _). % induction on first arg


%{
% eval primitive op safe

eval-op-safe : type-op OP T1 T2 T3 -> eval-op OP V1 V2 V3 -> wf-val V3 T3 -> type.
%mode eval-op-safe +LTE1 +LTE2 -LTE3.

-plus   : eval-op-safe t/plus (ev/v (e/plus _)) (wfv/c -/n).
-eqt    : eval-op-safe t/eq (ev/v (e/eqt _ _)) (wfv/c -/t).
-eqf    : eval-op-safe t/eq (ev/v (e/eqf _)) (wfv/c -/f).

%worlds () (eval-op-safe _ _ _).
%total A (eval-op-safe A _ _). % induction on first arg
}%


eval-safe: type-exp G E T -> wf-env H G -> eval-exp H E V -> wf-val V T -> type.
%mode eval-safe +A +B +C -D.

% -      : eval-safe (t/cst T) _ (e/cst) (wfv/c T).  
% -      : eval-safe (t/prim T _ _) _ (e/prim V _ _) WF
%           <- eval-op-safe T V WF.

 -      : eval-safe ZT E (e/var L2) (wfv/sub ST V)
          <- invert-var ZT L ST
          <- lookup-safe E L L2 V.

-      : eval-safe ZT E (e/fun) (wfv/sub ST (wfv/f TS E))
          <- invert-fun ZT TS ST.

-      : eval-safe 
            (ZT: type-exp _ _ T2')
            (WE: wf-env H0 G0)
            (e/app
              (EV3: eval-exp (vcons V2 HC0) R V3) 
              (EVX: eval-exp H0 EXP2 V2) 
              (EVF: eval-exp H0 EXP1 (clos R HC0))
            )
            (wfv/sub ST (wfv/sub STR (Z: wf-val V3 T4)))

          <- invert-app ZT
              (TF: type-exp G0 EXP1 (arrow T1 T2))
              (TX: type-exp G0 EXP2 T1)
              (ST: sub-tp T2 T2')

          <- eval-safe          % eval X
              (TX: type-exp _ _ T1)
              WE 
              EVX 
              (WVX: wf-val V2 T1)

          <- eval-safe          % eval F
              TF
              WE 
              (EVF: eval-exp H0 EXP1 (clos R HC0))
              (ZF: wf-val (clos R HC0) (arrow T1 T2))

          <- invert-wf-fun 
              ZF 
              (TR : type-exp (tcons T3 GC0) R T4)
              (WE1: wf-env HC0 GC0)
              ((sub-tp/fun STR STA): sub-tp (arrow T3 T4) (arrow T1 T2))

          <- eval-safe                 % eval F(X)
              TR % (t/sub ST TR)  % (TR': type-exp (tcons T3 GC0) R T4)
              (wfe/c WE1 (wfv/sub STA WVX))
              (EV3: eval-exp (vcons V2 HC0) R V3) 
              (Z: wf-val V3 T4).


%worlds () (eval-safe _ _ _ _).
%total C (eval-safe A _ C _). % induction on eval-exp










