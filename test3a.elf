% echo "loadFile test3.elf" |/Volumes/Twelf\ for\ OS\ X\ \(Intel\)/Twelf/bin/twelf-server

% STLC: big step preservation
% - add store
% - add subtyping
% - add type members
% - add value members
% - add paths

% arithmetic


nat: type.
z: nat.
s: nat -> nat.

bool: type.
true: bool.
false: bool.

add : nat -> nat -> nat -> type.
%mode add +N1 +N2 -N3.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.
%worlds () (add _ _ _).
%total N1 (add N1 _ _).

eq : nat -> nat -> bool -> type.
%mode eq +N1 +N2 -B.
eq/zz : eq z z true.
eq/zs : eq z (s N) false.
eq/sz : eq (s N) z false.
eq/ss : eq (s N1) (s N2) B <- eq N1 N2 B.
%worlds () (eq _ _ _).
%total N1 (eq N1 _ _).

%{ ------- language ----- }%

% sorts
cst: type.
op: type.

exp: type.
% stm: type.

tpe: type.
val: type.

venv: type.
tenv: type.

res-cst : type.
res-val : type.

% constants
ncst: nat -> cst.
bcst: bool -> cst.

% operators
plus  : op.
equal : op.

% expressions
cste: cst -> exp.
var: nat -> exp.
prm: op -> exp -> exp -> exp.
fun: exp -> tpe -> exp.
app: exp -> exp -> exp.

% types
int  : tpe.
bool : tpe.
top  : tpe.
bot  : tpe.
arrow: tpe -> tpe -> tpe.

% values
cstv: cst -> val.
clos: exp -> venv -> val.

% environments
vnil  : venv.
vcons : val -> venv -> venv.
tnil  : tenv.
tcons : tpe -> tenv -> tenv.

% results
cst-stuck : res-cst.
cst-some : cst -> res-cst.
val-stuck : res-val.
val-some : val -> res-val.

%{ ------- eval-op / primitives ----- }%

% typeof

typeof     : cst -> tpe -> type.
-/n        : typeof (ncst N) int.
-/b        : typeof (bcst B) bool.

%mode typeof *A *B.

% eval-op

eval-cst-op : op -> cst -> cst -> res-cst -> type.
%mode eval-cst-op +OP +C1 +C2 -C3.
e/plus      : eval-cst-op plus (ncst N1) (ncst N2) (cst-some (ncst N3))
               <- add N1 N2 N3.
e/eq        : eval-cst-op equal (ncst N1) (ncst N2) (cst-some (bcst B))
               <- eq N1 N2 B.
e/fail/b1   : eval-cst-op OP (bcst B1) (ncst N2) cst-stuck.
e/fail/b2   : eval-cst-op OP (ncst N1) (bcst B2) cst-stuck.
e/fail/b12  : eval-cst-op OP (bcst B1) (bcst B2) cst-stuck.
%worlds () (eval-cst-op _ _ _ _).
%total OP (eval-cst-op OP _ _ _).

res-cst2val  : res-cst -> res-val -> type.
%mode res-cst2val +C -V.
cst2val/some : res-cst2val (cst-some C1) (val-some (cstv C1)).
cst2val/stuck : res-cst2val cst-stuck val-stuck.
%worlds () (res-cst2val _ _).
%total C (res-cst2val C _).

eval-op     : op -> val -> val -> res-val -> type.
%mode eval-op +O +V1 +V2 -V3.
ev/v        : eval-op O (cstv C1) (cstv C2) V3
               <- eval-cst-op O C1 C2 C3
               <- res-cst2val C3 V3.
ev/fail/c1  : eval-op O (clos E1 G1) (cstv C2)    val-stuck.
ev/fail/c2  : eval-op O (cstv C1)    (clos E2 G2) val-stuck.
ev/fail/c12 : eval-op O (clos E1 G1) (clos E2 G2) val-stuck.
%worlds () (eval-op _ _ _ _).
%total O (eval-op O _ _ _).

% type-op

type-op    : op -> tpe -> tpe -> tpe -> type.
t/plus     : type-op plus int int int.
t/eq       : type-op equal int int bool.

cst-get      : res-cst -> cst -> type.
cst-get/some : cst-get (cst-some C1) C1.

val-get      : res-val -> val -> type.
val-get/some : val-get (val-some V1) V1.

% eval-cst-op/safe

eval-cst-op-safe : type-op OP T1 T2 T3 -> typeof C1 T1 -> typeof C2 T2 -> eval-cst-op OP C1 C2 OC3 -> cst-get OC3 C3 -> typeof C3 T3 -> type.
%mode eval-cst-op-safe +DT0 +DT1 +DT2 +DE0 -DOK -DT3.

-plus : eval-cst-op-safe t/plus -/n -/n _ cst-get/some -/n.
-eq   : eval-cst-op-safe t/eq   -/n -/n _ cst-get/some -/b.

%worlds () (eval-cst-op-safe _ _ _ _ _ _).
%total DT0 (eval-cst-op-safe DT0 _ _ _ _ _).

%{ ------- environments ----- }%

vlookup : venv -> nat -> res-val -> type.
%mode vlookup +G +N -V.
vl/fail : vlookup vnil N val-stuck.
vl/hit  : vlookup (vcons V G) z (val-some V).
vl/miss : vlookup (vcons _ G) (s N) V <- vlookup G N V.
%worlds () (vlookup _ _ _).
%total G (vlookup G _ _).

vbind : venv -> val -> exp -> venv -> type.
vl/n  : vbind vnil V (var z) (vcons V vnil).
vl/c  : vbind (vcons V G1) V2 (var (s N)) (vcons V2 (vcons V G1)) <- vbind G1 V (var N) _.

vfresh : venv -> exp -> type.
vf/n   : vfresh vnil (var z).
vf/c   : vfresh (vcons _ G) (var (s N)) <- vfresh G (var N).

tlookup : tenv -> nat -> tpe -> type.
%mode tlookup +G +N -V.
tl/hit  : tlookup (tcons V G) z V.
tl/miss : tlookup (tcons _ G) (s N) V <- tlookup G N V.

tbind : tenv -> tpe -> exp -> tenv -> type.
tl/n  : tbind tnil V (var z) (tcons V tnil).
tl/c  : tbind (tcons V G1) V2 (var (s N)) (tcons V2 (tcons V G1)) <- tbind G1 V (var N) _.

tfresh : tenv -> exp -> type.
tf/n   : tfresh tnil (var z).
tf/c   : tfresh (tcons _ G) (var (s N)) <- tfresh G (var N).


%mode vbind +G +V -E -G2.
%mode tbind +G +V -E -G2.

%mode vfresh +G -X.
%mode tfresh +G -X.


%{ ------- eval-exp / type-exp ----- }%

res-eval-op : op -> res-val -> res-val -> res-val -> type.
%mode res-eval-op +O +V1 +V2 -V3.
ope/ok     : res-eval-op OP (val-some V1) (val-some V2) V3
              <- eval-op OP V1 V2 V3.
ope/n1     : res-eval-op OP val-stuck (val-some V2) val-stuck.
ope/n2     : res-eval-op OP (val-some V1) val-stuck val-stuck.
ope/n12    : res-eval-op OP val-stuck val-stuck val-stuck.
%worlds () (res-eval-op _ _ _ _).
%total OP (res-eval-op OP _ _ _).

extract-from-res-eval-op : res-eval-op OP OV1 OV2 OV3 -> val-get OV1 V1 -> val-get OV2 V2 -> eval-op OP V1 V2 OV3 -> type.
%mode extract-from-res-eval-op +OD +EV1 +EV2 -D.
- : extract-from-res-eval-op (ope/ok D) val-get/some val-get/some D.
%worlds () (extract-from-res-eval-op _ _ _ _).
%total OD (extract-from-res-eval-op OD _ _ _).


res-eval-exp-app : res-val -> res-val -> res-val -> type.
%mode res-eval-exp-app +V1 +V2 -V3.
eval-exp   : venv -> exp -> res-val -> type.
%mode eval-exp +G +E -V.

ea/ok     : res-eval-exp-app (val-some (clos R G)) (val-some V2) V3
              <- eval-exp (vcons V2 G) R V3.
ea/n1c    : res-eval-exp-app (val-some (cstv C1)) V2 val-stuck.
ea/n1     : res-eval-exp-app val-stuck (val-some V2) val-stuck.
ea/n2     : res-eval-exp-app (val-some V1) val-stuck val-stuck.
ea/n12    : res-eval-exp-app val-stuck val-stuck val-stuck.

e/cst      : eval-exp G (cste C) (val-some (cstv C)).
e/var      : eval-exp G (var X) V <- vlookup G X V.
e/fun      : eval-exp G (fun R T) (val-some (clos R G)).

e/prim     : eval-exp G (prm OP E1 E2) V3
            <- eval-exp G E1 V1 
            <- eval-exp G E2 V2
            <- res-eval-op OP V1 V2 V3.

e/app      : eval-exp G (app E1 E2) V3
            <- eval-exp G E1 V1
            <- eval-exp G E2 V2
            <- res-eval-exp-app V1 V2 V3.

%worlds () (res-eval-exp-app _ _ _) (eval-exp _ _ _).
%covers res-eval-exp-app +V1 +V2 -V3.
%covers eval-exp +G +E -V.


extract-from-res-eval-exp-app : res-eval-exp-app OV1 OV2 OV3 -> val-get OV1 (clos R G) -> val-get OV2 V2 -> eval-exp (vcons V2 G) R OV3 -> type.
%mode extract-from-res-eval-exp-app +OD +EV1 +EV2 -D.
- : extract-from-res-eval-exp-app (ea/ok D) val-get/some val-get/some D.
%worlds () (extract-from-res-eval-exp-app _ _ _ _).
%total OD (extract-from-res-eval-exp-app OD _ _ _).
%reduces A' <= A (extract-from-res-eval-exp-app A _ _ A').

type-exp   : tenv -> exp -> tpe -> type.
t/cst      : type-exp G (cste C) T <- typeof C T.
t/var      : type-exp G (var X) T <- tlookup G X T.
t/fun      : type-exp G (fun R T1) (arrow T1 T2) 
                <- type-exp (tcons T1 G) R T2.

t/prim      : type-exp G (prm OP E1 E2) T3
            <- type-exp G E1 T1 
            <- type-exp G E2 T2
            <- type-op OP T1 T2 T3.

t/app       : type-exp G (app E1 E2) T2
            <- type-exp G E1 (arrow T1 T2) 
            <- type-exp G E2 T1.



%{ ------- well-formedness / typing for values and environment ----- }%

wf-val   : val -> tpe -> type.
wf-env   : venv -> tenv -> type.

wfv/c    : wf-val (cstv C) T <- typeof C T.
wfv/f    : wf-val (clos R H) (arrow T1 T2) 
            <- wf-env H G
            <- type-exp (tcons T1 G) R T2.

wfe/n    : wf-env vnil tnil. 
wfe/c    : wf-env (vcons V H) (tcons T G) <- wf-val V T <- wf-env H G.

extract-from-wfv/f : wf-val (clos R H) (arrow T1 T2) -> wf-env H G -> type-exp (tcons T1 G) R T2 -> type.
%mode extract-from-wfv/f +A -B -C.
- : extract-from-wfv/f (wfv/f TC WE) WE TC.
%worlds () (extract-from-wfv/f _ _ _).
%total A (extract-from-wfv/f A _ _).

%{ ------- type preservation ----- }%


% lookup safe

lookup-safe: wf-env H G -> tlookup G X T -> vlookup H X OV -> val-get OV V -> wf-val V T -> type.
%mode lookup-safe +A +B +C -D -E.

-      : lookup-safe (wfe/c G V) tl/hit vl/hit val-get/some V.  
-      : lookup-safe (wfe/c G V) (tl/miss A) (vl/miss B) Y Z
         <- lookup-safe G A B Y Z.

%worlds () (lookup-safe _ _ _ _ _).
%total A (lookup-safe A _ _ _ _).



% eval primitive op safe

eval-op-safe : type-op OP T1 T2 T3 -> wf-val V1 T1 -> wf-val V2 T2 -> eval-op OP V1 V2 OV3 -> val-get OV3 V3 -> wf-val V3 T3 -> type.
%mode eval-op-safe +DT0 +DT1 +DT2 +DE0 -DOK -DT3.

-plus : eval-op-safe t/plus (wfv/c -/n) (wfv/c -/n) _ val-get/some (wfv/c -/n).
-eq   : eval-op-safe t/eq   (wfv/c -/n) (wfv/c -/n) _ val-get/some (wfv/c -/b).

%worlds () (eval-op-safe _ _ _ _ _ _).
%total A (eval-op-safe A _ _ _ _ _).

eval-safe: type-exp G E T -> wf-env H G -> eval-exp H E OV -> val-get OV V -> wf-val V T -> type.
%mode eval-safe +A +B +C -D -E.

-      : eval-safe (t/cst T) _ (e/cst) val-get/some (wfv/c T).  

-      : eval-safe (t/var L) E (e/var L2) V W
          <- lookup-safe E L L2 V W.

-      : eval-safe (t/fun TS) E (e/fun) val-get/some (wfv/f TS E).

-      : eval-safe
          (t/prim TC0 TC2 TC1)
          WE
          (e/prim OEV0 EV2 EV1)
          VG3
          W3
          <- eval-safe TC1 WE EV1 VG1 W1
          <- eval-safe TC2 WE EV2 VG2 W2
          <- extract-from-res-eval-op OEV0 VG1 VG2 EV0
          <- eval-op-safe TC0 W1 W2 EV0 VG3 W3.

-      : eval-safe 
            (t/app TX TF)
            WE
            (e/app OEV0 EVX EVF)
            VG
            W

          <- eval-safe TX WE EVX VGX WX

          <- eval-safe TF WE EVF VGF WF

          <- extract-from-res-eval-exp-app OEV0 VGF VGX EV0
          <- extract-from-wfv/f WF WE0 T0

          <- eval-safe T0 (wfe/c WE0 WX) EV0 VG W.

%worlds () (eval-safe _ _ _ _ _).
%total (A) (eval-safe _ _ A _ _).
