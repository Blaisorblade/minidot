// syntax

t ::= x                         // variable
    | new {                     // object/function creation
        def apply(x) = t1
        val get = t2
        type T 
      }
    | t.apply(t)                // method call
    | t.get                     // field selection

T ::= Top | Bot 
    | { T1 => T2 }              // method
    | { val T }                 // field member
    | { type T }                // type member
    | x.T                       // type selection

G :: = tnil | T::G              // type env
H :: = vnil | v::H              // value env

v ::= Clos H {                  // object/closure
        def apply = t
        val get = v
      }

// lookup

x: T in G
x->v in H


// types well-formed w.r.t env 

G wf Top
G wf Bot


G wf T1    G wf T2
------------------
G wf { T1 => T2 }


G wf T
--------------
G wf { val T }


G wf T
---------------
G wf { type T }


x:{ type T } wf in G
--------------------
G wf x.T




// subtyping

G1 wf T
--------------
G1 T <: G2 Top

G2 wf T
--------------
G1 Bot <: G2 T


G2 T3 <: G1 T1    G1 T2 <: G2 T4
----------------------------------
G1 { T1 => T2 } <: G2 { T3 => T4 }


G1 T1 <: G2 T2
------------------------------
G1 { val T1 } <: G2 { val T2 }


G1 T1 <: G2 T2
--------------------------------
G1 { type T1 } <: G2 { type T2 }


x:{ type T1 } wf in G1    G1 T1 <: G2 T2
----------------------------------------
G1 x.T <: T2


G1 T1 <: G2 T2    x:{ type T2 } wf in G2
----------------------------------------
G1 T1 <: x.T



// eval

x->v in H
-----------
H |- x => v


H |- t2 => v2
--------------------------------------------------------------------------------------------------
H |- new { def apply(x) = t1; val get = t2; type T } => Clos H { def apply(x) = t1; val get = v2 }


H |- t1 => Clos H1 { def apply(x) = t3; val get = v4 }
H |- t2 => v2
x->v::H1 |- t3 => v3
-------------------------------------------------------
H |- t1.apply(t2) => v3


H |- t1 => Clos H1 { def apply(x) = t3; val get = v4 }
-------------------------------------------------------
H |- t1.get => v4



// expression typing

x: T wf in G
------------
G |- x: T


x:T1::G |- t1: T2    G wf { T1 => T2 }
-------------------------------------------------------------------
G |- new { def apply(x) = t1; val get = t2; type T } : { T1 => T2 }


G |- t2: T2
-----------------------------------------------------------------
G |- new { def apply(x) = t1; val get = t2; type T } : { get T2 }


G wf { type T }
-----------------------------------------------------------------
G |- new { def apply(x) = t1; val get = t2; type T } : { type T }


G |- t1: { T1 => T2 }
G |- t2: T1
---------------------
G |- t1.apply(t2): T2


G |- t1: { val get: T2 }
------------------------
G |- t1.get: T2


G |- t: T1    G T1 <: G T2
--------------------------
G |- t: T2



// value typing

x: T wf in G
------------
G |- x: T


G1 |- H1    x:T1::G1 |- t: T2    G1 { T1 => T2 } <: G { T1 => T2 }
------------------------------------------------------------------
G |- Clos H1 { def apply = t val get = v } : { T1 => T2 }


G |- t2: T2
-------------------------------------------------------
G |- Clos H1 { def apply = t val get = v } : { get T2 }


G wf { type T }
-------------------------------------------------------
G |- Clos H1 { def apply = t val get = v } : { type T }


G1 |- v: T1    G1 T1 <: G T
---------------------------
G |- v: T


// well-typed environments

G1 |- H1 (element-wise)
