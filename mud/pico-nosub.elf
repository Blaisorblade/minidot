% echo "set unsafe true 
% loadFile xxx.elf" |/Users/me/Desktop/tryout/twelf/bin/twelf-server


nat: type.
z: nat.
s: nat -> nat.

add : nat -> nat -> nat -> type.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.

%mode add +N1 +N2 -N3.

lte : nat -> nat -> type.
lte/z : lte z N.
lte/s : lte (s N1) (s N2) 
   <- lte N1 N2.

%mode lte +N1 +N2.


ne : nat -> nat -> type.
ne/z : ne z (s N).
ne/z : ne (s N) z.
ne/s : ne (s N1) (s N2) 
   <- ne N1 N2.

%mode ne +N1 +N2.


%query 0 * lte (s (s z)) (s z).
%query 1 * lte (s (s z)) (s (s z)).



%{ ------- language ----- }%

% sorts
exp: type.
tpe: type.
val: type.

venv: type.
tenv: type.


% expressions
lit: nat -> exp.
var: nat -> nat -> exp. %% second nat is env size - X for (var X). removes need for uniqueness lemmas.
fun: tpe -> exp -> exp.
app: exp -> exp -> exp.

% type or no type
topt  : type.
tsome : tpe -> topt.
tnone : topt.

% types
int  : tpe.
bool : tpe.
top  : tpe.
bot  : tpe.
arrow: topt -> tpe -> tpe -> tpe.
sel  : nat -> tpe.

% values
cst: nat -> val.
clos: tpe -> exp -> venv -> val.

% environments
vnil  : venv.
vcons : val -> venv -> venv.
tnil  : tenv.
tcons : tpe -> tenv -> tenv.


%{ ------- environments ----- }%



vsize : venv -> nat -> type.
%mode vsize +A -B.
vf/n   : vsize vnil z.
vf/c   : vsize (vcons V H) (s N) <- vsize H N.
%worlds () (vsize _ _).
%total A (vsize A _).

tsize : tenv -> nat -> type.
tf/n   : tsize tnil z.
tf/c   : tsize (tcons V G) (s N) <- tsize G N.


sub-env: tenv -> nat -> tenv -> nat -> type.

sub-env/z: sub-env tnil z tnil z.
sub-env/sz: sub-env (tcons T G1) (s N) (tcons T G2) z <- sub-env G1 N G2 z.
sub-env/ext: sub-env G1 N1 (tcons Z G2) (s N2) <- sub-env G1 N1 G2 N2.

sub-env-size: tenv -> nat -> tenv -> type.
ses: sub-env-size GN N G
      <- sub-env GN N G N2.

sub-venv: venv -> nat -> venv -> nat -> type.

sub-venv/z: sub-venv vnil z vnil z.
sub-venv/sz: sub-venv (vcons T G1) (s N) (vcons T G2) z <- sub-venv G1 N G2 z.
sub-venv/ext: sub-venv G1 N1 (vcons Z G2) (s N2) <- sub-venv G1 N1 G2 N2.

sub-venv-size: venv -> nat -> venv -> type.
svs: sub-venv-size GN N G
      <- sub-venv GN N G N2.




%{ ------- subtyping ------ }%

wf-tp : tenv -> tpe -> type.

wf-tpo : tenv -> topt -> type.


wf-tp/int  : wf-tp G1 int.
wf-tp/top  : wf-tp G1 top.

wf-tp/fun  : wf-tp G1 (arrow S1 T1 T2)
              <- wf-tpo G1 S1
              <- wf-tp G1 T1
              <- wf-tp G1 T2
              .

wf-tpo/abs  : wf-tpo G1 (tsome T2)
              <- wf-tp G1 T2.
wf-tpo/refl  : wf-tpo G1 tnone.

wf-tp/sel  : wf-tp G1 (sel X)
                <- sub-env-size (tcons (arrow _ _ _) GN) (s X) G1
                .





%{ ------- eval-exp / type-exp ----- }%

eval-exp   : venv -> exp -> val -> type.

e/lit      : eval-exp G (lit C) (cst C).

e/var      : eval-exp G (var X NG) V 
                <- sub-venv (vcons V GN) (s X) G NG.

e/fun      : eval-exp (vcons (clos T R G) G) (fun T R) (clos T R G).


e/app      : eval-exp   (vcons (clos (arrow S1 T1 T2) R G1) G2) (app E1 E2) V3
            <- eval-exp (vcons (clos (arrow S1 T1 T2) R G1) G2) E1 (clos (arrow S1 T1 T2) R G1)
            <- eval-exp (vcons (clos (arrow S1 T1 T2) R G1) G2) E2 V2
            <- eval-exp (vcons V2 (vcons (clos (arrow S1 T1 T2) R G1) G1)) R V3.


type-exp   : tenv -> exp -> tpe -> type.

t/var      : type-exp G (var X NG) T 
                <- sub-env (tcons T GN) (s X) G NG
                <- wf-tp G T
                .

t/vara      : type-exp G (var X NG) (sel N) 
                <- sub-env (tcons TX GX) (s X) G NG
                <- sub-env (tcons (arrow (tsome TX) _ _) GN) (s N) G _ %% ??
                <- wf-tp G (sel N)
                .

t/varc      : type-exp G (var X NG) TX 
                <- sub-env (tcons (sel N) GX) (s X) G NG
                <- sub-env (tcons (arrow (tsome TX) _ _) GN) (s N) G _ %% ??
                <- wf-tp G (sel N)
                .


t/fun      : type-exp (tcons (arrow tnone T1 T2) G) (fun (arrow (tsome S1) T1 T2) R) (arrow tnone T1 T2)
                <- type-exp (tcons T1 (tcons (arrow (tsome S1) T1 T2) G)) R T2
                <- wf-tp (tcons (arrow (tsome S1) T1 T2) G) (arrow (tsome S1) T1 T2)
                <- wf-tp (tcons (arrow tnone T1 T2) G) (arrow tnone T1 T2)
                .

t/app       : type-exp  (tcons (arrow S1 T1 T2) G) (app E1 E2) T2
            <- type-exp (tcons (arrow S1 T1 T2) G) E1 (arrow S1 T1 T2) 
            <- type-exp (tcons (arrow S1 T1 T2) G) E2 T1
            <- wf-tp    (tcons (arrow S1 T1 T2) G) T2
            .


%{ ------- well-formedness / typing for values and environment ----- }%

wf-val   : venv -> val -> tpe -> type.
wf-env   : venv -> tenv -> type.


wfv/f    : wf-val (vcons (clos (arrow (tsome S1) T3 T4) R H) H)
                  (clos (arrow (tsome S1) T3 T4) R H) 
                        (arrow (tsome S1) T3 T4)
            <- sub-venv (vcons (clos (arrow (tsome S1) T3 T4) R H) H) N Hfull NZ
            <- wf-env H G
            <- type-exp (tcons T3 (tcons (arrow (tsome S1) T3 T4) G)) R T4
            <- wf-tp (tcons (arrow (tsome S1) T3 T4) G) T4
            .


wfv/fsub    : wf-val H V (arrow tnone T3 T4)
            <- wf-val H V (arrow (tsome S1) T3 T4)
            .

wfv/abs    : wf-val H V (sel N)
            <- wf-val H V TX
            <- sub-venv (vcons (clos (arrow (tsome TX) TA TB) RX HX) HN) (s N) H HG
            .

wfv/ext : wf-val (vcons V1 H) V T
            <- wf-val H V T
            <- wf-env H G
            <- wf-tp G T.



wfe/n    : wf-env vnil tnil. 
wfe/c    : wf-env (vcons V H) (tcons T G) 
            <- wf-val (vcons V H) V T 
            <- wf-env H G.



%{ ------- queries ----- }%


%query 1 1 type-exp (tcons int (tcons top tnil)) (var z _) top.
%query 1 1 type-exp (tcons int (tcons top tnil)) (var (s z) _) int.


% --- test 1: return a fresh function and assign it a type selection


t01 = (arrow (tsome int) int int).

t11 = (arrow tnone int int).

t02 = (arrow (tsome int) (sel (s z)) (sel (s z))).

t12 = (arrow tnone (sel (s z)) (sel (s z))).


%query 1 1 type-exp (tcons t11 (tcons int tnil)) (fun t01 (var (s (s z)) _)) t11.

%query 1 1 type-exp (tcons t12 (tcons int tnil)) (fun t02 (var (s (s z)) _)) t12.



%query 1 1 type-exp (tcons t11 (tcons int tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) int.

%query 1 1 type-exp (tcons t12 (tcons (sel (s z)) tnil)) (app (fun t02 (var (s (s z)) _)) (var (z) _)) (sel (s z)).

%query 1 0 type-exp (tcons t12 (tcons (sel (s z)) tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) T.


t00 = (arrow tnone int int).

t01 = (arrow (tsome t00) t00 t00).

t11 = (arrow tnone t00 t00).

t02 = (arrow (tsome t00) (sel (s z)) (sel (s z))).

t12 = (arrow tnone (sel (s z)) (sel (s z))).


%query 1 1 type-exp (tcons t11 (tcons t00 tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) t00.

%query 1 1 type-exp (tcons t12 (tcons (sel (s z)) tnil)) (app (fun t02 (var (s (s z)) _)) (var (z) _)) (sel (s z)).

%query 1 0 type-exp (tcons t12 (tcons (sel (s z)) tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) T.


% --- now test branding/abstraction: take a value of a concrete type and return it as path dependent type

t00 = (arrow tnone int int).

t01 = (arrow (tsome t00) t00 t00).

t11 = (arrow tnone       t00 t00).

t02 = (arrow (tsome t00) t00 (sel (s z))).

t12 = (arrow tnone       t00 (sel (s z))).


%query 1 1 type-exp (tcons t11 (tcons t00 tnil)) (fun t01 (var (s (s z)) _)) T.

%query 1 1 type-exp (tcons t12 (tcons t00 tnil)) (fun t02 (var (s (s z)) _)) T.



%query 1 1 type-exp (tcons t11 (tcons t00 tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) t00.

%query 1 1 type-exp (tcons t12 (tcons t00 tnil)) (app (fun t02 (var (s (s z)) _)) (var (z) _)) (sel (s z)).

%query 1 0 type-exp (tcons t12 (tcons (sel (s z)) tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) T.




% --- now test un-branding: take a path dependent type and return it as value of a concrete type

t00 = (arrow tnone int int).

t01 = (arrow (tsome t00) t00 t00).

t11 = (arrow tnone       t00 t00).

t02 = (arrow (tsome t00) (sel (s z)) t00).

t12 = (arrow tnone       (sel (s z)) t00).


%query 1 1 type-exp (tcons t11 (tcons t00 tnil)) (fun t01 (var (s (s z)) _)) T.

%query 1 1 type-exp (tcons t12 (tcons t00 tnil)) (fun t02 (var (s (s z)) _)) T.



%query 1 1 type-exp (tcons t11 (tcons t00 tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) t00.

%query 1 1 type-exp (tcons t12 (tcons (sel (s z)) tnil)) (app (fun t02 (var (s (s z)) _)) (var (z) _)) t00.

%query 1 0 type-exp (tcons t12 (tcons (sel (s z)) tnil)) (app (fun t01 (var (s (s z)) _)) (var (z) _)) T.




%% TODO: extend / restrict


wfv-extend: wf-val H V T -> {V1: val} wf-val (vcons V1 H) V T -> type.
%mode wfv-extend +A +B -E.
% - : wfv-extend W WE WF Z (wfv/ext )
%worlds () (wfv-extend _ _ _).
%trustme
%total A (wfv-extend A _ _).

wfv-restrict: wf-val (vcons V1 H) V T -> wf-env H G -> wf-tp G T -> wf-val H V T -> type. 
%mode wfv-restrict +A +B +C -E.
%worlds () (wfv-restrict _ _ _ _).
%trustme
%total A (wfv-restrict A _ _ _).




% lookup safe

lookup-safe: wf-env H G -> 
             sub-env (tcons T GN) (s X) G N -> 
             sub-venv (vcons V HN) (s X) H N -> 
             wf-val H V T -> type.
%mode lookup-safe +A +B +C -D.

-      : lookup-safe (wfe/c W1 V) (sub-env/sz _) (sub-venv/sz _) V. 

-      : lookup-safe (wfe/c W1 V) (sub-env/ext G1) (sub-venv/ext H1) V''
           <- lookup-safe W1 G1 H1 V'
           <- wfv-extend V' _ V''.

%worlds () (lookup-safe _ _ _ _).
%total A (lookup-safe A _ _ _).


sub-venv-refl0: {G}
             sub-venv G N G z -> 
             type.
%mode sub-venv-refl0 +A -C.

%worlds () (sub-venv-refl0 _ _).
%trustme
%total {A} (sub-venv-refl0 A _).


sub-venv-refl: wf-env H1 G1 -> 
             sub-env G N G1 z -> 
             sub-venv H N H1 z -> 
             type.
%mode sub-venv-refl +A +B -C.

-      : sub-venv-refl wfe/n sub-env/z sub-venv/z.
-      : sub-venv-refl (wfe/c W1 V) (sub-env/sz G1) (sub-venv/sz G2)
          <- sub-venv-refl W1 G1 G2.

%worlds () (sub-venv-refl _ _ _).
%total A (sub-venv-refl A _ _).


lookup-safe-cons: wf-env H G -> 
             sub-env (tcons T GN) (s X) G N -> 
             sub-venv (vcons V HN) (s X) H N -> 
             wf-val H V T -> type.
%mode lookup-safe-cons +A +B -C -D.

-      : lookup-safe-cons (wfe/c W1 V) (sub-env/sz G1) (sub-venv/sz G2) V
          <- sub-venv-refl W1 G1 G2.

-      : lookup-safe-cons (wfe/c W1 V) (sub-env/ext G1) (sub-venv/ext H1) V''
           <- lookup-safe-cons W1 G1 H1 V'
           <- wfv-extend V' _ V''
         .

%worlds () (lookup-safe-cons _ _ _ _).
%total A (lookup-safe-cons A _ _ _).


lookup-safe-cons-fun2: 
             wf-val HS V (arrow (tsome T1) T2 T3) -> 
             sub-venv (vcons V HN) N H z -> 
             sub-venv (vcons (clos (arrow (tsome T1) T2 T3) RX HX) HN) N H z -> 
             type.
%mode lookup-safe-cons-fun2 +A +B -C.

-      : lookup-safe-cons-fun2 (wfv/f _ _ _ _) SE SE.
-      : lookup-safe-cons-fun2 (wfv/ext _ _ W) SE SE' <- lookup-safe-cons-fun2 W SE SE'.

%worlds () (lookup-safe-cons-fun2 _ _ _).
%total (A) (lookup-safe-cons-fun2 A _ _).


lookup-safe-cons-fun: 
             wf-env H G -> 
             sub-env (tcons (arrow (tsome T1) T2 T3) GN) (s X) G N -> 
             sub-venv (vcons (clos (arrow (tsome T1) T2 T3) RX HX) HN) (s X) H N -> 
             type.
%mode lookup-safe-cons-fun +A +B -C.

-      : lookup-safe-cons-fun (wfe/c W1 WV) (sub-env/sz G1) G3 
          <- sub-venv-refl W1 G1 G2
          <- lookup-safe-cons-fun2 WV (sub-venv/sz G2) G3.

-      : lookup-safe-cons-fun (wfe/c W1 V) (sub-env/ext G1) (sub-venv/ext H1)
           <- lookup-safe-cons-fun W1 G1 H1
         .

%worlds () (lookup-safe-cons-fun _ _ _).
%total (A) (lookup-safe-cons-fun _ A _).





eq-nat: nat -> nat -> type.
id-nat: eq-nat N N.

eq-nat-e: eq-nat N1 N2 -> eq-nat (s N1) (s N2) -> type.
%mode eq-nat-e +A -C.
- : eq-nat-e id-nat id-nat.
%worlds () (eq-nat-e _ _).
%total (A) (eq-nat-e A _).




sub-venv-size-unique: 
             sub-venv HN1 N H NH1 ->
             sub-venv HN2 N H NH2 ->
             eq-nat NH1 NH2 ->
             type.
%mode sub-venv-size-unique +A +B -C.

- : sub-venv-size-unique sub-venv/z sub-venv/z id-nat.
- : sub-venv-size-unique (sub-venv/sz _) (sub-venv/sz _) id-nat.
- : sub-venv-size-unique (sub-venv/ext G1) (sub-venv/ext G2) E'
      <- sub-venv-size-unique G1 G2 E
      <- eq-nat-e E E'.

%% TODO: contradiction cases

%worlds () (sub-venv-size-unique _ _ _).
%trustme
%total (A) (sub-venv-size-unique A _ _).




lookup-sel-safe2: 
             sub-venv (vcons (clos (arrow (tsome T1) T1A T1B) R1 P1) H1) (s N) H HN1 ->
             sub-venv (vcons (clos (arrow (tsome T2) T2A T2B) R2 P2) H2) (s N) H HN2 ->
             eq-nat HN1 HN2 ->
             wf-val HX V T1 -> 
             wf-val HX V T2 ->
             type.

%mode lookup-sel-safe2 +A +B +C +D -G.

- : lookup-sel-safe2 (sub-venv/ext H1) (sub-venv/ext H2) id-nat W1 W2
        <- lookup-sel-safe2 H1 H2 id-nat W1 W2.

- : lookup-sel-safe2 (sub-venv/sz H1) (sub-venv/sz H2) id-nat W W.

%worlds () (lookup-sel-safe2 _ _ _ _ _).
%total (A) (lookup-sel-safe2 A _ _ _ _).






extract-wf: wf-val H V T -> wf-env H G -> wf-tp G T -> type.
%mode extract-wf +A -C -D.

%worlds () (extract-wf _ _ _).
%trustme
%total (A) (extract-wf A _ _).


lookup-sel-safe: 
             wf-env H G -> 
             wf-val H V (sel N) -> 
             sub-venv (vcons (clos (arrow (tsome TX) TA TB) RX HX) HN) (s N) H NNG ->
             sub-env (tcons (arrow (tsome TX) _ _) GN) (s N) G NNG ->
             wf-val H V TX -> type.
%mode lookup-sel-safe +A +B +D +F -G.

- : lookup-sel-safe WE (wfv/abs LVN WVX) LVN1 LN1 WVX1
      <- sub-venv-size-unique LVN LVN1 EQ
      <- lookup-sel-safe2 LVN LVN1 EQ WVX WVX1.

- : lookup-sel-safe (wfe/c WE'' _) (wfv/ext (wf-tp/sel _) WE' V) (sub-venv/ext LVN1) (sub-env/ext LN1) (wfv/ext XXX WE' V')
      <- lookup-sel-safe WE'' V LVN1 LN1 V'
      <- extract-wf V' WE''' XXX.


%{

recursive case -- can't really happen:

wf-val (clos (arrow (tsome TX) TA TB) RX HX) (sel N)


- : lookup-sel-safe (wfe/c WE'' _) (wfv/ext (wf-tp/sel _) WE' V) (sub-venv/sz LVN1) (sub-env/sz LN1) (wfv/ext XXX WE''' V')
      <- lookup-sel-safe WE'' V LVN1 LN1 V'
      <- extract-wf V' WE''' XXX
      .
}%


%worlds () (lookup-sel-safe _ _ _ _ _).
%total (A) (lookup-sel-safe _ A _ _ _).






eval-safe: type-exp G E T -> wf-env H G -> eval-exp H E V -> wf-val H V T -> type.
%mode eval-safe +A +B +C -D.


eval-app-safe: wf-val H1 (clos (arrow S1 TA1 TA2) E H) (arrow S T1 T2) ->
               wf-val H1 V2 T1 -> 
               eval-exp (vcons V2 (vcons (clos (arrow S1 TA1 TA2) E H) H)) E V3 -> 
               wf-val H1 V3 T2 -> type.
%mode eval-app-safe +A +B +D -C.

-       : eval-app-safe  
          (wfv/f 
              WF
              (TR : type-exp (tcons T3 (tcons _ G0)) R T4)
              (WE1: wf-env HC0 G0)
              SE
          )
          WVX EV3 Z'

          <- wfv-extend WVX _ WVX'

          <- eval-safe                 % eval F(X)
              (TR: type-exp (tcons T3 (tcons _ G0)) R T4)

              (wfe/c (wfe/c WE1 (wfv/f WF TR WE1 SE)) WVX')
              (EV3: eval-exp (vcons V2 (vcons _ HC0)) R V3) 
              (Z: wf-val _ V3 T4)

          <- wfv-restrict Z (wfe/c WE1 (wfv/f WF TR WE1 SE)) WF Z'
          .

-       : eval-app-safe 
          (wfv/fsub WFX) WVX EV3 Z
          <- eval-app-safe WFX WVX EV3 Z
          .

-       : eval-app-safe 
          (wfv/fsub WFX) WVX EV3 Z
          <- eval-app-safe WFX WVX EV3 Z
          .

-       : eval-app-safe 
          (wfv/ext (wf-tp/fun WR WA _) WE WFX) WVX EV3 Z'
          <- wfv-restrict WVX WE WA WVX'
          <- eval-app-safe WFX WVX' EV3 Z
          <- wfv-extend Z _ Z'
          .



-       : eval-safe (t/var W L) E (e/var L2) V
          <- lookup-safe E L L2 V
          .

-       : eval-safe (t/vara W L2 L1) E (e/var LH) (wfv/abs LH2 V)
          <- lookup-safe E L1 LH V
          <- lookup-safe-cons-fun E L2 LH2
          .

-       : eval-safe (t/varc W L2 L1) E (e/var LH) V'
          <- lookup-safe E L1 LH V
          <- lookup-safe-cons-fun E L2 LH2
          <- lookup-sel-safe E V LH2 L2 V'
          .


-      : eval-safe (t/fun _ (wf-tp/fun WFR _ _) TS) (wfe/c E _) (e/fun) (wfv/fsub (wfv/f WFR TS E SE))
          <- sub-venv-refl0 _ SE.

-      : eval-safe 
            (t/app ST TX TF)
            (WE: wf-env _ (tcons _ _))
            (e/app
              (EV3: eval-exp (vcons V2 (vcons _ HC0)) R V3) 
              (EVX: eval-exp _ EXP2 V2) 
              (EVF: eval-exp _ EXP1 (clos _ R HC0))
            )
            Z2

          <- eval-safe          % eval X
              (TX: type-exp _ _ T1)
              WE 
              EVX 
              (WVX: wf-val _ V2 T1)

          <- eval-safe          % eval F
              TF
              WE 
              (EVF: eval-exp _ EXP1 (clos _ R HC0))
              (ZF: wf-val _ _ (arrow _ T1 T2))

          <- eval-app-safe ZF WVX EV3 Z2

          % <- wfv-sub ST Z2' Z2
          .

%worlds () (eval-safe _ _ _ _)(eval-app-safe _ _ _ _).
%total {(C C') (A A')} (eval-safe A _ C _)(eval-app-safe A' _ C' _). % induction on eval-exp

