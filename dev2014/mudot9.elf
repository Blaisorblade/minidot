TODO

- xhigh and xcross
- update spt cases
- invert-wf-fun


%{ ------- arithmetic ----- }%

nat: type.
z: nat.
s: nat -> nat.

add : nat -> nat -> nat -> type.
add/z : add z N N.
add/s : add (s N1) N2 (s N3)
   <- add N1 N2 N3.

%mode add +N1 +N2 -N3.

lte : nat -> nat -> type.
lte/z : lte z N.
lte/s : lte (s N1) (s N2)
   <- lte N1 N2.

%mode lte +N1 +N2.


eq : nat -> nat -> type.
eq/z : eq z z.
eq/s : eq (s N1) (s N2)
   <- eq N1 N2.

% %mode eq +N1 +N2.


ne : nat -> nat -> type.
ne/z1 : ne z (s N).
ne/z2 : ne (s N) z.
ne/s : ne (s N1) (s N2)
   <- ne N1 N2.

%mode ne +N1 +N2.

eq-refl: {N:nat} eq N N -> type.
%mode eq-refl +N -E1.

- : eq-refl z eq/z.
- : eq-refl (s N) (eq/s E) <- eq-refl N E.

%worlds () (eq-refl _ _).
%total {A} (eq-refl A _).


sub-eq: eq A1 A2 -> eq C1 C2 -> add A1 B1 C1 -> add A2 B2 C2 -> eq B1 B2 -> type.
%mode sub-eq +E1 +E2 +A1 +A2 -E3.

- : sub-eq eq/z E add/z add/z E.
- : sub-eq (eq/s E1) (eq/s E2) (add/s A1) (add/s A2) E3
  <- sub-eq E1 E2 A1 A2 E3.

%worlds () (sub-eq _ _ _ _ _).
%total {A} (sub-eq A _ _ _ _).

add-inc: add A B C -> add A (s B) (s C) -> type.
%mode add-inc +E1 -E2.

- : add-inc add/z add/z.
- : add-inc (add/s A1) (add/s A2)
  <- add-inc A1 A2.

%worlds () (add-inc _ _).
%total {A} (add-inc A _).



%{ ------- language ----- }%

% sorts
exp: type.

tpe: type.
val: type.

denv: type.
tenv: type.
venv: type.

% members

dec: type.
rect: tpe -> tpe -> dec.


% expressions

empty: exp.
var: nat -> exp.
fun: dec -> exp -> exp.
app: exp -> exp -> exp.

% values

emptyv: val.
clos: exp -> venv -> val.

% types

bot  : tpe.
top  : tpe.
arrow: tpe -> tpe -> tpe.  % A => B
tsel : nat -> tpe.                % x.T
bind : nat -> dec -> tpe -> tpe.  % { x => T: L..U; f: A }


% environments
vnil  : venv.
vcons : val -> venv -> venv.
tnil  : tenv.
tcons : tpe -> tenv -> tenv.


dcons : dec -> denv.
dnil : denv.

%{ ------- environments ----- }%

vlookup-zero : venv -> nat -> val -> type.
vl/hit  : vlookup-zero (vcons V H) z V.
vl/miss : vlookup-zero (vcons V' H) (s N) V <- vlookup-zero H N V.

vsize : venv -> nat -> type.
%mode vsize +A -B.
vf/n   : vsize vnil z.
vf/c   : vsize (vcons V H) (s N) <- vsize H N.
%worlds () (vsize _ _).
%total A (vsize A _).

vlookup: venv -> nat -> val -> type.
vl  : vlookup G N V
  <- vsize G S
  <- add (s N) M S
  <- vlookup-zero G M V.


tlookup-zero: tenv -> nat -> tpe -> type.
tl/hit  : tlookup-zero (tcons V G) z V.
tl/miss : tlookup-zero (tcons V' G) (s N) V <- tlookup-zero G N V.

tsize : tenv -> nat -> type.
tf/n   : tsize tnil z.
tf/c   : tsize (tcons V G) (s N) <- tsize G N.

%worlds () (tsize _ _).

tlookup: tenv -> nat -> tpe -> type.
tl  : tlookup G N V
  <- tsize G S
  <- add (s N) M S
  <- tlookup-zero G M V.



%{ ------- subtyping ------ }%

stp: nat -> denv -> tpe -> denv -> tpe -> type. % G1 < G2 |- T1 < T2

spt: nat -> denv -> tpe -> denv -> tpe -> type. % G1 < G2 |- T1 > T2

sdc: nat -> denv -> dec -> denv -> dec -> type. % G1 < G2 |- L1..U1 < L2..U2


sdc/rect: sdc (s N) dnil (rect L1 U1) dnil (rect L2 U2) 
          <- spt (s N) dnil L1 dnil L2
          <- stp (s N) dnil U1 dnil U2
          <- stp (s N) dnil L1 dnil U1
          <- stp (s N) dnil L2 dnil U2
          .

sdc/rectc: sdc (s N) (dcons D1) (rect L1 U1) (dcons D2) (rect L2 U2) 
          <- spt (s N) (dcons D1) L1 (dcons D2) L2
          <- stp (s N) (dcons D1) U1 (dcons D2) U2
          % <- stp (s N) (dcons D1) L1 (dcons D2) U1  %% trans issue?
          % <- stp (s N) (dcons D1) L2 (dcons D2) U2  %% trans issue?
          .


stp/assum: stp z (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2.
spt/assum: spt z (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2.



stp/top: stp (s N) dnil T dnil top.
stp/topc: stp (s N) (dcons (rect L1 U1)) T (dcons (rect L2 U2)) top
          <- spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          .



spt/top: spt (s N) dnil top dnil T.
spt/topc: spt (s N) (dcons (rect L1 U1)) top (dcons (rect L2 U2)) T
          <- stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          .

stp/bot: stp (s N) dnil bot dnil T.
stp/botc: stp (s N) (dcons (rect L1 U1)) bot (dcons (rect L2 U2)) T
          <- spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          .

spt/bot: spt (s N) dnil T dnil bot.
spt/botc: spt (s N) (dcons (rect L1 U1)) T (dcons (rect L2 U2)) bot
          <- stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          .


stp/fun: stp (s N) dnil (arrow A1 B1) dnil (arrow A2 B2) 
          <- spt (s N) dnil A1 dnil A2
          <- stp (s N) dnil B1 dnil B2 
          .

stp/func: stp (s N) (dcons (rect L1 U1)) (arrow A1 B1) (dcons (rect L2 U2)) (arrow A2 B2) 
          <- spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          <- spt (s N) (dcons (rect L1 U1)) A1 (dcons (rect L2 U2)) A2
          <- stp (s N) (dcons (rect L1 U1)) B1 (dcons (rect L2 U2)) B2 
          .

spt/fun: spt (s N) dnil (arrow A1 B1) dnil (arrow A2 B2) 
          <- stp (s N) dnil A1 dnil A2
          <- spt (s N) dnil B1 dnil B2 
          .

spt/func: spt (s N) (dcons (rect L1 U1)) (arrow A1 B1) (dcons (rect L2 U2)) (arrow A2 B2) 
          <- stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          <- stp (s N) (dcons (rect L1 U1)) A1 (dcons (rect L2 U2)) A2
          <- spt (s N) (dcons (rect L1 U1)) B1 (dcons (rect L2 U2)) B2 
          .


stp/sel1: stp (s N) (dcons (rect L1 U1)) (tsel z) (dcons (rect L2 U2)) T2 
          <- spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          <- stp (s N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) T2
          .

spt/sel1: spt (s N) (dcons (rect L1 U1)) (tsel z) (dcons (rect L2 U2)) T2 
          <- stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          <- spt (s N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) T2
          .


stp/sel2: stp (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) (tsel z)
          <- spt (s (s N)) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          % <- sdc (s (s N)) (dcons (rect L1 U1)) (rect L1 U1) (dcons (rect L2 U2)) (rect L2 U2)
          <- stp (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) U2
          % we want to express this:
          % <- stp (s (s N)) (dcons (rect L1 U1)) T1 (dcons (rect L1 U1)) L1 
          % but we split it into two cases so that we can apply
          % transitivity on independent proper subterms, instead 
          % of twice in a chain T0 < T1 < L1 < L0.
          % this trick also enables us to decrease the depth of only
          % the second derivation.
          <- stp (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect LX UX)) LX

          <- stp (s (s (s N))) (dcons (rect L1 U1)) U1 (dcons (rect LX UX)) UX
          <- spt (s (s (s N))) (dcons (rect L1 U1)) L1 (dcons (rect LX UX)) LX
          <- stp (s (s N)) (dcons (rect L1 U1)) U1 (dcons (rect LX UX)) UX
          <- spt (s (s N)) (dcons (rect L1 U1)) L1 (dcons (rect LX UX)) LX
          .

          % transitivity idea: do trans on N version,
          % then upgrade to N+1


spt/sel2: spt (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) (tsel z)
          <- stp (s (s (N))) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          <- spt (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) L2
          % <- spt (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect L1 U1)) U1
          <- spt (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect LX UX)) UX

          <- stp (s (s (s (N)))) (dcons (rect L1 U1)) U1 (dcons (rect LX UX)) UX
          <- spt (s (s (s (N)))) (dcons (rect L1 U1)) L1 (dcons (rect LX UX)) LX
          <- stp (s (s (N))) (dcons (rect L1 U1)) U1 (dcons (rect LX UX)) UX
          <- spt (s (s (N))) (dcons (rect L1 U1)) L1 (dcons (rect LX UX)) LX
          .


stp/selx: stp (s N) (dcons (rect L1 U1)) (tsel z) (dcons (rect L2 U2)) (tsel z)
          <- spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          <- stp (s N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          .

spt/selx: spt (s N) (dcons (rect L1 U1)) (tsel z) (dcons (rect L2 U2)) (tsel z)
          <- stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          <- spt (s N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          .


stp/bind: stp (s N) dnil (bind z (rect L1 U1) T1) dnil (bind z (rect L2 U2) T2)
          <- spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2
          <- stp (s N) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2
          <- sdc (s N) (dcons (rect L1 U1)) (rect L1 U1) (dcons (rect L2 U2)) (rect L2 U2)
          .

spt/bind: spt (s N) dnil (bind z (rect L1 U1) T1) dnil (bind z (rect L2 U2) T2)
          <- stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2
          <- stp (s N) (dcons (rect L2 U2)) T2 (dcons (rect L1 U1)) T1
          <- sdc (s N) (dcons (rect L2 U2)) (rect L2 U2) (dcons (rect L1 U1)) (rect L1 U1)
          .


% --- 

%abbrev env1 = [l] [u] [t] (tcons (bind z (rect l u) t) tnil).


%% normal 2-env subtyping, using stp/spt inside the bind case

atp: nat -> tenv -> tpe -> tenv -> tpe -> type. % G1 |- T1 < T2 -| G2


atp/top: atp (s N) G1 T G2 top.

atp/bot: atp (s N) G1 bot G2 T.

atp/fun: atp (s N) G1 (arrow A1 B1) G2 (arrow A2 B2) 
          <- atp (s N) G2 A2 G1 A1
          <- atp (s N) G1 B1 G2 B2 
          .

atp/sel1: atp (s N) (env1 L U T) (tsel z) G2 T2 
          % <- atp (s N) (env1 L U T) L G2 T2
          <- atp (s N) (env1 L U T) U G2 T2
          .

atp/sel2: atp (s N) G1 T1 (env1 L U T) (tsel z)
          <- atp (s N) G1 T1 (env1 L U T) L
          <- atp (s N) G1 T1 (env1 L U T) U
          .

atp/selx: atp (s N) (env1 L U T) (tsel z) (env1 L U T) (tsel z)
          % <- atp (s N) (env1 L U T) L (env1 L U T) U
          .

atp/bind: atp (s N) G1 (bind z D1 T1) G2 (bind z D2 T2)
          <- stp (s N) (dcons D1) T1 (dcons D2) T2
          .

atp/bindA: atp (s N) G1 (bind z D1 T1) G2 T2
          <- stp (s N) (dcons D1) T1 (dcons DX) TX
          <- atp (s N) tnil TX G2 T2
          .


% ---

wf-tp: tenv -> tpe -> type.

sub-tp: tenv -> tpe -> tenv -> tpe -> type.

sub-tp/00: sub-tp G1 T1 G2 T2 
          <- atp (s z) G1 T1 G2 T2.




%{ ------- eval-exp / type-exp ----- }%

eval-exp   : venv -> exp -> val -> type.

e/empty    : eval-exp G empty emptyv.

e/var      : eval-exp G (var N) V <- vlookup G N V.

e/fun      : eval-exp G (fun D R) (clos R G).

e/app      : eval-exp G (app E1 E2) V3
            <- eval-exp G E1 (clos R G1)
            <- eval-exp G E2 V2
            <- eval-exp (vcons V2 (vcons (clos R G1) G1)) R V3.


type-exp   : tenv -> exp -> tpe -> type.
t/empty    : type-exp G empty top.
t/var      : type-exp G (var X) T <- tlookup G X T.
t/fun      : type-exp G (fun D R) (bind Z D (arrow T1 T2))
                <- tsize G Z
                <- type-exp (tcons T1 (tcons (bind Z D (arrow T1 T2)) G)) R T2.

t/app       : type-exp G (app E1 E2) T2
            <- type-exp G E1 (arrow T1 T2) 
            <- type-exp G E2 T1.

t/sub       : type-exp G E T2
            <- type-exp G E T1
            <- sub-tp G T1 G T2.


%{ ------- well-formedness / typing for values and environment ----- }%

wf-val   : val -> tenv -> tpe -> type.
wf-env   : venv -> tenv -> type.

wfv/empty : wf-val emptyv G top.

wfv/f    : wf-val (clos R H) G (bind Z D (arrow T1 T2))
            <- wf-env H GC
            <- tsize GC Z
            <- type-exp (tcons T1 (tcons (bind Z D (arrow T1 T2)) GC)) R T2.


wfv/sub  : wf-val V G T
            <- wf-val V G1 T1
            <- sub-tp G1 T1 G T.

wfe/n    : wf-env vnil tnil.
wfe/c    : wf-env (vcons V H) (tcons T G) <- wf-val V (tcons T G) T <- wf-env H G.





%{ ------- test cases ------- }%

tX = top.

d1 = (rect top top).
d2 = (rect bot top).
g1 = (dcons d1).
g2 = (dcons d2).

1 = (s z).
2 = (s 1).
3 = (s 2).
depth = 3.

%query 1 1 stp depth dnil bot dnil top.

%query 1 1 stp depth dnil top dnil top.

%query 1 1 stp depth dnil (arrow top top) dnil (arrow top top).

%query 1 1 sdc depth dnil (rect top top) dnil (rect top top).

%query 1 1 sdc depth dnil (rect top top) dnil (rect bot top).


%query 1 1 stp depth g1 top g1 top.

%query 1 1 stp depth g1 (arrow top top) g1 (arrow top top).

%query 1 1 sdc depth g1 (rect top top) g1 (rect top top).

%query 1 1 sdc depth g1 (rect top top) g1 (rect bot top).


%query 1 1 stp depth g1 top g2 top.

%query 1 1 stp depth g1 (arrow top top) g2 (arrow top top).

%query 1 1 sdc depth g1 (rect top top) g2 (rect top top).

%query 1 1 sdc depth g1 (rect top top) g2 (rect bot top).


%query 1 1 stp depth dnil (bind z d1 top) dnil (bind z d1 top).

%query 1 1 stp depth dnil (bind z d2 top) dnil (bind z d2 top).

%query 1 1 stp depth dnil (bind z d1 top) dnil (bind z d2 top).


%{
  { z => type A: X .. X;   def id(z.A):z.A } <:
  { z => type A: bot..top; def id(z.A):z.A }
}%

t1 = (bind z (rect (arrow top top) (arrow top top)) (arrow (tsel z) (tsel z))).
t2 = (bind z (rect bot top) (arrow (tsel z) (tsel z))).

%query 1 1 stp depth dnil t1 dnil t2.

%query 0 * stp depth dnil t2 dnil t1.




%{ ------- typing proofs ------- }%


%% helper lemmas

stp-xlow: stp (s N) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          type.
%mode stp-xlow +SBT2 -SBT3.

- : stp-xlow (stp/topc XL) XL.
- : stp-xlow (stp/botc XL) XL.
- : stp-xlow (stp/func _ _ XL) XL.
- : stp-xlow (stp/sel1 _ XL) XL.
- : stp-xlow (stp/sel2 _ _ _ _ _ _ XL) XL.
- : stp-xlow (stp/selx _ XL) XL.

%worlds () (stp-xlow _ _).
%total N (stp-xlow N _).
%reduces N3 <= N2 (stp-xlow N2 N3).

spt-xlow: spt (s N) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
          type.
%mode spt-xlow +SBT2 -SBT3.

- : spt-xlow (spt/topc XL) XL.
- : spt-xlow (spt/botc XL) XL.
- : spt-xlow (spt/func _ _ XL) XL.
- : spt-xlow (spt/sel1 _ XL) XL.
- : spt-xlow (spt/sel2 _ _ _ _ _ _ XL) XL.
- : spt-xlow (spt/selx _ XL) XL.

%worlds () (spt-xlow _ _).
%total N (spt-xlow N _).
%reduces N3 <= N2 (spt-xlow N2 N3).


stp-xhigh: stp (s N) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          stp (N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
          type.
%mode stp-xhigh +SBT2 -SBT3.

%% TODO

%worlds () (stp-xhigh _ _).
%trustme
%total N (stp-xhigh N _).
%reduces N3 <= N2 (stp-xhigh N2 N3).


spt-xhigh: spt (s N) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          spt (N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          type.
%mode spt-xhigh +SBT2 -SBT3.

%% TODO

%worlds () (spt-xhigh _ _).
%trustme
%total N (spt-xhigh N _).
%reduces N3 <= N2 (spt-xhigh N2 N3).




stp-xcross :
  %% Input
  stp (s N) (dcons (rect L U)) T1 (dcons D2) T2 ->
  %% Output
  stp (s N) (dcons (rect L U)) L (dcons (rect L U)) U ->
  type.
%mode stp-xcross +A -B.

%% TODO

%worlds () (stp-xcross _ _).
%trustme
%total A (stp-xcross A _).
%reduces N3 <= N2 (stp-xcross N2 N3).

spt-xcross :
  %% Input
  spt (s N) (dcons (rect L U)) T1 (dcons D2) T2 ->
  %% Output
  stp (s N) (dcons (rect L U)) L (dcons (rect L U)) U ->
  type.
%mode spt-xcross +A -B.

%% TODO

%worlds () (spt-xcross _ _).
%trustme
%total A (spt-xcross A _).
%reduces N3 <= N2 (spt-xcross N2 N3).




%{ not needed

stp-downgrade1: stp (s N) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
                spt (s N) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          stp N (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
          spt N (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          type.
%mode stp-downgrade1 +SBT2 +B -SBT3 -D.


%worlds () (stp-downgrade1 _ _ _ _).
%total N (stp-downgrade1 N _ _ _).

}%



%% todo: need both L1 L2 and U1 U2 always ...

stp-upgrade: stp (s N) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          stp (s (s N)) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
          spt (s (s N)) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          stp (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          type.
%mode stp-upgrade +SBT2 +B +C -SBT3.

spt-upgrade: spt (s N) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          stp (s (s N)) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
          spt (s (s N)) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          spt (s (s (s N))) (dcons (rect L1 U1)) T1 (dcons (rect L2 U2)) T2 ->
          type.
%mode spt-upgrade +SBT2 +B +C -SBT3.


- : stp-upgrade (stp/topc XL) XU' XL' (stp/topc XL').
- : stp-upgrade (stp/botc XL) XU' XL' (stp/botc XL').
- : stp-upgrade (stp/func SR SA XL) XU' XL' (stp/func SR' SA' XL')
        <- stp-upgrade SR XU' XL' SR'
        <- spt-upgrade SA XU' XL' SA'
        .
- : stp-upgrade (stp/selx SU XL) XU' XL' (stp/selx SU' XL')
        <- stp-upgrade SU XU' XL' SU'
        .

- : stp-upgrade (stp/sel1 SU XL) XU' XL' (stp/sel1 SU' XL')
        <- stp-upgrade SU XU' XL' SU'
        .

- : stp-upgrade (stp/sel2 SY SX SY1 SX1 SL SU XL) XU' XL' (stp/sel2 SY' SX' SY1' SX1' SL' SU' XL')
        <- stp-upgrade SU XU' XL' SU'
        
        % <- stp-xlow SX1 XL''
        % <- spt-xlow SY1 XU''
        <- stp-upgrade SX SX1 SY1 SX'
        <- spt-upgrade SY SX1 SY1 SY'
        <- spt-upgrade SY1 SX' SY' SY1'
        <- stp-upgrade SX1 SX' SY' SX1'

        <- stp-upgrade SL SX' SY' SL' % T1 < LX
        .

%% TODO: spt-upgrade

%worlds () (stp-upgrade _ _ _ _)(spt-upgrade _ _ _ _).
%trustme
%total (N N') (stp-upgrade N _ _ _)(spt-upgrade N' _ _ _).


stp-upgrade1: stp (s (s N)) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
              spt (s (s N)) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          stp (s (s (s N))) (dcons (rect L1 U1)) U1 (dcons (rect L2 U2)) U2 ->
          spt (s (s (s N))) (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2 ->
          type.
%mode stp-upgrade1 +SBT2 +B -SBT3 -D.

- : stp-upgrade1 AA BB AA' BB'
          <- stp-xlow AA XL
          <- spt-xlow BB YL
          <- spt-upgrade XL AA BB BB'
          <- stp-upgrade YL AA BB AA'
          .

%worlds () (stp-upgrade1 _ _ _ _).
%total N (stp-upgrade1 N _ _ _).







%% combined trans + weakening lemma

stp-trans-weaken: stp (N) G1 T1 G2 T2 -> stp (N) G2 T2 G3 T3 -> stp (N) G1 T1 G3 T3 -> type.
%mode stp-trans-weaken +SBT1 +SBT2 -SBT3.

spt-trans-weaken: spt (N) G1 T1 G2 T2 -> spt (N) G2 T2 G3 T3 -> spt (N) G1 T1 G3 T3 -> type.
%mode spt-trans-weaken +SBT1 +SBT2 -SBT3.

sdc-trans-weaken: sdc (N) G1 D1 G2 D2 -> sdc (N) G2 D2 G3 D3 -> sdc (N) G1 D1 G3 D3 -> type.
%mode sdc-trans-weaken +SBT1 +SBT2 -SBT3.

stp-trans-weaken2: stp (N) G1 T1 G2 T2 -> stp (N) G2 T2 G3 T3 -> stp (N) G1 T1 G3 T3 -> type.
%mode stp-trans-weaken2 +SBT1 +SBT2 -SBT3.

spt-trans-weaken2: spt (N) G1 T1 G2 T2 -> spt (N) G2 T2 G3 T3 -> spt (N) G1 T1 G3 T3 -> type.
%mode spt-trans-weaken2 +SBT1 +SBT2 -SBT3.

sdc-trans-weaken2: sdc (N) G1 D1 G2 D2 -> sdc (N) G2 D2 G3 D3 -> sdc (N) G1 D1 G3 D3 -> type.
%mode sdc-trans-weaken2 +SBT1 +SBT2 -SBT3.


-/rect : sdc-trans-weaken
            (sdc/rect L2U2 L1U1 U1U2 L1L2)
            (sdc/rect L3U3 L2U2' U2U3 L2L3)
            (sdc/rect L3U3 L1U1 U1U3 L1L3)
            <- stp-trans-weaken U1U2 U2U3 U1U3
            <- spt-trans-weaken L1L2 L2L3 L1L3
            .

-/rectc : sdc-trans-weaken
            (sdc/rectc U1U2 L1L2)
            (sdc/rectc U2U3 L2L3)
            (sdc/rectc U1U3 L1L3)
            <- stp-trans-weaken U1U2 U2U3 U1U3
            <- spt-trans-weaken L1L2 L2L3 L1L3
            % widen L1U1 to L1U1'
            % widen L3U3 to L3U3'
            .


-/top : stp-trans-weaken S1 stp/top stp/top.
-/topc : stp-trans-weaken S1 (stp/topc XL2) (stp/topc XL3)
            <- stp-xlow S1 XL1
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/top2 : spt-trans-weaken spt/top S1 spt/top.
-/topc2 : spt-trans-weaken (spt/topc XL1) S2 (spt/topc XL3)
            <- spt-xlow S2 XL2
            <- stp-trans-weaken XL1 XL2 XL3
            .

-/bot : stp-trans-weaken stp/bot S2 stp/bot.
-/botc : stp-trans-weaken (stp/botc XL1) S2 (stp/botc XL3)
            <- stp-xlow S2 XL2
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/bot2 : spt-trans-weaken S1 spt/bot spt/bot.
-/botc2 : spt-trans-weaken S1 (spt/botc XL2) (spt/botc XL3)
            <- spt-xlow S1 XL1
            <- stp-trans-weaken XL1 XL2 XL3
            .

-/assum : stp-trans-weaken stp/assum stp/assum stp/assum.
-/assum : spt-trans-weaken spt/assum spt/assum spt/assum.


-/fun-fun  : stp-trans-weaken
            (stp/fun SBT2 SBT1)
            (stp/fun SBT4 SBT3)
            (stp/fun SBT6 SBT5)
            <- spt-trans-weaken SBT1 SBT3 SBT5 
            <- stp-trans-weaken SBT2 SBT4 SBT6
            .

-/fun-fun--X2  : spt-trans-weaken
            (spt/fun SBT2 SBT1)
            (spt/fun SBT4 SBT3)
            (spt/fun SBT6 SBT5)
            <- stp-trans-weaken SBT1 SBT3 SBT5
            <- spt-trans-weaken SBT2 SBT4 SBT6
            .

-/func-func  : stp-trans-weaken
            (stp/func SBT2 SBT1 XL1)
            (stp/func SBT4 SBT3 XL2)
            (stp/func SBT6 SBT5 XL3)
            <- spt-trans-weaken SBT1 SBT3 SBT5
            <- stp-trans-weaken SBT2 SBT4 SBT6
            <- spt-trans-weaken XL1 XL2 XL3
            .
-/func-func--X2  : spt-trans-weaken
            (spt/func SBT2 SBT1 XL1)
            (spt/func SBT4 SBT3 XL2)
            (spt/func SBT6 SBT5 XL3)
            <- stp-trans-weaken SBT1 SBT3 SBT5
            <- spt-trans-weaken SBT2 SBT4 SBT6
            <- stp-trans-weaken XL1 XL2 XL3
            .

-/tsel1 :   stp-trans-weaken
            (stp/sel1 ST_U1 XL1)
            SBT2
            (stp/sel1 ST_U1' XL3)
            <- stp-trans-weaken ST_U1 SBT2 ST_U1'
            <- stp-xlow SBT2 XL2
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/tsel1--X2 : spt-trans-weaken
            (spt/sel1 ST_U1 XL1)
            SBT2
            (spt/sel1 ST_U1' XL3)
            <- spt-trans-weaken ST_U1 SBT2 ST_U1'
            <- spt-xlow SBT2 XL2
            <- stp-trans-weaken XL1 XL2 XL3
            .

-/tsel2 :   stp-trans-weaken
            SBT1
            (stp/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_2U XL2)
            (stp/sel2 ST_LX' ST_UX' ST_LX1' ST_UX1' ST_1L' ST_2U' XL3)
            <- stp-trans-weaken SBT1 ST_1L ST_1L'
            <- stp-trans-weaken SBT1 ST_2U ST_2U'
            <- stp-xlow SBT1 ST_L1L0
            <- stp-xhigh SBT1 ST_U1U0
            <- spt-trans-weaken ST_L1L0 ST_LX  ST_LX'
            <- stp-trans-weaken ST_U1U0 ST_UX  ST_UX'
            <- stp-upgrade1 ST_UX' ST_LX' ST_UX1' ST_LX1'
            <- stp-xlow SBT1 XL1
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/tsel2--X2 :   spt-trans-weaken
            SBT1
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_2U XL2)
            (spt/sel2 ST_LX' ST_UX' ST_LX1' ST_UX1' ST_1L' ST_2U' XL3)
            <- spt-trans-weaken SBT1 ST_1L ST_1L'
            <- spt-trans-weaken SBT1 ST_2U ST_2U'
            <- spt-xlow SBT1 ST_U1U0
            <- spt-xhigh SBT1 ST_L1L0
            <- spt-trans-weaken ST_L1L0 ST_LX  ST_LX'
            <- stp-trans-weaken ST_U1U0 ST_UX  ST_UX'
            <- stp-upgrade1 ST_UX' ST_LX' ST_UX1' ST_LX1'
            <- spt-xlow SBT1 XL1
            <- stp-trans-weaken XL1 XL2 XL3            
            .


-/tsel2-tsel1 : stp-trans-weaken
            (stp/sel2 ST_LX _ _ _ ST_1L ST_1U XL1)
            (stp/sel1 ST_U2 XL2)
            OUT
            <- stp-trans-weaken ST_1U ST_U2 OUT
            .

-/tsel2-tsel1--X2 : spt-trans-weaken
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_1U XL1)
            (spt/sel1 ST_U2 XL2)
            OUT
            <- spt-trans-weaken ST_1U ST_U2 OUT
            .



-/tsel1-tselx : stp-trans-weaken
            ((stp/selx ST0 XL1): stp _ (dcons (rect L1 U1)) (tsel _) (dcons (rect L2 U2)) (tsel _))
            (stp/sel1 ST_U1 XL2)
            (stp/sel1 ST_U1' XL3)
            <- stp-trans-weaken ST0 ST_U1 ST_U1'
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/tsel1-tselx--X2 : spt-trans-weaken
            (spt/selx (ST0:   spt _ (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2) XL1)
            (spt/sel1 (ST_L3: spt _ (dcons (rect L2 U2)) L2 (dcons (rect L3 U3)) T3) XL2)
            (spt/sel1 ST_L3' XL3)
            <- spt-trans-weaken ST0 ST_L3 ST_L3'
            <- stp-trans-weaken XL1 XL2 XL3
            .


-/tsel2-tselx : stp-trans-weaken
            (stp/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1 XL1)
            ((stp/selx ST0 XL2): stp _ (dcons (rect L1 U1)) (tsel _) (dcons (rect L2 U2)) (tsel _))
            (stp/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1' XL3)
            <- stp-trans-weaken ST_U1 ST0 ST_U1'
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/tsel2-tselx--X2 : spt-trans-weaken
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1 XL1)
            (spt/selx (ST0: spt _ (dcons (rect L2 U2)) L2 (dcons (rect L3 U3)) L3) XL2)
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1' XL3)
            <- spt-trans-weaken ST_U1 ST0 ST_U1'
            <- stp-trans-weaken XL1 XL2 XL3
            .


-/tselx-tselx : stp-trans-weaken
            (stp/selx SBT1 XL1)
            (stp/selx SBT2 XL2)
            (stp/selx SBT3 XL3)
            <- stp-trans-weaken SBT1 SBT2 SBT3
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/tselx-tselx--X2 : spt-trans-weaken
            (spt/selx SBT1 XL1)
            (spt/selx SBT2 XL2)
            (spt/selx SBT3 XL3)
            <- spt-trans-weaken SBT1 SBT2 SBT3
            <- stp-trans-weaken XL1 XL2 XL3
            .

-/tbind-bind : stp-trans-weaken
            (stp/bind S1 ST1 XL1)
            (stp/bind S2 ST2 XL2)
            (stp/bind S3 ST3 XL3)
            <- sdc-trans-weaken S1 S2 S3
            <- stp-trans-weaken ST1 ST2 ST3
            <- spt-trans-weaken XL1 XL2 XL3
            .

-/tbind-bind--X2 : spt-trans-weaken
            (spt/bind S1 ST1 XL1)
            (spt/bind S2 ST2 XL2)
            (spt/bind S3 ST3 XL3)
            % <- scd-trans-weaken S1 S2 S3
            <- sdc-trans-weaken2 S2 S1 S3  %%% swapping sides
            <- stp-trans-weaken2 ST2 ST1 ST3
            <- stp-trans-weaken XL1 XL2 XL3
            .


%{ ----------- copy'n'paste for termination --------- }%


-/rect : sdc-trans-weaken2
            (sdc/rect L2U2 L1U1 U1U2 L1L2)
            (sdc/rect L3U3 L2U2' U2U3 L2L3)
            (sdc/rect L3U3 L1U1 U1U3 L1L3)
            <- stp-trans-weaken2 U1U2 U2U3 U1U3
            <- spt-trans-weaken2 L1L2 L2L3 L1L3
            .

-/rectc : sdc-trans-weaken2
            (sdc/rectc U1U2 L1L2)
            (sdc/rectc U2U3 L2L3)
            (sdc/rectc U1U3 L1L3)
            <- stp-trans-weaken2 U1U2 U2U3 U1U3
            <- spt-trans-weaken2 L1L2 L2L3 L1L3
            % widen L1U1 to L1U1'
            % widen L3U3 to L3U3'
            .


-/top : stp-trans-weaken2 S1 stp/top stp/top.
-/topc : stp-trans-weaken2 S1 (stp/topc XL2) (stp/topc XL3)
            <- stp-xlow S1 XL1
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/top2 : spt-trans-weaken2 spt/top S1 spt/top.
-/topc2 : spt-trans-weaken2 (spt/topc XL1) S2 (spt/topc XL3)
            <- spt-xlow S2 XL2
            <- stp-trans-weaken2 XL1 XL2 XL3
            .

-/bot : stp-trans-weaken2 stp/bot S2 stp/bot.
-/botc : stp-trans-weaken2 (stp/botc XL1) S2 (stp/botc XL3)
            <- stp-xlow S2 XL2
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/bot2 : spt-trans-weaken2 S1 spt/bot spt/bot.
-/botc2 : spt-trans-weaken2 S1 (spt/botc XL2) (spt/botc XL3)
            <- spt-xlow S1 XL1
            <- stp-trans-weaken2 XL1 XL2 XL3
            .

-/assum : stp-trans-weaken2 stp/assum stp/assum stp/assum.
-/assum : spt-trans-weaken2 spt/assum spt/assum spt/assum.


-/fun-fun  : stp-trans-weaken2
            (stp/fun SBT2 SBT1)
            (stp/fun SBT4 SBT3)
            (stp/fun SBT6 SBT5)
            <- spt-trans-weaken2 SBT1 SBT3 SBT5 
            <- stp-trans-weaken2 SBT2 SBT4 SBT6
            .

-/fun-fun--X2  : spt-trans-weaken2
            (spt/fun SBT2 SBT1)
            (spt/fun SBT4 SBT3)
            (spt/fun SBT6 SBT5)
            <- stp-trans-weaken2 SBT1 SBT3 SBT5
            <- spt-trans-weaken2 SBT2 SBT4 SBT6
            .

-/func-func  : stp-trans-weaken2
            (stp/func SBT2 SBT1 XL1)
            (stp/func SBT4 SBT3 XL2)
            (stp/func SBT6 SBT5 XL3)
            <- spt-trans-weaken2 SBT1 SBT3 SBT5
            <- stp-trans-weaken2 SBT2 SBT4 SBT6
            <- spt-trans-weaken2 XL1 XL2 XL3
            .
-/func-func--X2  : spt-trans-weaken2
            (spt/func SBT2 SBT1 XL1)
            (spt/func SBT4 SBT3 XL2)
            (spt/func SBT6 SBT5 XL3)
            <- stp-trans-weaken2 SBT1 SBT3 SBT5
            <- spt-trans-weaken2 SBT2 SBT4 SBT6
            <- stp-trans-weaken2 XL1 XL2 XL3
            .

-/tsel1 :   stp-trans-weaken2
            (stp/sel1 ST_U1 XL1)
            SBT2
            (stp/sel1 ST_U1' XL3)
            <- stp-trans-weaken2 ST_U1 SBT2 ST_U1'
            <- stp-xlow SBT2 XL2
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/tsel1--X2 : spt-trans-weaken2
            (spt/sel1 ST_U1 XL1)
            SBT2
            (spt/sel1 ST_U1' XL3)
            <- spt-trans-weaken2 ST_U1 SBT2 ST_U1'
            <- spt-xlow SBT2 XL2
            <- stp-trans-weaken2 XL1 XL2 XL3
            .

-/tsel2 :   stp-trans-weaken2
            SBT1
            (stp/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_2U XL2)
            (stp/sel2 ST_LX' ST_UX' ST_LX1' ST_UX1' ST_1L' ST_2U' XL3)
            <- stp-trans-weaken2 SBT1 ST_1L ST_1L'
            <- stp-trans-weaken2 SBT1 ST_2U ST_2U'
            <- stp-xlow SBT1 ST_L1L0
            <- stp-xhigh SBT1 ST_U1U0
            <- spt-trans-weaken2 ST_L1L0 ST_LX  ST_LX'
            <- stp-trans-weaken2 ST_U1U0 ST_UX  ST_UX'
            <- stp-upgrade1 ST_UX' ST_LX' ST_UX1' ST_LX1'
            <- stp-xlow SBT1 XL1
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/tsel2--X2 :   spt-trans-weaken2
            SBT1
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_2U XL2)
            (spt/sel2 ST_LX' ST_UX' ST_LX1' ST_UX1' ST_1L' ST_2U' XL3)
            <- spt-trans-weaken2 SBT1 ST_1L ST_1L'
            <- spt-trans-weaken2 SBT1 ST_2U ST_2U'
            <- spt-xlow SBT1 ST_U1U0
            <- spt-xhigh SBT1 ST_L1L0
            <- spt-trans-weaken2 ST_L1L0 ST_LX  ST_LX'
            <- stp-trans-weaken2 ST_U1U0 ST_UX  ST_UX'
            <- stp-upgrade1 ST_UX' ST_LX' ST_UX1' ST_LX1'
            <- spt-xlow SBT1 XL1
            <- stp-trans-weaken2 XL1 XL2 XL3
            .


-/tsel2-tsel1 : stp-trans-weaken2
            (stp/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_1U XL1)
            (stp/sel1 ST_U2 XL2)
            OUT
            <- stp-trans-weaken2 ST_1U ST_U2 OUT
            .

-/tsel2-tsel1--X2 : spt-trans-weaken2
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_1U XL1)
            (spt/sel1 ST_U2 XL2)
            OUT
            <- spt-trans-weaken2 ST_1U ST_U2 OUT
            .



-/tsel1-tselx : stp-trans-weaken2
            ((stp/selx ST0 XL1): stp _ (dcons (rect L1 U1)) (tsel _) (dcons (rect L2 U2)) (tsel _))
            (stp/sel1 ST_U1 XL2)
            (stp/sel1 ST_U1' XL3)
            <- stp-trans-weaken2 ST0 ST_U1 ST_U1'
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/tsel1-tselx--X2 : spt-trans-weaken2
            (spt/selx (ST0:   spt _ (dcons (rect L1 U1)) L1 (dcons (rect L2 U2)) L2) XL1)
            (spt/sel1 (ST_L3: spt _ (dcons (rect L2 U2)) L2 (dcons (rect L3 U3)) T3) XL2)
            (spt/sel1 ST_L3' XL3)
            <- spt-trans-weaken2 ST0 ST_L3 ST_L3'
            <- stp-trans-weaken2 XL1 XL2 XL3
            .


-/tsel2-tselx : stp-trans-weaken2
            (stp/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1 XL1)
            ((stp/selx ST0 XL2): stp _ (dcons (rect L1 U1)) (tsel _) (dcons (rect L2 U2)) (tsel _))
            (stp/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1' XL3)
            <- stp-trans-weaken2 ST_U1 ST0 ST_U1'
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/tsel2-tselx--X2 : spt-trans-weaken2
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1 XL1)
            (spt/selx (ST0: spt _ (dcons (rect L2 U2)) L2 (dcons (rect L3 U3)) L3) XL2)
            (spt/sel2 ST_LX ST_UX ST_LX1 ST_UX1 ST_1L ST_U1' XL3)
            <- spt-trans-weaken2 ST_U1 ST0 ST_U1'
            <- stp-trans-weaken2 XL1 XL2 XL3
            .


-/tselx-tselx : stp-trans-weaken2
            (stp/selx SBT1 XL1)
            (stp/selx SBT2 XL2)
            (stp/selx SBT3 XL3)
            <- stp-trans-weaken2 SBT1 SBT2 SBT3
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/tselx-tselx--X2 : spt-trans-weaken2
            (spt/selx SBT1 XL1)
            (spt/selx SBT2 XL2)
            (spt/selx SBT3 XL3)
            <- spt-trans-weaken2 SBT1 SBT2 SBT3
            <- stp-trans-weaken2 XL1 XL2 XL3
            .

-/tbind-bind : stp-trans-weaken2
            (stp/bind S1 ST1 XL1)
            (stp/bind S2 ST2 XL2)
            (stp/bind S3 ST3 XL3)
            <- sdc-trans-weaken2 S1 S2 S3
            <- stp-trans-weaken2 ST1 ST2 ST3
            <- spt-trans-weaken2 XL1 XL2 XL3
            .

-/tbind-bind--X2 : spt-trans-weaken2
            (spt/bind S1 ST1 XL1)
            (spt/bind S2 ST2 XL2)
            (spt/bind S3 ST3 XL3)
            % <- scd-trans-weaken2 S1 S2 S3
            <- sdc-trans-weaken S2 S1 S3  %%% swapping sides
            <- stp-trans-weaken ST2 ST1 ST3
            <- stp-trans-weaken2 XL1 XL2 XL3
            .



%worlds () 
(stp-trans-weaken _ _ _)(spt-trans-weaken _ _ _)(sdc-trans-weaken _ _ _)
(stp-trans-weaken2 _ _ _)(spt-trans-weaken2 _ _ _)(sdc-trans-weaken2 _ _ _)
.

%covers stp-trans-weaken +A +B -C.

%covers spt-trans-weaken +A +B -C.

%total {(A A' A'' Y Y' Y'')(B B' B'' X X' X'') } 
(stp-trans-weaken A B _ )(spt-trans-weaken A' B' _)(sdc-trans-weaken A'' B'' _)
(stp-trans-weaken2 X Y _ )(spt-trans-weaken2 X' Y' _)(sdc-trans-weaken2 X'' Y'' _)
.



% ---

atp-trans: atp N G1 T1 G2 T2 -> atp N G2 T2 G3 T3 -> atp N G1 T1 G3 T3 -> type.
%mode atp-trans +S1 +S2 -SBT.

atp-trans2: atp N G1 T1 G2 T2 -> atp N G2 T2 G3 T3 -> atp N G1 T1 G3 T3 -> type.
%mode atp-trans2 +S1 +S2 -SBT.


-/bot:      atp-trans atp/bot _ atp/bot.
-/top:      atp-trans _ atp/top atp/top.

-/fun-fun  : atp-trans
            (atp/fun SBT2 SBT1)
            (atp/fun SBT4 SBT3)
            (atp/fun SBT6 SBT5)
            <- atp-trans2 SBT3 SBT1 SBT5 
            <- atp-trans SBT2 SBT4 SBT6
            .

-/sel2:     atp-trans
            SBT1
            (atp/sel2 SBTU SBTL)
            (atp/sel2 SBTU' SBTL')
            <- atp-trans SBT1 SBTU SBTU'
            <- atp-trans SBT1 SBTL SBTL'
            .

-/sel1:     atp-trans
            (atp/sel1 SBTU)
            SBT1
            (atp/sel1 SBTU')
            <- atp-trans SBTU SBT1 SBTU'
            .

-/sel2-sel1:     atp-trans
            (atp/sel2 SBTU SBTL)
            (atp/sel1 SBTU')
            SBT
            <- atp-trans SBTU SBTU' SBT
            .

-/selx2:     atp-trans
            A
            (atp/selx)
            A
            .

-/selx1:     atp-trans
            (atp/selx)
            A
            A
            .

-/bind:     atp-trans
            (atp/bind SBT1)
            (atp/bind SBT2)
            (atp/bind SBT3)
            <- stp-trans-weaken SBT1 SBT2 SBT3
            .

-/bind-bindA:   atp-trans
            (atp/bind S1)
            (atp/bindA A0 S2)
            (atp/bindA A0 S3)
            <- stp-trans-weaken S1 S2 S3
            .

-/bindA1:   atp-trans
            (atp/bindA S0 S1)
            A
            (atp/bindA S0' S1)
            <- atp-trans S0 A S0'
            .


% ---- copy paste

-/bot:      atp-trans2 atp/bot _ atp/bot.
-/top:      atp-trans2 _ atp/top atp/top.

-/fun-fun  : atp-trans2
            (atp/fun SBT2 SBT1)
            (atp/fun SBT4 SBT3)
            (atp/fun SBT6 SBT5)
            <- atp-trans SBT3 SBT1 SBT5 
            <- atp-trans2 SBT2 SBT4 SBT6
            .

-/sel2:     atp-trans2
            SBT1
            (atp/sel2 SBTU SBTL)
            (atp/sel2 SBTU' SBTL')
            <- atp-trans2 SBT1 SBTU SBTU'
            <- atp-trans2 SBT1 SBTL SBTL'
            .

-/sel1:     atp-trans2
            (atp/sel1 SBTU)
            SBT1
            (atp/sel1 SBTU')
            <- atp-trans2 SBTU SBT1 SBTU'
            .

-/sel2-sel1:     atp-trans2
            (atp/sel2 SBTU SBTL)
            (atp/sel1 SBTU')
            SBT
            <- atp-trans2 SBTU SBTU' SBT
            .

-/selx1:     atp-trans2
            A
            (atp/selx)
            A
            .

-/selx2:     atp-trans2
            (atp/selx)
            A
            A
            .

-/bind:     atp-trans2
            (atp/bind SBT1)
            (atp/bind SBT2)
            (atp/bind SBT3)
            <- stp-trans-weaken SBT1 SBT2 SBT3
            .

-/bind-bindA:   atp-trans2
            (atp/bind S1)
            (atp/bindA A0 S2)
            (atp/bindA A0 S3)
            <- stp-trans-weaken S1 S2 S3
            .

-/bindA1:   atp-trans2
            (atp/bindA S0 S1)
            A
            (atp/bindA S0' S1)
            <- atp-trans2 S0 A S0'
            .

%worlds () (atp-trans _ _ _)(atp-trans2 _ _ _).
%total [(A B') (B A')] (atp-trans A B _)(atp-trans2 A' B' _).


% --- type inversion lemmas


atp-extend1: {D1} atp N G1 T1 G T2 -> atp N (tcons D1 G1) T1 G T2 -> type.
%mode atp-extend1 +D1 +A1 -A2.

%% TODO: sel rules don't allow extension yet, but seems alright

%worlds () (atp-extend1 _ _ _).
%trustme
%total (A) (atp-extend1 A _ _).




stp-to-atp :
  %% Input
  stp (s N) (dcons D1) T1 (dcons D2) T2 ->
  {TX}
  %% Output
  atp (s N) (tcons (bind z D1 TX) tnil) T1 (tcons (bind z D1 TX) tnil) T2 ->
  type.
%mode stp-to-atp +WFE1 +B -WFE2.

spt-to-atp :
  %% Input
  spt (s N) (dcons D1) T2 (dcons D2) T1 ->
  {TX}
  %% Output
  atp (s N) (tcons (bind z D1 TX) tnil) T1 (tcons (bind z D1 TX) tnil) T2 ->
  type.
%mode spt-to-atp +WFE1 +B -WFE2.


-/top: stp-to-atp (stp/topc _) _ atp/top.
-/bot: stp-to-atp (stp/botc _) _ atp/bot.

-/fun: stp-to-atp (stp/func R A _) _ (atp/fun R' A')
        <- spt-to-atp A _ A'
        <- stp-to-atp R _ R'
        .

-/selx: stp-to-atp (stp/selx _ _) _ (atp/selx)
        .

-/sel1: stp-to-atp (stp/sel1 SU _) _ (atp/sel1 SU')
        <- stp-to-atp SU _ SU'
        .

-/sel2: stp-to-atp (stp/sel2 _ _ SLXL1 SU1UX ST1LX ST1U2 STL2L1) _ (atp/sel2 ST1U1' ST1L1')
        <- stp-to-atp ST1LX _ ST1LX'

        <- spt-to-atp SLXL1 _ SLXL1'
        <- atp-trans ST1LX' SLXL1' ST1L1'

        % get L1 < U1 and trans!
        <- stp-xcross ST1LX SL1U1
        <- stp-to-atp SL1U1 _ SL1U1'
        <- atp-trans ST1L1' SL1U1' ST1U1'
        .


-/top: spt-to-atp (spt/topc _) _ atp/top.
-/bot: spt-to-atp (spt/botc _) _ atp/bot.

-/fun: spt-to-atp (spt/func R A _) _ (atp/fun R' A')
        <- stp-to-atp A _ A'
        <- spt-to-atp R _ R'
        .

-/selx: spt-to-atp (spt/selx _ _) _ (atp/selx)
        .

-/sel1: spt-to-atp (spt/sel1 ST1L1 _) _ (atp/sel2 ST1U1' ST1L1')
        <- spt-to-atp ST1L1 _ ST1L1'

        % get L1 < U1 and trans!
        <- spt-xcross ST1L1 SL1U1
        <- stp-to-atp SL1U1 _ SL1U1'
        <- atp-trans ST1L1' SL1U1' ST1U1'
        .

-/sel2: spt-to-atp (spt/sel2 _ _ SLXL1 SU1UX SUXT2 SL2T2 STU1U2) _ (atp/sel1 SU1T2')

        <- stp-to-atp SU1UX _ SU1UX'
        <- spt-to-atp SUXT2 _ SUXT2'
        <- atp-trans SU1UX' SUXT2' SU1T2'
        .


%worlds () (stp-to-atp _ _ _)(spt-to-atp _ _ _).
%total (A A') (stp-to-atp A _ _)(spt-to-atp A' _ _).






atp-inv-fun1 :
  %% Input
  atp N G1 (bind z D1 (arrow T11 T12)) G2 (arrow T21 T22) ->
  %% Output
  atp N (tcons (bind z D1 (arrow T11 T12)) tnil) (arrow T11 T12) G2 (arrow T21 T22) ->
  type.
%mode atp-inv-fun1 +WFE1 -WFE2.

- : atp-inv-fun1 (atp/bindA S0 S1) XX
      <- stp-to-atp S1 _ S1'
      <- atp-extend1 _ S0 S0'
      <- atp-trans S1' S0' XX.


%worlds () (atp-inv-fun1 _ _).
%total WFE (atp-inv-fun1 WFE _).

atp-inv-fun2 :
  %% Input
  atp N G1 (arrow T11 T12) G2 (arrow T21 T22) ->
  %% Output
  atp N G2 T21 G1 T11 ->
  atp N G1 T12 G2 T22 ->
  type.
%mode atp-inv-fun2 +WFE1 -WFE2 -WFE3.

- : atp-inv-fun2 (atp/fun SR SA) SA SR.

%worlds () (atp-inv-fun2 _ _ _).
%total WFE (atp-inv-fun2 WFE _ _).



% --- high-level rules


sub-tp-inv-fun1 :
  %% Input
  tsize G1 Z ->
  sub-tp G1 (bind Z D1 (arrow T11 T12)) G2 (arrow T21 T22) ->
  %% Output
  sub-tp (tcons (bind Z D1 (arrow T11 T12)) G1) (arrow T11 T12) G2 (arrow T21 T22) ->
  type.
%mode sub-tp-inv-fun1 +A +B -WFE2.

- : sub-tp-inv-fun1 _ (sub-tp/00 A) (sub-tp/00 A')
        <- atp-inv-fun1 A A'.

%worlds () (sub-tp-inv-fun1 _ _ _).
%total WFE (sub-tp-inv-fun1 WFE _ _).


sub-tp-inv-fun2 :
  %% Input
  sub-tp (tcons (bind Z D1 (arrow T11 T12)) G1) (arrow T11 T12) G2 (arrow T21 T22) ->
  %% Output
  sub-tp G2 T21 (tcons (bind Z D1 (arrow T11 T12)) G1) T11 ->
  sub-tp (tcons (bind Z D1 (arrow T11 T12)) G1) T12 G2 T22 ->
  type.
%mode sub-tp-inv-fun2 +WFE1 -WFE2 -WFE3.

- : sub-tp-inv-fun2 (sub-tp/00 (atp/fun SR SA)) (sub-tp/00 SA) (sub-tp/00 SR).

%worlds () (sub-tp-inv-fun2 _ _ _).
%total WFE (sub-tp-inv-fun2 WFE _ _).




% --- high-level rules

sub-tp-refl: wf-tp G T -> sub-tp G T G T -> type.
%mode sub-tp-refl +T -SBT.

%worlds () (sub-tp-refl _ _).
%total WFE (sub-tp-refl WFE _).


sub-tp-trans: sub-tp G1 T1 G2 T2 -> sub-tp G2 T2 G3 T3 -> sub-tp G1 T1 G3 T3 -> type.
%mode sub-tp-trans +S1 +S2 -SBT.

- : sub-tp-trans (sub-tp/00 S1) (sub-tp/00 S2) (sub-tp/00 S3)
          <- atp-trans S1 S2 S3.

%worlds () (sub-tp-trans _ _ _).
%total WFE (sub-tp-trans WFE _ _).




%{ ------- type well-formedness extractors ----- }%

extract-wf2: type-exp G E1 T1 -> wf-tp G T1 -> type.
%mode extract-wf2 +WFE1 -WFE2.

% - : extract-wf2 t/empty wf-tp/top.
% - : extract-wf2 (t/var W L) W' <- widen-mode-wf-tp W W'.
% - : extract-wf2 (t/fun _ WFF _ _ _ _ _ _) WFF' <- widen-mode-wf-tp WFF WFF'.
% - : extract-wf2 (t/app TS1 (TS2: type-exp _ _ (arrow _ _ _))) W2 <- extract-wf2 % TS2 (wf-tp/fun W2 W1).
% - : extract-wf2 (t/sub S TS) W2 <- widen-mode-sub-tp S S' <- extract-wf S' W1 W2.

%worlds () (extract-wf2 _ _).
%trustme
%total WFE (extract-wf2 WFE _).

extract-wf3: wf-val V G T1 -> wf-tp G T1 -> type.
%mode extract-wf3 +WFE1 -WFE2.

% - : extract-wf3 wfv/empty wf-tp/top.
% - : extract-wf3 (wfv/f _ SFF _ _ _ _ _) WFF <- extract-wf SFF _ WFF.
% - : extract-wf3 (wfv/t WR) WR.
% - : extract-wf3 (wfv/sub S TS) W2 <- extract-wf S W1 W2.
%worlds () (extract-wf3 _ _).
%trustme
%total WFE (extract-wf3 WFE _).

%{ ------- wfv: extending and restricting the environment / type ----- }%

extend-sub-tp1: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp (tcons Z G1) T1 G2 T2 -> type.
%mode extend-sub-tp1 +A +B -C.
% - : extend-sub-tp1 ST Z ST' <- extend-sub-tp ST Z _ ST' _.
%worlds () (extend-sub-tp1 _ _ _).
%trustme
%total A (extend-sub-tp1 A _ _).

extend-sub-tp2: sub-tp G1 T1 G2 T2 -> {Z: tpe} sub-tp G1 T1 (tcons Z G2) T2 -> type.
%mode extend-sub-tp2 +A +B -C.
% - : extend-sub-tp2 ST Z ST' <- extend-sub-tp ST Z _ _ ST'.
%worlds () (extend-sub-tp2 _ _ _).
%trustme
%total A (extend-sub-tp2 A _ _).


extend-wfv: wf-val X3 X2 X1 -> {Z: tpe} wf-val X3 (tcons Z X2) X1 -> type.
%mode extend-wfv +A +B -C.

-     : extend-wfv wfv/empty T wfv/empty.

-     : extend-wfv (wfv/sub ST WV) T (wfv/sub ST1 WV)
            <- extend-sub-tp2 ST T ST1.
-     : extend-wfv (wfv/f TE S TV) T (wfv/f TE S TV).


%worlds () (extend-wfv _ _ _).
%total A (extend-wfv A _ _).

%{ ------- suptyping inversion: type-exp ----- }%

wfv-widen: sub-tp G1 T1 G2 T2 -> wf-val V G1 T1 -> wf-val V G2 T2 -> type.
%mode wfv-widen +LTE1 +LTE2 -LTE3.

- : wfv-widen S W (wfv/sub S W).

%worlds () (wfv-widen _ _ _).
%total A (wfv-widen A _ _).


%{ ------- inversion lemmas ------- }%


invert-app :
  %% Input
  type-exp G (app E1 E2) T ->
  %% Output
  type-exp G E1 (arrow T1 T2) -> %% (bind D (arrow T1 T2)) ->
  type-exp G E2 T1 ->
  sub-tp G T2 G T ->
  type.
%mode invert-app +WFE1 -WFE2 -WFE3 -SBT.

-     : invert-app (t/app TS1 TS) TS TS1 SB 
            <- extract-wf2 (t/app TS1 TS) W
            <- sub-tp-refl W SB.
-     : invert-app (t/sub SB1 TS) L L2 SB2
            <- invert-app TS L L2 SB
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-app _ _ _ _).
%total WFE (invert-app WFE _ _ _).


invert-fun :
  %% Input
  type-exp G (fun D R) T ->
  %% Output
  type-exp (tcons T3 (tcons (bind Z D (arrow T3 T4)) G)) R T4 ->
  tsize G Z ->
  sub-tp G (bind Z D (arrow T3 T4)) G T ->
  type.
%mode invert-fun +WFE1 -WFE2 -S -SBT1.

-     : invert-fun (t/fun TS GS) TS GS SB 
            <- extract-wf2 (t/fun TS GS) W
            <- sub-tp-refl W SB.
-     : invert-fun (t/sub SB1 TS) L GS SB2
            <- invert-fun TS L GS SB
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-fun _ _ _ _).
%total WFE (invert-fun WFE _ _ _).


invert-var :
  %% Input
  type-exp G (var N) T ->
  %% Output
  tlookup G N T1 ->
  sub-tp G T1 G T ->
  type.
%mode invert-var +WFE1 -WFE2 -SBT1.

-     : invert-var (t/var L) L SB 
            <- extract-wf2 (t/var L) W
            <- sub-tp-refl W SB.
-     : invert-var (t/sub SB1 TS) L SB2
            <- invert-var TS L SB
            <- sub-tp-trans SB SB1 SB2.

%worlds () (invert-var _ _ _).
%total WFE (invert-var WFE _ _).


invert-wf-fun :
  %% Input
  wf-val (clos R H) G T ->
  %% Output
  type-exp (tcons T3 (tcons (bind Z D (arrow T3 T4)) GC)) R T4 ->
  tsize GC Z ->
  wf-env H GC ->
  sub-tp GC (bind Z D (arrow T3 T4)) G T ->
  wf-val (clos R H) GC (bind Z D (arrow T3 T4)) ->
  type.
%mode invert-wf-fun +WFE1 -WFE2 -WFE3 -GS -SBT1 -W.

% -     : invert-wf-fun (wfv/f TS WE) TS WE SB
%             <- extract-wf3 (wfv/f TS WE) W
%             <- sub-tp-refl W SB.
% -     : invert-wf-fun (wfv/sub SBA1 TS) L L1 SBA2
%             <- invert-wf-fun TS L L1 SBA
%             <- sub-tp-trans SBA SBA1 SBA2.
%worlds () (invert-wf-fun _ _ _ _ _ _).
%trustme
%total WFE (invert-wf-fun WFE _ _ _ _ _).


sub-tp-inv-fun :
  %% Input
  tsize G1 Z -> 
  sub-tp G1 (bind Z D1 (arrow T1 T2)) G2 (arrow T3 T4) ->
  %% Output
  sub-tp G2 T3 (tcons (bind Z D1 (arrow T1 T2)) G1) T1 ->
  sub-tp (tcons (bind Z D1 (arrow T1 T2)) G1) T2 G2 T4 ->
  type.
%mode sub-tp-inv-fun +A +B -C -D.

- : sub-tp-inv-fun GS S S1 S2
      <- sub-tp-inv-fun1 GS S S'
      <- sub-tp-inv-fun2 S' S1 S2.

%worlds () (sub-tp-inv-fun _ _ _ _).
%total WFE (sub-tp-inv-fun WFE _ _ _).




%{ ------- type preservation ----- }%




% lookup safe

lookup-zero-safe-total: wf-env H G -> tlookup-zero G N1 T -> vlookup-zero H N1 V -> wf-val V G T -> type.
%mode lookup-zero-safe-total +A +B -C -D.

-      : lookup-zero-safe-total (wfe/c G V) tl/hit vl/hit V.
-      : lookup-zero-safe-total (wfe/c G V) (tl/miss A) (vl/miss B) Z1
         <- lookup-zero-safe-total G A B Z
         <- extend-wfv Z _ Z1.

%worlds () (lookup-zero-safe-total _ _ _ _).
%total A (lookup-zero-safe-total A _ _ _).

lookup-zero-safe: wf-env H G -> tlookup-zero G N2 T -> vlookup-zero H N1 V -> eq N1 N2 -> wf-val V G T -> type.
%mode lookup-zero-safe +A +B +C +D -E.

-      : lookup-zero-safe (wfe/c G V) tl/hit vl/hit eq/z V.
-      : lookup-zero-safe (wfe/c G V) (tl/miss A) (vl/miss B) (eq/s E) Z1
         <- lookup-zero-safe G A B E Z
         <- extend-wfv Z _ Z1.

%worlds () (lookup-zero-safe _ _ _ _ _).
%total A (lookup-zero-safe A _ _ _ _). % induction on first arg

wf-env-size-eq: wf-env H G -> vsize H N1 -> tsize G N2 -> eq N1 N2 -> type.
%mode wf-env-size-eq +A +B +C -D.
-      : wf-env-size-eq wfe/n vf/n tf/n eq/z.
-      : wf-env-size-eq (wfe/c G _) (vf/c VS) (tf/c TS) (eq/s E) <- wf-env-size-eq G VS TS E.
%worlds () (wf-env-size-eq _ _ _ _).
%total A (wf-env-size-eq A _ _ _).

lookup-safe: wf-env H G -> tlookup G N T -> vlookup H N V -> wf-val V G T -> type.
%mode lookup-safe +A +B +C -D.

-      : lookup-safe WE (tl TL TA TS) (vl VL VA VS) WV
         <- eq-refl (s N) EN
         <- wf-env-size-eq WE VS TS ES
         <- sub-eq EN ES VA TA EM
         <- lookup-zero-safe WE TL VL EM WV.

%worlds () (lookup-safe _ _ _ _).
%total A (lookup-safe A _ _ _).

wf-env-tsize-vsize: wf-env H G -> tsize G N -> vsize H N -> type.
%mode wf-env-tsize-vsize +A +B -C.
-      : wf-env-tsize-vsize wfe/n tf/n vf/n.
-      : wf-env-tsize-vsize (wfe/c G _) (tf/c TS) (vf/c VS) <- wf-env-tsize-vsize G TS VS.
%worlds () (wf-env-tsize-vsize _ _ _).
%total A (wf-env-tsize-vsize A _ _).

lookup-safe-total: wf-env H G -> tlookup G N T -> vlookup H N V -> wf-val V G T -> type.
%mode lookup-safe-total +A +B -C -D.

-      : lookup-safe-total WE (tl TL A TS) (vl VL A VS) WV
         <- wf-env-tsize-vsize WE TS VS
         <- lookup-zero-safe-total WE TL VL WV.

%worlds () (lookup-safe-total _ _ _ _).
%total A (lookup-safe-total A _ _ _).


eval-empty-safe: type-exp G empty T -> wf-val emptyv G T -> type.
%mode eval-empty-safe +A -B.

- : eval-empty-safe t/empty wfv/empty.
- : eval-empty-safe (t/sub ST ZT) (wfv/sub ST W)
    <- eval-empty-safe ZT W.

%worlds () (eval-empty-safe _ _).
%total A (eval-empty-safe A _).


eval-safe: type-exp G E T -> wf-env H G -> eval-exp H E V -> wf-val V G T -> type.
%mode eval-safe +A +B +C -D.

 -      : eval-safe ZT _ e/empty V
          <- eval-empty-safe ZT V.

 -      : eval-safe ZT E (e/var L2) (wfv/sub ST V)
          <- invert-var ZT L ST
          <- lookup-safe E L L2 V.

-      : eval-safe ZT E (e/fun) (wfv/sub ST (wfv/f TS GS E))
          <- invert-fun ZT TS GS ST.

-      : eval-safe
            (ZT: type-exp _ _ T2')
            (WE: wf-env H0 G0)
            (e/app
              (EV3: eval-exp (vcons V2 (vcons _ HC0)) R V3)
              (EVX: eval-exp H0 EXP2 V2)
              (EVF: eval-exp H0 EXP1 (clos R HC0))
            )
            Z2 % (wfv/sub ST (wfv/sub STR' (Z: wf-val V3 (tcons T3 (tcons GC0)) T4)))

          <- invert-app ZT
              (TF: type-exp G0 EXP1 (arrow T1 T2))
              (TX: type-exp G0 EXP2 T1)
              (ST: sub-tp _ T2 _ T2')

          <- eval-safe          % eval X
              (TX: type-exp _ _ T1)
              WE
              EVX
              (WVX: wf-val V2 G0 T1)

          <- eval-safe          % eval F
              TF
              WE
              (EVF: eval-exp H0 EXP1 (clos R HC0))
              (ZF: wf-val (clos R HC0) G0 (arrow T1 T2))

          <- invert-wf-fun
              ZF
              (TR : type-exp (tcons T3 (tcons _ GC0)) R T4)
              GC0S
              (WE1: wf-env HC0 GC0)              
              STF
              WXX

          <- sub-tp-inv-fun
              GC0S
              (STF: sub-tp _ (bind _ _ (arrow T3 T4)) G0 (arrow T1 T2))
              (STA: sub-tp G0 T1 _ T3)
              (STR: sub-tp _ T4 G0 T2)

          <- extend-wfv WXX _ WXX' %% GC -> (tcons SELF GC)

          <- extend-sub-tp2 STA  _ STA''
          % <- extend-sub-tp2 STA'  _ STA''
          <- wfv-widen STA'' WVX WVX3 

          <- eval-safe                 % eval F(X)
              (TR: type-exp (tcons T3 (tcons _ GC0)) R T4)
              (wfe/c (wfe/c WE1 WXX') WVX3)
              (EV3: eval-exp (vcons V2 (vcons _ HC0)) R V3)
              (Z: wf-val V3 (tcons T3 (tcons _ GC0)) T4)

          % <- extend-sub-tp1 STR _ STR'
          <- extend-sub-tp1 STR _ (STR'': sub-tp (tcons T3 (tcons _ GC0)) T4 G0 T2)

          <- wfv-widen STR'' (Z: wf-val V3 (tcons T3 (tcons _ GC0)) T4) Z1
          <- wfv-widen ST Z1 Z2.


%worlds () (eval-safe _ _ _ _).
%total C (eval-safe A _ C _). % induction on eval-exp


